"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2784],{44993:(e,t,i)=>{i.d(t,{Zo:()=>s,kt:()=>f});var r=i(52983);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function n(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?n(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):n(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,r,a=function(e,t){if(null==e)return{};var i,r,a={},n=Object.keys(e);for(r=0;r<n.length;r++)i=n[r],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)i=n[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var d=r.createContext({}),p=function(e){var t=r.useContext(d),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},s=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var i=e.components,a=e.mdxType,n=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=p(i),f=a,m=u["".concat(d,".").concat(f)]||u[f]||c[f]||n;return i?r.createElement(m,l(l({ref:t},s),{},{components:i})):r.createElement(m,l({ref:t},s))}));function f(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=i.length,l=new Array(n);l[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<n;p++)l[p]=i[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,i)}u.displayName="MDXCreateElement"},8408:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>n,metadata:()=>o,toc:()=>p});var r=i(18249),a=(i(52983),i(44993));const n={sidebar_position:4},l="addFile",o={unversionedId:"guides/topic-detail/generator/plugin/api/file/addFile",id:"guides/topic-detail/generator/plugin/api/file/addFile",title:"addFile",description:"Add a single file. Use to add a single template file to the templates directory or add to a template file directly using templates.",source:"@site/../../packages/toolkit/main-doc/en/docusaurus-plugin-content-docs/current/guides/topic-detail/generator/plugin/api/file/addFile.md",sourceDirName:"guides/topic-detail/generator/plugin/api/file",slug:"/guides/topic-detail/generator/plugin/api/file/addFile",permalink:"/v2/en/docs/guides/topic-detail/generator/plugin/api/file/addFile",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"guidesSidebar",previous:{title:"addPartial",permalink:"/v2/en/docs/guides/topic-detail/generator/plugin/api/file/addPartial"},next:{title:"addManyFile",permalink:"/v2/en/docs/guides/topic-detail/generator/plugin/api/file/addManyFile"}},d={},p=[{value:"type",id:"type",level:2},{value:"file",id:"file",level:2},{value:"template",id:"template",level:2},{value:"templateFile",id:"templatefile",level:2},{value:"force",id:"force",level:2},{value:"data",id:"data",level:2}],s={toc:p};function c(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"addfile"},"addFile"),(0,a.kt)("p",null,"Add a single file. Use to add a single template file to the ",(0,a.kt)("inlineCode",{parentName:"p"},"templates")," directory or add to a template file directly using templates."),(0,a.kt)("p",null,"This method can be used with any file type, for file types other than binary, Handlebars render is performed when files are added."),(0,a.kt)("p",null,"This method is available on the ",(0,a.kt)("inlineCode",{parentName:"p"},"onForged")," time to live API parameter."),(0,a.kt)("p",null,"Its type is defined as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface AddFileParams {\n  type: FileType;\n  file: string;\n  template?: string;\n  templateFile?: string;\n  force?: boolean;\n  data?: Record<string, string>;\n}\nexport type ForgedAPI = {\n  addFile: (params: AddFileParams) => Promise<void>;\n  ...\n};\n")),(0,a.kt)("h2",{id:"type"},"type"),(0,a.kt)("p",null,"File type, specific viewable",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/topic-detail/generator/plugin/api/file/introduce"},"File type"),"."),(0,a.kt)("h2",{id:"file"},"file"),(0,a.kt)("p",null,"The path to the created target file."),(0,a.kt)("h2",{id:"template"},"template"),(0,a.kt)("p",null,"File template, configuration This field value can be used directly for template render files. The priority is lower than ",(0,a.kt)("inlineCode",{parentName:"p"},"templateFile"),"."),(0,a.kt)("h2",{id:"templatefile"},"templateFile"),(0,a.kt)("p",null,"Template file, the template file path used for rendering, its value is the relative path of ",(0,a.kt)("inlineCode",{parentName:"p"},"templates"),"."),(0,a.kt)("h2",{id:"force"},"force"),(0,a.kt)("p",null,"Whether to force coverage, when the added file already exists, an error will be reported in conflict by default. When setting this value to true, coverage can be forced."),(0,a.kt)("h2",{id:"data"},"data"),(0,a.kt)("p",null,"Handlebars renders data."))}c.isMDXComponent=!0}}]);