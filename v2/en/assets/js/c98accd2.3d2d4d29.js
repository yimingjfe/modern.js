"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2431],{44993:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>u});var r=i(52983);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var p=r.createContext({}),c=function(e){var t=r.useContext(p),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(i),u=n,g=m["".concat(p,".").concat(u)]||m[u]||s[u]||o;return i?r.createElement(g,a(a({ref:t},d),{},{components:i})):r.createElement(g,a({ref:t},d))}));function u(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=i.length,a=new Array(o);a[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,a[1]=l;for(var c=2;c<o;c++)a[c]=i[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,i)}m.displayName="MDXCreateElement"},40359:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=i(18249),n=(i(52983),i(44993));const o={sidebar_position:4},a="@modern-js/codesmith-api-git",l={unversionedId:"guides/topic-detail/generator/codesmith/api/git",id:"guides/topic-detail/generator/codesmith/api/git",title:"@modern-js/codesmith-api-git",description:"The API encapsulation of git-related operations in the micro-generator provides methods for judging git repository, initialization and commit code.",source:"@site/../../packages/toolkit/main-doc/en/docusaurus-plugin-content-docs/current/guides/topic-detail/generator/codesmith/api/git.md",sourceDirName:"guides/topic-detail/generator/codesmith/api",slug:"/guides/topic-detail/generator/codesmith/api/git",permalink:"/v2/en/docs/guides/topic-detail/generator/codesmith/api/git",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"guidesSidebar",previous:{title:"@modern-js/codesmith-api-fs",permalink:"/v2/en/docs/guides/topic-detail/generator/codesmith/api/fs"},next:{title:"@modern-js/codesmith-api-handlebars",permalink:"/v2/en/docs/guides/topic-detail/generator/codesmith/api/handlebars"}},p={},c=[{value:"Use",id:"use",level:2},{value:"API",id:"api",level:2},{value:"isInGitRepo",id:"isingitrepo",level:3},{value:"initGitRepo",id:"initgitrepo",level:3},{value:"addAndCommit",id:"addandcommit",level:3}],d={toc:c};function s(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"modern-jscodesmith-api-git"},"@modern-js/codesmith-api-git"),(0,n.kt)("p",null,"The API encapsulation of git-related operations in the micro-generator provides methods for judging git repository, initialization and commit code."),(0,n.kt)("h2",{id:"use"},"Use"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { GitAPI } from '@modern-js/codesmith-api-git';\n\nexport default async (context: GeneratorContext, generator: GeneratorCore) => {\n  const gitApi = new GitAPI(generatorCore, generatorContext);\n  await gitApi.initGitRepo();\n};\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Create GitAPI instance, the parameter is the generator of the microgenerator function parameter, please see the composition of the microgenerator project for details.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Just call the API on its example."))),(0,n.kt)("h2",{id:"api"},"API"),(0,n.kt)("h3",{id:"isingitrepo"},"isInGitRepo"),(0,n.kt)("p",null,"Whether the current directory is a git repository."),(0,n.kt)("p",null,"Parameter:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"cwd?: ",(0,n.kt)("inlineCode",{parentName:"li"},"string"),". The execution directory of the git command, the default is microgenerator ",(0,n.kt)("inlineCode",{parentName:"li"},"outputPath"),".")),(0,n.kt)("h3",{id:"initgitrepo"},"initGitRepo"),(0,n.kt)("p",null,"The initialization is the git repository. The default branch name for init can be configured via ",(0,n.kt)("inlineCode",{parentName:"p"},"defaultBranch")," in the generator config."),(0,n.kt)("p",null,"Parameter:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"cwd?: ",(0,n.kt)("inlineCode",{parentName:"li"},"string"),". The execution directory of the git command, the default is microgenerator ",(0,n.kt)("inlineCode",{parentName:"li"},"outputPath"),"."),(0,n.kt)("li",{parentName:"ul"},"force?: ",(0,n.kt)("inlineCode",{parentName:"li"},"boolean"),". Use this parameter to force git init when the current directory is already a git repository.")),(0,n.kt)("h3",{id:"addandcommit"},"addAndCommit"),(0,n.kt)("p",null,"Execute ",(0,n.kt)("inlineCode",{parentName:"p"},"git add .")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"git commit")," commit the current changes."),(0,n.kt)("p",null,"Parameter:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"commitMessage: ",(0,n.kt)("inlineCode",{parentName:"li"},"string"),". Commit information."),(0,n.kt)("li",{parentName:"ul"},"cwd?: ",(0,n.kt)("inlineCode",{parentName:"li"},"string"),". The execution directory of the git command, the default is microgenerator ",(0,n.kt)("inlineCode",{parentName:"li"},"outputPath"),".")))}s.isMDXComponent=!0}}]);