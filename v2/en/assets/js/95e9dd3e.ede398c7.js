"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7996],{44993:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var a=t(52983);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(t),u=o,f=c["".concat(s,".").concat(u)]||c[u]||m[u]||r;return t?a.createElement(f,i(i({ref:n},d),{},{components:t})):a.createElement(f,i({ref:n},d))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},48501:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(18249),o=(t(52983),t(44993));const r={title:"source.designSystem",sidebar_label:"designSystem"},i=void 0,l={unversionedId:"configure/app/source/design-system",id:"configure/app/source/design-system",title:"source.designSystem",description:"* Type: Object",source:"@site/../../packages/toolkit/main-doc/en/docusaurus-plugin-content-docs/current/configure/app/source/design-system.md",sourceDirName:"configure/app/source",slug:"/configure/app/source/design-system",permalink:"/v2/en/docs/configure/app/source/design-system",draft:!1,tags:[],version:"current",frontMatter:{title:"source.designSystem",sidebar_label:"designSystem"},sidebar:"configsAppSidebar",previous:{title:"define",permalink:"/v2/en/docs/configure/app/source/define"},next:{title:"disableDefaultEntries",permalink:"/v2/en/docs/configure/app/source/disable-default-entries"}},s={},p=[{value:"Structure",id:"structure",level:3},{value:"Screens",id:"screens",level:4},{value:"Max-width breakpoint",id:"max-width-breakpoint",level:5},{value:"Multiple ranges of breakpoints",id:"multiple-ranges-of-breakpoints",level:5},{value:"Custom media queries",id:"custom-media-queries",level:5},{value:"Print Style",id:"print-style",level:5},{value:"Dark Mode",id:"dark-mode",level:5},{value:"Colors",id:"colors",level:4},{value:"Spacing",id:"spacing",level:4},{value:"Core plugins",id:"core-plugins",level:4},{value:"Custom default configuration",id:"custom-default-configuration",level:3},{value:"Override default configuration",id:"override-default-configuration",level:4},{value:"Extension default configuration",id:"extension-default-configuration",level:4},{value:"Reference other values",id:"reference-other-values",level:4},{value:"Disable the entire core plugin",id:"disable-the-entire-core-plugin",level:4},{value:"Add your own key",id:"add-your-own-key",level:4},{value:"Configure reference",id:"configure-reference",level:3},{value:"Additional configuration",id:"additional-configuration",level:3},{value:"source.designSystem.supportStyledComponents",id:"sourcedesignsystemsupportstyledcomponents",level:4}],d={toc:p};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Type: ",(0,o.kt)("inlineCode",{parentName:"li"},"Object")),(0,o.kt)("li",{parentName:"ul"},"Default: See configuration details below\u3002")),(0,o.kt)("admonition",{title:"Caution",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"You need to enable the Tailwind CSS feature through ",(0,o.kt)("inlineCode",{parentName:"p"},"pnpm run new")," first.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"DesignSystem Configuration Details"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"  const designSystem =  {\n    screens: {\n      sm: '640px',\n      md: '768px',\n      lg: '1024px',\n      xl: '1280px',\n    },\n    colors: {\n      transparent: 'transparent',\n      current: 'currentColor',\n\n      black: '#000',\n      white: '#fff',\n\n      gray: {\n        100: '#f7fafc',\n        200: '#edf2f7',\n        300: '#e2e8f0',\n        400: '#cbd5e0',\n        500: '#a0aec0',\n        600: '#718096',\n        700: '#4a5568',\n        800: '#2d3748',\n        900: '#1a202c',\n      },\n      red: {\n        100: '#fff5f5',\n        200: '#fed7d7',\n        300: '#feb2b2',\n        400: '#fc8181',\n        500: '#f56565',\n        600: '#e53e3e',\n        700: '#c53030',\n        800: '#9b2c2c',\n        900: '#742a2a',\n      },\n      orange: {\n        100: '#fffaf0',\n        200: '#feebc8',\n        300: '#fbd38d',\n        400: '#f6ad55',\n        500: '#ed8936',\n        600: '#dd6b20',\n        700: '#c05621',\n        800: '#9c4221',\n        900: '#7b341e',\n      },\n      yellow: {\n        100: '#fffff0',\n        200: '#fefcbf',\n        300: '#faf089',\n        400: '#f6e05e',\n        500: '#ecc94b',\n        600: '#d69e2e',\n        700: '#b7791f',\n        800: '#975a16',\n        900: '#744210',\n      },\n      green: {\n        100: '#f0fff4',\n        200: '#c6f6d5',\n        300: '#9ae6b4',\n        400: '#68d391',\n        500: '#48bb78',\n        600: '#38a169',\n        700: '#2f855a',\n        800: '#276749',\n        900: '#22543d',\n      },\n      teal: {\n        100: '#e6fffa',\n        200: '#b2f5ea',\n        300: '#81e6d9',\n        400: '#4fd1c5',\n        500: '#38b2ac',\n        600: '#319795',\n        700: '#2c7a7b',\n        800: '#285e61',\n        900: '#234e52',\n      },\n      blue: {\n        100: '#ebf8ff',\n        200: '#bee3f8',\n        300: '#90cdf4',\n        400: '#63b3ed',\n        500: '#4299e1',\n        600: '#3182ce',\n        700: '#2b6cb0',\n        800: '#2c5282',\n        900: '#2a4365',\n      },\n      indigo: {\n        100: '#ebf4ff',\n        200: '#c3dafe',\n        300: '#a3bffa',\n        400: '#7f9cf5',\n        500: '#667eea',\n        600: '#5a67d8',\n        700: '#4c51bf',\n        800: '#434190',\n        900: '#3c366b',\n      },\n      purple: {\n        100: '#faf5ff',\n        200: '#e9d8fd',\n        300: '#d6bcfa',\n        400: '#b794f4',\n        500: '#9f7aea',\n        600: '#805ad5',\n        700: '#6b46c1',\n        800: '#553c9a',\n        900: '#44337a',\n      },\n      pink: {\n        100: '#fff5f7',\n        200: '#fed7e2',\n        300: '#fbb6ce',\n        400: '#f687b3',\n        500: '#ed64a6',\n        600: '#d53f8c',\n        700: '#b83280',\n        800: '#97266d',\n        900: '#702459',\n      },\n    },\n    spacing: {\n      px: '1px',\n      '0': '0',\n      '1': '0.25rem',\n      '2': '0.5rem',\n      '3': '0.75rem',\n      '4': '1rem',\n      '5': '1.25rem',\n      '6': '1.5rem',\n      '8': '2rem',\n      '10': '2.5rem',\n      '12': '3rem',\n      '16': '4rem',\n      '20': '5rem',\n      '24': '6rem',\n      '32': '8rem',\n      '40': '10rem',\n      '48': '12rem',\n      '56': '14rem',\n      '64': '16rem',\n    },\n    backgroundColor: theme => theme('colors'),\n    backgroundOpacity: theme => theme('opacity'),\n    backgroundPosition: {\n      bottom: 'bottom',\n      center: 'center',\n      left: 'left',\n      'left-bottom': 'left bottom',\n      'left-top': 'left top',\n      right: 'right',\n      'right-bottom': 'right bottom',\n      'right-top': 'right top',\n      top: 'top',\n    },\n    backgroundSize: {\n      auto: 'auto',\n      cover: 'cover',\n      contain: 'contain',\n    },\n    borderColor: theme => ({\n      ...theme('colors'),\n      default: theme('colors.gray.300', 'currentColor'),\n    }),\n    borderOpacity: theme => theme('opacity'),\n    borderRadius: {\n      none: '0',\n      sm: '0.125rem',\n      default: '0.25rem',\n      md: '0.375rem',\n      lg: '0.5rem',\n      full: '9999px',\n    },\n    borderWidth: {\n      default: '1px',\n      '0': '0',\n      '2': '2px',\n      '4': '4px',\n      '8': '8px',\n    },\n    boxShadow: {\n      xs: '0 0 0 1px rgba(0, 0, 0, 0.05)',\n      sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n      default: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',\n      md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n      lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n      xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',\n      '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',\n      inner: 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',\n      outline: '0 0 0 3px rgba(66, 153, 225, 0.5)',\n      none: 'none',\n    },\n    container: {},\n    cursor: {\n      auto: 'auto',\n      default: 'default',\n      pointer: 'pointer',\n      wait: 'wait',\n      text: 'text',\n      move: 'move',\n      'not-allowed': 'not-allowed',\n    },\n    divideColor: theme => theme('borderColor'),\n    divideOpacity: theme => theme('borderOpacity'),\n    divideWidth: theme => theme('borderWidth'),\n    fill: {\n      current: 'currentColor',\n    },\n    flex: {\n      '1': '1 1 0%',\n      auto: '1 1 auto',\n      initial: '0 1 auto',\n      none: 'none',\n    },\n    flexGrow: {\n      '0': '0',\n      default: '1',\n    },\n    flexShrink: {\n      '0': '0',\n      default: '1',\n    },\n    fontFamily: {\n      sans: [\n        'system-ui',\n        '-apple-system',\n        'BlinkMacSystemFont',\n        '\"Segoe UI\"',\n        'Roboto',\n        '\"Helvetica Neue\"',\n        'Arial',\n        '\"Noto Sans\"',\n        'sans-serif',\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"',\n        '\"Noto Color Emoji\"',\n      ],\n      serif: ['Georgia', 'Cambria', '\"Times New Roman\"', 'Times', 'serif'],\n      mono: ['Menlo', 'Monaco', 'Consolas', '\"Liberation Mono\"', '\"Courier New\"', 'monospace'],\n    },\n    fontSize: {\n      xs: '0.75rem',\n      sm: '0.875rem',\n      base: '1rem',\n      lg: '1.125rem',\n      xl: '1.25rem',\n      '2xl': '1.5rem',\n      '3xl': '1.875rem',\n      '4xl': '2.25rem',\n      '5xl': '3rem',\n      '6xl': '4rem',\n    },\n    fontWeight: {\n      hairline: '100',\n      thin: '200',\n      light: '300',\n      normal: '400',\n      medium: '500',\n      semibold: '600',\n      bold: '700',\n      extrabold: '800',\n      black: '900',\n    },\n    height: theme => ({\n      auto: 'auto',\n      ...theme('spacing'),\n      full: '100%',\n      screen: '100vh',\n    }),\n    inset: {\n      '0': '0',\n      auto: 'auto',\n    },\n    letterSpacing: {\n      tighter: '-0.05em',\n      tight: '-0.025em',\n      normal: '0',\n      wide: '0.025em',\n      wider: '0.05em',\n      widest: '0.1em',\n    },\n    lineHeight: {\n      none: '1',\n      tight: '1.25',\n      snug: '1.375',\n      normal: '1.5',\n      relaxed: '1.625',\n      loose: '2',\n      '3': '.75rem',\n      '4': '1rem',\n      '5': '1.25rem',\n      '6': '1.5rem',\n      '7': '1.75rem',\n      '8': '2rem',\n      '9': '2.25rem',\n      '10': '2.5rem',\n    },\n    listStyleType: {\n      none: 'none',\n      disc: 'disc',\n      decimal: 'decimal',\n    },\n    margin: (theme, { negative }) => ({\n      auto: 'auto',\n      ...theme('spacing'),\n      ...negative(theme('spacing')),\n    }),\n    maxHeight: {\n      full: '100%',\n      screen: '100vh',\n    },\n    maxWidth: (theme, { breakpoints }) => ({\n      none: 'none',\n      xs: '20rem',\n      sm: '24rem',\n      md: '28rem',\n      lg: '32rem',\n      xl: '36rem',\n      '2xl': '42rem',\n      '3xl': '48rem',\n      '4xl': '56rem',\n      '5xl': '64rem',\n      '6xl': '72rem',\n      full: '100%',\n      ...breakpoints(theme('screens')),\n    }),\n    minHeight: {\n      '0': '0',\n      full: '100%',\n      screen: '100vh',\n    },\n    minWidth: {\n      '0': '0',\n      full: '100%',\n    },\n    objectPosition: {\n      bottom: 'bottom',\n      center: 'center',\n      left: 'left',\n      'left-bottom': 'left bottom',\n      'left-top': 'left top',\n      right: 'right',\n      'right-bottom': 'right bottom',\n      'right-top': 'right top',\n      top: 'top',\n    },\n    opacity: {\n      '0': '0',\n      '25': '0.25',\n      '50': '0.5',\n      '75': '0.75',\n      '100': '1',\n    },\n    order: {\n      first: '-9999',\n      last: '9999',\n      none: '0',\n      '1': '1',\n      '2': '2',\n      '3': '3',\n      '4': '4',\n      '5': '5',\n      '6': '6',\n      '7': '7',\n      '8': '8',\n      '9': '9',\n      '10': '10',\n      '11': '11',\n      '12': '12',\n    },\n    padding: theme => theme('spacing'),\n    placeholderColor: theme => theme('colors'),\n    placeholderOpacity: theme => theme('opacity'),\n    space: (theme, { negative }) => ({\n      ...theme('spacing'),\n      ...negative(theme('spacing')),\n    }),\n    stroke: {\n      current: 'currentColor',\n    },\n    strokeWidth: {\n      '0': '0',\n      '1': '1',\n      '2': '2',\n    },\n    textColor: theme => theme('colors'),\n    textOpacity: theme => theme('opacity'),\n    width: theme => ({\n      auto: 'auto',\n      ...theme('spacing'),\n      '1/2': '50%',\n      '1/3': '33.333333%',\n      '2/3': '66.666667%',\n      '1/4': '25%',\n      '2/4': '50%',\n      '3/4': '75%',\n      '1/5': '20%',\n      '2/5': '40%',\n      '3/5': '60%',\n      '4/5': '80%',\n      '1/6': '16.666667%',\n      '2/6': '33.333333%',\n      '3/6': '50%',\n      '4/6': '66.666667%',\n      '5/6': '83.333333%',\n      '1/12': '8.333333%',\n      '2/12': '16.666667%',\n      '3/12': '25%',\n      '4/12': '33.333333%',\n      '5/12': '41.666667%',\n      '6/12': '50%',\n      '7/12': '58.333333%',\n      '8/12': '66.666667%',\n      '9/12': '75%',\n      '10/12': '83.333333%',\n      '11/12': '91.666667%',\n      full: '100%',\n      screen: '100vw',\n    }),\n    zIndex: {\n      auto: 'auto',\n      '0': '0',\n      '10': '10',\n      '20': '20',\n      '30': '30',\n      '40': '40',\n      '50': '50',\n    },\n    gap: theme => theme('spacing'),\n    gridTemplateColumns: {\n      none: 'none',\n      '1': 'repeat(1, minmax(0, 1fr))',\n      '2': 'repeat(2, minmax(0, 1fr))',\n      '3': 'repeat(3, minmax(0, 1fr))',\n      '4': 'repeat(4, minmax(0, 1fr))',\n      '5': 'repeat(5, minmax(0, 1fr))',\n      '6': 'repeat(6, minmax(0, 1fr))',\n      '7': 'repeat(7, minmax(0, 1fr))',\n      '8': 'repeat(8, minmax(0, 1fr))',\n      '9': 'repeat(9, minmax(0, 1fr))',\n      '10': 'repeat(10, minmax(0, 1fr))',\n      '11': 'repeat(11, minmax(0, 1fr))',\n      '12': 'repeat(12, minmax(0, 1fr))',\n    },\n    gridColumn: {\n      auto: 'auto',\n      'span-1': 'span 1 / span 1',\n      'span-2': 'span 2 / span 2',\n      'span-3': 'span 3 / span 3',\n      'span-4': 'span 4 / span 4',\n      'span-5': 'span 5 / span 5',\n      'span-6': 'span 6 / span 6',\n      'span-7': 'span 7 / span 7',\n      'span-8': 'span 8 / span 8',\n      'span-9': 'span 9 / span 9',\n      'span-10': 'span 10 / span 10',\n      'span-11': 'span 11 / span 11',\n      'span-12': 'span 12 / span 12',\n    },\n    gridColumnStart: {\n      auto: 'auto',\n      '1': '1',\n      '2': '2',\n      '3': '3',\n      '4': '4',\n      '5': '5',\n      '6': '6',\n      '7': '7',\n      '8': '8',\n      '9': '9',\n      '10': '10',\n      '11': '11',\n      '12': '12',\n      '13': '13',\n    },\n    gridColumnEnd: {\n      auto: 'auto',\n      '1': '1',\n      '2': '2',\n      '3': '3',\n      '4': '4',\n      '5': '5',\n      '6': '6',\n      '7': '7',\n      '8': '8',\n      '9': '9',\n      '10': '10',\n      '11': '11',\n      '12': '12',\n      '13': '13',\n    },\n    gridTemplateRows: {\n      none: 'none',\n      '1': 'repeat(1, minmax(0, 1fr))',\n      '2': 'repeat(2, minmax(0, 1fr))',\n      '3': 'repeat(3, minmax(0, 1fr))',\n      '4': 'repeat(4, minmax(0, 1fr))',\n      '5': 'repeat(5, minmax(0, 1fr))',\n      '6': 'repeat(6, minmax(0, 1fr))',\n    },\n    gridRow: {\n      auto: 'auto',\n      'span-1': 'span 1 / span 1',\n      'span-2': 'span 2 / span 2',\n      'span-3': 'span 3 / span 3',\n      'span-4': 'span 4 / span 4',\n      'span-5': 'span 5 / span 5',\n      'span-6': 'span 6 / span 6',\n    },\n    gridRowStart: {\n      auto: 'auto',\n      '1': '1',\n      '2': '2',\n      '3': '3',\n      '4': '4',\n      '5': '5',\n      '6': '6',\n      '7': '7',\n    },\n    gridRowEnd: {\n      auto: 'auto',\n      '1': '1',\n      '2': '2',\n      '3': '3',\n      '4': '4',\n      '5': '5',\n      '6': '6',\n      '7': '7',\n    },\n    transformOrigin: {\n      center: 'center',\n      top: 'top',\n      'top-right': 'top right',\n      right: 'right',\n      'bottom-right': 'bottom right',\n      bottom: 'bottom',\n      'bottom-left': 'bottom left',\n      left: 'left',\n      'top-left': 'top left',\n    },\n    scale: {\n      '0': '0',\n      '50': '.5',\n      '75': '.75',\n      '90': '.9',\n      '95': '.95',\n      '100': '1',\n      '105': '1.05',\n      '110': '1.1',\n      '125': '1.25',\n      '150': '1.5',\n    },\n    rotate: {\n      '-180': '-180deg',\n      '-90': '-90deg',\n      '-45': '-45deg',\n      '0': '0',\n      '45': '45deg',\n      '90': '90deg',\n      '180': '180deg',\n    },\n    translate: (theme, { negative }) => ({\n      ...theme('spacing'),\n      ...negative(theme('spacing')),\n      '-full': '-100%',\n      '-1/2': '-50%',\n      '1/2': '50%',\n      full: '100%',\n    }),\n    skew: {\n      '-12': '-12deg',\n      '-6': '-6deg',\n      '-3': '-3deg',\n      '0': '0',\n      '3': '3deg',\n      '6': '6deg',\n      '12': '12deg',\n    },\n    transitionProperty: {\n      none: 'none',\n      all: 'all',\n      default: 'background-color, border-color, color, fill, stroke, opacity, box-shadow, transform',\n      colors: 'background-color, border-color, color, fill, stroke',\n      opacity: 'opacity',\n      shadow: 'box-shadow',\n      transform: 'transform',\n    },\n    transitionTimingFunction: {\n      linear: 'linear',\n      in: 'cubic-bezier(0.4, 0, 1, 1)',\n      out: 'cubic-bezier(0, 0, 0.2, 1)',\n      'in-out': 'cubic-bezier(0.4, 0, 0.2, 1)',\n    },\n    transitionDuration: {\n      '75': '75ms',\n      '100': '100ms',\n      '150': '150ms',\n      '200': '200ms',\n      '300': '300ms',\n      '500': '500ms',\n      '700': '700ms',\n      '1000': '1000ms',\n    },\n    transitionDelay: {\n      '75': '75ms',\n      '100': '100ms',\n      '150': '150ms',\n      '200': '200ms',\n      '300': '300ms',\n      '500': '500ms',\n      '700': '700ms',\n      '1000': '1000ms',\n    },\n  };\n")),(0,o.kt)("admonition",{title:"\u63d0\u793a",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"More about\uff1a",(0,o.kt)("a",{href:"https://tailwindcss.com/docs/configuration#theme",target:"_blank"},"TailwindCSS configuration"),"\u3002"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"designSystem")," is used to define the project's color palette, typographic scale (Typographic Scales or Type Scale), font list, breakpoints, border rounded values, and more. Because Modern.js borrowed the design method of Tailwind Theme, and also integrates Tailwind CSS internally, the ",(0,o.kt)("inlineCode",{parentName:"p"},"designSystem")," is used in the same way as Tailwind CSS Theme."),(0,o.kt)("h3",{id:"structure"},"Structure"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"designSystem")," object contains properties for ",(0,o.kt)("inlineCode",{parentName:"p"},"screens"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"colors"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"spacing"),", as well as each customizable core plugin."),(0,o.kt)("h4",{id:"screens"},"Screens"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"screens")," to customize response breakpoints in your project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const designSystem = {\n  screens: {\n    sm: '640px',\n    md: '768px',\n    lg: '1024px',\n    xl: '1280px',\n  },\n};\n")),(0,o.kt)("p",null,"Where the property name in the ",(0,o.kt)("inlineCode",{parentName:"p"},"screens")," object is the screen name (used as a prefix for adaptive utility variants generated by ",(0,o.kt)("inlineCode",{parentName:"p"},"Tailwind CSS"),", such as ",(0,o.kt)("inlineCode",{parentName:"p"},"md:text-center"),"), and the value is the ",(0,o.kt)("inlineCode",{parentName:"p"},"min-width")," at which the breakpoint should begin."),(0,o.kt)("p",null,"Default breakpoints are inspired by common device resolutions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const designSystem = {\n  screens: {\n    sm: '640px',\n    // => @media (min-width: 640px) { ... }\n\n    md: '768px',\n    // => @media (min-width: 768px) { ... }\n\n    lg: '1024px',\n    // => @media (min-width: 1024px) { ... }\n\n    xl: '1280px',\n    // => @media (min-width: 1280px) { ... }\n  },\n};\n")),(0,o.kt)("p",null,"You can use any name you like as a breakpoint property in your project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const designSystem = {\n  screens: {\n    tablet: '640px',\n    // => @media (min-width: 640px) { ... }\n\n    laptop: '1024px',\n    // => @media (min-width: 1024px) { ... }\n\n    desktop: '1280px',\n    // => @media (min-width: 1280px) { ... }\n  },\n};\n")),(0,o.kt)("p",null,"These screen names are reflected in ",(0,o.kt)("inlineCode",{parentName:"p"},"utilities"),", so ",(0,o.kt)("inlineCode",{parentName:"p"},"text-center")," now looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},".text-center { text-align: center }\n\n@media (min-width: 640px) {\n    .tablet\\:text-center { text-align: center }\n}\n\n@media (min-width: 1024px) {\n    .laptop\\:text-center { text-align: center }\n}\n\n@media (min-width: 1280px) {\n    .desktop\\:text-center { text-align: center }\n}\n")),(0,o.kt)("h5",{id:"max-width-breakpoint"},"Max-width breakpoint"),(0,o.kt)("p",null,"If you want to use a ",(0,o.kt)("inlineCode",{parentName:"p"},"max-width")," breakpoint instead of a ",(0,o.kt)("inlineCode",{parentName:"p"},"min-width"),", you can specify the screen as an object with a ",(0,o.kt)("inlineCode",{parentName:"p"},"max")," property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const designSystem = {\n  screens: {\n    xl: { max: '1279px' },\n    // => @media (max-width: 1279px) { ... }\n\n    lg: { max: '1023px' },\n    // => @media (max-width: 1023px) { ... }\n\n    md: { max: '767px' },\n    // => @media (max-width: 767px) { ... }\n\n    sm: { max: '639px' },\n    // => @media (max-width: 639px) { ... }\n  },\n};\n")),(0,o.kt)("p",null,"If necessary, to create breakpoints with ",(0,o.kt)("inlineCode",{parentName:"p"},"min-width")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"max-width")," definitions, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const designSystem = {\n  screens: {\n    sm: { min: '640px', max: '767px' },\n    md: { min: '768px', max: '1023px' },\n    lg: { min: '1024px', max: '1279px' },\n    xl: { min: '1280px' },\n  },\n};\n")),(0,o.kt)("h5",{id:"multiple-ranges-of-breakpoints"},"Multiple ranges of breakpoints"),(0,o.kt)("p",null,"Sometimes it is useful to apply a single breakpoint definition to multiple scopes."),(0,o.kt)("p",null,"For example, let's say you have a ",(0,o.kt)("inlineCode",{parentName:"p"},"sidebar")," and want the breakpoint to be based on the width of the content area rather than the entire viewport. You can simulate this situation, using a smaller breakpoint style when the ",(0,o.kt)("inlineCode",{parentName:"p"},"sidebar")," is visible and shrinks the content area:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const designSystem = {\n  screens: {\n    sm: '500px',\n    md: [\n      // Sidebar appears at 768px, so revert to `sm:` styles between 768px\n      // and 868px, after which the main content area is wide enough again to\n      // apply the `md:` styles.\n      { min: '668px', max: '767px' },\n      { min: '868px' },\n    ],\n    lg: '1100px',\n    xl: '1400px',\n  },\n};\n")),(0,o.kt)("h5",{id:"custom-media-queries"},"Custom media queries"),(0,o.kt)("p",null,"If you need to provide a fully customized media query for the breakpoint, you can use an object with a ",(0,o.kt)("inlineCode",{parentName:"p"},"raw")," attribute:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const designSystem = {\n  extend: {\n    screens: {\n      portrait: { raw: '(orientation: portrait)' },\n      // => @media (orientation: portrait) { ... }\n    },\n  },\n};\n")),(0,o.kt)("h5",{id:"print-style"},"Print Style"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"raw")," option can be especially useful if you need to apply a different style to the print."),(0,o.kt)("p",null,"All you need to do is add a ",(0,o.kt)("inlineCode",{parentName:"p"},"print")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"designSystem.extend.screens"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const designSystem = {\n  extend: {\n    screens: {\n      print: { raw: 'print' },\n      // => @media print { ... }\n    },\n  },\n};\n")),(0,o.kt)("p",null,"You can then use a class like ",(0,o.kt)("inlineCode",{parentName:"p"},"print:text-black")," to specify styles that are only applied when someone tries to print a page:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<div class="text-gray-700 print:text-black">\n  \x3c!-- ... --\x3e\n</div>\n')),(0,o.kt)("h5",{id:"dark-mode"},"Dark Mode"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"raw"),' option can be used to implement the "dark mode" screen:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const designSystem = {\n  extend: {\n    screens: {\n      dark: { raw: '(prefers-color-scheme: dark)' },\n      // => @media (prefers-color-scheme: dark) { ... }\n    },\n  },\n};\n")),(0,o.kt)("p",null,"You can then style the element differently in dark mode using the ",(0,o.kt)("inlineCode",{parentName:"p"},"dark:")," prefix:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<div class="text-gray-700 dark:text-gray-200">\n  \x3c!-- ... --\x3e\n</div>\n')),(0,o.kt)("p",null,"Note that since these ",(0,o.kt)("inlineCode",{parentName:"p"},"screen variants")," are implemented in ",(0,o.kt)("inlineCode",{parentName:"p"},"Tailwind CSS"),", ",(0,o.kt)("strong",{parentName:"p"}," you cannot use this method to combine breakpoints with dark modes "),", for example ",(0,o.kt)("inlineCode",{parentName:"p"},"md:dark:text-gray-300")," will not work."),(0,o.kt)("h4",{id:"colors"},"Colors"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"colors")," property allows you to customize the global palette of your project."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const designSystem = {\n  colors: {\n    transparent: 'transparent',\n    black: '#000',\n    white: '#fff',\n    gray: {\n      100: '#f7fafc',\n      // ...\n      900: '#1a202c',\n    },\n\n    // ...\n  },\n};\n")),(0,o.kt)("p",null,"By default, these colors are inherited by the ",(0,o.kt)("inlineCode",{parentName:"p"},"backgroundColor"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"textColor"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"borderColor")," core plugins."),(0,o.kt)("p",null,"o learn more, see: ",(0,o.kt)("a",{parentName:"p",href:"https://tailwindcss.com/docs/customizing-colors"},"Customizing Colors"),"\u3002"),(0,o.kt)("h4",{id:"spacing"},"Spacing"),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"space")," property, you can customize the global spacing and scaling of items:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const designSystem = {\n  spacing: {\n    px: '1px',\n    0: '0',\n    1: '0.25rem',\n    2: '0.5rem',\n    3: '0.75rem',\n    4: '1rem',\n    5: '1.25rem',\n    6: '1.5rem',\n    8: '2rem',\n    10: '2.5rem',\n    12: '3rem',\n    16: '4rem',\n    20: '5rem',\n    24: '6rem',\n    32: '8rem',\n    40: '10rem',\n    48: '12rem',\n    56: '14rem',\n    64: '16rem',\n  },\n};\n")),(0,o.kt)("p",null,"By default, these values are inherited by the ",(0,o.kt)("inlineCode",{parentName:"p"},"padding"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"margin"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"negativeMargin"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"width"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"height")," core plugins."),(0,o.kt)("p",null,"To learn more, see: ",(0,o.kt)("a",{parentName:"p",href:"https://tailwindcss.com/docs/customizing-spacing"},"Customizing Spacing"),"\u3002"),(0,o.kt)("h4",{id:"core-plugins"},"Core plugins"),(0,o.kt)("p",null,"The rest of the topic section is used to configure the values available for each core plugin."),(0,o.kt)("p",null,"For example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"borderRadius")," property allows you to customize the ",(0,o.kt)("inlineCode",{parentName:"p"},"utilities")," of the rounded corners that will be generated:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const designSystem = {\n  borderRadius: {\n    none: '0',\n    sm: '.125rem',\n    default: '.25rem',\n    lg: '.5rem',\n    full: '9999px',\n  },\n};\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"}," The property name determines the suffix of the generated class, and the value determines the value of the actual CSS declaration. ")," The example ",(0,o.kt)("inlineCode",{parentName:"p"},"borderRadius")," configuration above will generate the following CSS class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},".rounded-none { border-radius: 0 }\n.rounded-sm   { border-radius: .125rem }\n.rounded      { border-radius: .25rem }\n.rounded-lg   { border-radius: .5rem }\n.rounded-full { border-radius: 9999px }\n")),(0,o.kt)("p",null,"You will notice that the ",(0,o.kt)("inlineCode",{parentName:"p"},"rounded"),"  class is created without the suffix using the ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," property in the theme configuration. This is a common convention in Tailwind CSS supported by many, though not all, core plugins."),(0,o.kt)("p",null,"To learn more about customizing a specific core plugin, visit the plugin's documentation."),(0,o.kt)("h3",{id:"custom-default-configuration"},"Custom default configuration"),(0,o.kt)("p",null,"Out of the box, your project will automatically inherit values from the default theme configuration. If you want to customize the default theme, you have several different options depending on the target."),(0,o.kt)("h4",{id:"override-default-configuration"},"Override default configuration"),(0,o.kt)("p",null,"To override the options in the default configuration, add the properties to override in ",(0,o.kt)("inlineCode",{parentName:"p"},"designSystem"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="modern.config.ts"',title:'"modern.config.ts"'},"const designSystem = {\n  // Replaces all of the default `opacity` values\n  opacity: {\n    0: '0',\n    20: '0.2',\n    40: '0.4',\n    60: '0.6',\n    80: '0.8',\n    100: '1',\n  },\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n")),(0,o.kt)("p",null,"This completely replaces the default property configuration, so in the example above, the default ",(0,o.kt)("inlineCode",{parentName:"p"},"opacity utilities")," is not generated."),(0,o.kt)("p",null,"Any properties you don't provide will be inherited from the default theme, so in the example above, the default theme configuration for color, spacing, border rounded corners, background position, and more will be preserved."),(0,o.kt)("h4",{id:"extension-default-configuration"},"Extension default configuration"),(0,o.kt)("p",null,"If you want to keep the default value for the theme option, but want to add a new value, add the extended content in the ",(0,o.kt)("inlineCode",{parentName:"p"},"designSystem.extend")," property."),(0,o.kt)("p",null,"For example, if you want to add an additional breakpoint but keep the existing one, you can extend the ",(0,o.kt)("inlineCode",{parentName:"p"},"screens"),"  property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="modern.config.ts"',title:'"modern.config.ts"'},"const designSystem = {\n  extend: {\n    // Adds a new breakpoint in addition to the default breakpoints\n    screens: {\n      '2xl': '1440px',\n    },\n  },\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n")),(0,o.kt)("p",null,"You can of course override some parts of the default theme and extend other parts of the default theme in the same configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="modern.config.ts"',title:'"modern.config.ts"'},"const designSystem = {\n  opacity: {\n    0: '0',\n    20: '0.2',\n    40: '0.4',\n    60: '0.6',\n    80: '0.8',\n    100: '1',\n  },\n  extend: {\n    screens: {\n      '2xl': '1440px',\n    },\n  },\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n")),(0,o.kt)("h4",{id:"reference-other-values"},"Reference other values"),(0,o.kt)("p",null,"If you need to reference another value in the configuration, you can do so by providing a closure function instead of a static value. The function will receive a ",(0,o.kt)("inlineCode",{parentName:"p"},"theme()")," function as an argument, which you can use to look up other values in the configuration using dot notation."),(0,o.kt)("p",null,"For example, you can generate a ",(0,o.kt)("inlineCode",{parentName:"p"},"fill")," utility for each color in the palette by referencing ",(0,o.kt)("inlineCode",{parentName:"p"},"theme('colors')")," on a ",(0,o.kt)("inlineCode",{parentName:"p"},"fill")," configuration."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="modern.config.ts"',title:'"modern.config.ts"'},"const designSystem = {\n  colors: {\n    // ...\n  },\n  fill: theme => theme('colors'),\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"theme()")," function tries to find the value you're looking for from a fully merged configuration object, so it can reference your own custom settings as well as default theme values. It also works recursively, so as long as there's a static value at the end of the chain, it can parse the value you're looking for."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reference default configuration")),(0,o.kt)("p",null,"If you want to reference a value in the default configuration for any reason, you can import it from ",(0,o.kt)("inlineCode",{parentName:"p"},"tailwindcss/defaultTheme"),". A useful example is if you want to add one of the fonts provided by the default configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="modern.config.ts"',title:'"modern.config.ts"'},"const defaultTheme = require('tailwindcss/defaultTheme');\n\nconst designSystem = {\n  extend: {\n    fontFamily: {\n      sans: ['Lato', ...defaultTheme.fontFamily.sans],\n    },\n  },\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n")),(0,o.kt)("h4",{id:"disable-the-entire-core-plugin"},"Disable the entire core plugin"),(0,o.kt)("p",null,"If you don't want to generate any classes for a core plugin, it's better to set the plugin to ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"corePlugins")," configuration instead of providing an empty object for this property in the configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Don't assign an empty object in your theme configuration\n\nconst designSystem = {\n  opacity: {},\n};\n\n// Do disable the plugin in your corePlugins configuration\nconst designSyttem = {\n  corePlugins: {\n    opacity: false,\n  },\n};\n")),(0,o.kt)("p",null,"The end result is the same, but since many core plugins don't expose any configuration, they can only be disabled using ",(0,o.kt)("inlineCode",{parentName:"p"},"corePlugins")," anyway, and it's best to keep them consistent."),(0,o.kt)("h4",{id:"add-your-own-key"},"Add your own key"),(0,o.kt)("p",null,"In many cases, it can be useful to add your own properties to the configuration object."),(0,o.kt)("p",null,"An example of this is adding new properties for reuse between multiple core plugins. For example, you can extract a ",(0,o.kt)("inlineCode",{parentName:"p"},"positions")," object that both the ",(0,o.kt)("inlineCode",{parentName:"p"},"backgroundPosition")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"objectPosition")," plugins can reference:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const designSystem = {\n  positions: {\n    bottom: 'bottom',\n    center: 'center',\n    left: 'left',\n    'left-bottom': 'left bottom',\n    'left-top': 'left top',\n    right: 'right',\n    'right-bottom': 'right bottom',\n    'right-top': 'right top',\n    top: 'top',\n  },\n  backgroundPosition: theme => theme('positions'),\n  objectPosition: theme => theme('positions'),\n};\n")),(0,o.kt)("p",null,"Another example is adding new attributes to a custom plugin for reference. For example, if you wrote a gradual change plugin for a project, you can add a gradual change attribute to the subject object referenced by the plugin:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="modern.config.ts"',title:'"modern.config.ts"'},"const designSystem = {\n  gradients: theme => ({\n    'blue-green': [theme('colors.blue.500'), theme('colors.green.500')],\n    'purple-blue': [theme('colors.purple.500'), theme('colors.blue.500')],\n    // ...\n  }),\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n  tools: {\n    tailwind: {\n      plugins: [require('./plugins/gradients')],\n    },\n  },\n});\n")),(0,o.kt)("h3",{id:"configure-reference"},"Configure reference"),(0,o.kt)("p",null,"With the exception of ",(0,o.kt)("inlineCode",{parentName:"p"},"screens"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"colors"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"spacing"),", all properties in the configuration object map to the core plugin of ",(0,o.kt)("inlineCode",{parentName:"p"},"Tailwind CSS"),". Since many plugins are responsible for accepting only CSS properties for static value sets (eg ",(0,o.kt)("inlineCode",{parentName:"p"},"float"),"), note that not every plugin has corresponding properties in the theme object."),(0,o.kt)("p",null,"All of these properties can also be used in the ",(0,o.kt)("inlineCode",{parentName:"p"},"designSystem.extend")," property to extend the default theme."),(0,o.kt)("p",null,"See this ",(0,o.kt)("a",{parentName:"p",href:"https://tailwindcss.com/docs/theme#configuration-reference"},"link")," for what all properties do."),(0,o.kt)("h3",{id:"additional-configuration"},"Additional configuration"),(0,o.kt)("p",null,"In addition to the same configuration as the Tailwind CSS Theme, there are additional configurations available Modern.js."),(0,o.kt)("h4",{id:"sourcedesignsystemsupportstyledcomponents"},"source.designSystem.supportStyledComponents"),(0,o.kt)("p",null,"The configuration type is ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," and defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("p",null,"When the configuration value is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", the runtime provides the ",(0,o.kt)("inlineCode",{parentName:"p"},"styled-components")," ",(0,o.kt)("inlineCode",{parentName:"p"},"ThemeProvider")," component outside the application and will inject it through the ",(0,o.kt)("inlineCode",{parentName:"p"},"Theme Token")," object generated by ",(0,o.kt)("inlineCode",{parentName:"p"},"designSystem"),"."))}m.isMDXComponent=!0}}]);