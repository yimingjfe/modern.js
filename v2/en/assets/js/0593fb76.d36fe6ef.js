"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[311],{44993:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var i=n(52983);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),d=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return i.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=d(n),f=a,m=c["".concat(p,".").concat(f)]||c[f]||s[f]||r;return n?i.createElement(m,l(l({ref:t},u),{},{components:n})):i.createElement(m,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},72521:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=n(18249),a=(n(52983),n(44993));const r={sidebar_position:6},l="updateJSONFile",o={unversionedId:"guides/topic-detail/generator/plugin/api/file/updateJSONFile",id:"guides/topic-detail/generator/plugin/api/file/updateJSONFile",title:"updateJSONFile",description:"Update the JSON file fields.",source:"@site/../../packages/toolkit/main-doc/en/docusaurus-plugin-content-docs/current/guides/topic-detail/generator/plugin/api/file/updateJSONFile.md",sourceDirName:"guides/topic-detail/generator/plugin/api/file",slug:"/guides/topic-detail/generator/plugin/api/file/updateJSONFile",permalink:"/v2/en/docs/guides/topic-detail/generator/plugin/api/file/updateJSONFile",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"guidesSidebar",previous:{title:"addManyFile",permalink:"/v2/en/docs/guides/topic-detail/generator/plugin/api/file/addManyFile"},next:{title:"updateTextRawFile",permalink:"/v2/en/docs/guides/topic-detail/generator/plugin/api/file/updateTextRawFile"}},p={},d=[{value:"fileName",id:"filename",level:2},{value:"updateInfo",id:"updateinfo",level:2}],u={toc:d};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"updatejsonfile"},"updateJSONFile"),(0,a.kt)("p",null,"Update the JSON file fields."),(0,a.kt)("p",null,"This method is suitable for JSON file types, and can batch update field values in JSON files."),(0,a.kt)("p",null,"This method is available on the ",(0,a.kt)("inlineCode",{parentName:"p"},"onForged")," time to live API parameter."),(0,a.kt)("p",null,"Its type is defined as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export type ForgedAPI = {\n  updateJSONFile: (\n    fileName: string,\n    updateInfo: Record<string, unknown>,\n  ) => Promise<void>;\n  ...\n};\n")),(0,a.kt)("h2",{id:"filename"},"fileName"),(0,a.kt)("p",null,"The filename or file path of the JSON file."),(0,a.kt)("h2",{id:"updateinfo"},"updateInfo"),(0,a.kt)("p",null,"Field update information."),(0,a.kt)("p",null,"This information is represented in Record form."),(0,a.kt)("p",null,"For example, the name field needs to be updated:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"api.updateJSONFile(file, {\n  name: 'new name',\n});\n")),(0,a.kt)("p",null,"Nested fields need to be updated:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"api.updateJSONFile(file, {\n  'dependencies.name': 'new name',\n});\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Pay attention to the field name when updating the nested field. If it is not a total volume update, the nested key should also be written into the field name.")))}s.isMDXComponent=!0}}]);