"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3964],{44993:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(52983);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),u=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},s=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),s=u(n),f=r,y=s["".concat(p,".").concat(f)]||s[f]||d[f]||l;return n?o.createElement(y,i(i({ref:t},c),{},{components:n})):o.createElement(y,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=s;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var u=2;u<l;u++)i[u]=n[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}s.displayName="MDXCreateElement"},59738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var o=n(18249),r=(n(52983),n(44993));const l={sidebar_label:"disableNodePolyfill"},i="output.disableNodePolyfill",a={unversionedId:"configure/app/output/disable-node-polyfill",id:"configure/app/output/disable-node-polyfill",title:"output.disableNodePolyfill",description:"- Type: boolean",source:"@site/../../packages/toolkit/main-doc/en/docusaurus-plugin-content-docs/current/configure/app/output/disable-node-polyfill.md",sourceDirName:"configure/app/output",slug:"/configure/app/output/disable-node-polyfill",permalink:"/v2/en/docs/configure/app/output/disable-node-polyfill",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"disableNodePolyfill"},sidebar:"configsAppSidebar",previous:{title:"disableMinimize",permalink:"/v2/en/docs/configure/app/output/disable-minimize"},next:{title:"disableSourceMap",permalink:"/v2/en/docs/configure/app/output/disable-source-map"}},p={},u=[],c={toc:u};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"outputdisablenodepolyfill"},"output.disableNodePolyfill"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Type: ",(0,r.kt)("inlineCode",{parentName:"li"},"boolean")),(0,r.kt)("li",{parentName:"ul"},"Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"true"))),(0,r.kt)("p",null,"This config is used to control whether to inject the Polyfill of the Node module into the code."),(0,r.kt)("p",null,"By default, we will not inject Node Polyfill into the code to avoid bundle size increase. If you need to inject Node Polyfill, you can set ",(0,r.kt)("inlineCode",{parentName:"p"},"output.disableNodePolyfill")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="modern.config.ts"',title:'"modern.config.ts"'},"export default defineConfig({\n  output: {\n    disableNodePolyfill: false,\n  },\n});\n")),(0,r.kt)("p",null,"This config is implemented based on the Node Polyfill plugin of Modern.js Builder, you can read ",(0,r.kt)("a",{parentName:"p",href:"https://modernjs.dev/builder/en/plugins/plugin-node-polyfill.html"},"Modern.js Builder - Node Polyfill Plugin")," documentation for details."))}d.isMDXComponent=!0}}]);