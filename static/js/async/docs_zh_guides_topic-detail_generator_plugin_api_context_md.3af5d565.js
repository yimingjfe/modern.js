(self.webpackChunk_modern_js_main_doc=self.webpackChunk_modern_js_main_doc||[]).push([["docs_zh_guides_topic-detail_generator_plugin_api_context_md"],{27538:function(e,n,i){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e,n){for(var i in n)Object.defineProperty(e,i,{enumerable:!0,get:n[i]})}(n,{frontmatter:function(){return r},title:function(){return t},toc:function(){return c},default:function(){return l}});var d=i("9880"),s=i("23169"),r={sidebar_position:1},t="context",c=[{text:"类型",depth:2,id:"类型"},{text:"获取信息",depth:3,id:"获取信息"},{text:"locale",depth:4,id:"locale"},{text:"isFileExist",depth:4,id:"isfileexist"},{text:"readDir",depth:4,id:"readdir"},{text:"input 操作",depth:3,id:"input-操作"},{text:"addInputBefore",depth:4,id:"addinputbefore"},{text:"addInputAfter",depth:4,id:"addinputafter"},{text:"setInput",depth:4,id:"setinput"},{text:"setInputValue",depth:4,id:"setinputvalue"},{text:"setDefaultConfig",depth:4,id:"setdefaultconfig"},{text:"setGitMessage",depth:4,id:"setgitmessage"},{text:"生命周期函数",depth:3,id:"生命周期函数"}];function a(e){var n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",ul:"ul",li:"li",h3:"h3",h4:"h4",div:"div",ol:"ol"},(0,s.useMDXComponents)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"context",children:["context",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#context",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["生成器插件在 ",(0,d.jsx)(n.code,{children:"main"})," 文件中默认导出了一个函数，函数参数为 ",(0,d.jsx)(n.code,{children:"context"}),"，生成器插件提供的所有 API 都是由这个 ",(0,d.jsx)(n.code,{children:"context"})," 提供的。"]}),"\n",(0,d.jsxs)(n.h2,{id:"类型",children:["类型",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["我们先大概了解一下 ",(0,d.jsx)(n.code,{children:"context"})," 的类型定义："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"export interface IPluginContext {\n  locale?: string;\n  addInputBefore: (key: string, input: Schema) => void;\n  addInputAfter: (key: string, input: Schema) => void;\n  setInput: (key: string, field: string, value: unknown) => void;\n  setInputValue: (value: Record<string, unknown>) => void;\n  setDefaultConfig: (value: Record<string, unknown>) => void;\n  isFileExist: (fileName: string) => Promise<boolean>;\n  readDir: (dir: string) => Promise<string[]>;\n  setGitMessage: (gitMessage: string) => void;\n  onForged: (func: PluginForgedFunc) => void;\n  afterForged: (func: PluginAfterForgedFunc) => void;\n}\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"context"})," 提供的内容主要分为三类："]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"获取当前生成器执行环境信息"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"操作 input 输入"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"生成器插件生命周期函数"}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"下面将从这三个分类分别介绍生成器插件 API。"}),"\n",(0,d.jsxs)(n.h3,{id:"获取信息",children:["获取信息",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#获取信息",children:"#"})]}),"\n",(0,d.jsxs)(n.h4,{id:"locale",children:["locale",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#locale",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["获取生成器插件执行环境的语言。",(0,d.jsx)(n.code,{children:"@modern-js/create"})," 提供了 ",(0,d.jsx)(n.code,{children:"zh"})," 和 ",(0,d.jsx)(n.code,{children:"en"})," 两种语言，这里即为对应的这两种值。"]}),"\n",(0,d.jsxs)(n.h4,{id:"isfileexist",children:["isFileExist",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isfileexist",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"判断文件是否存在。我们很多时候需要在定义操作前确认目标项目文件是否已经存在，可以直接通过该 API 获取。"}),"\n",(0,d.jsxs)(n.p,{children:["例如我们需要获取 ",(0,d.jsx)(n.code,{children:"package.json"})," 文件是否存在，然后做相应的操作："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"const isExist = await context.isFileExist('package.json');\nif (isExist) {\n    ...\n}\n"})}),"\n",(0,d.jsxs)(n.h4,{id:"readdir",children:["readDir",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#readdir",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"获取文件夹内文件列表。我们很多时候需要在定义操作前获取目标项目文件夹下面文件列表，可以直接通过该 API 获取。"}),"\n",(0,d.jsx)(n.p,{children:"例如我们需要获取 src 文件夹下所有文件，然后进行相应操作："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"const files = await context.readDir('src');\n\nfiles.map(name => {\n    ...\n});\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"input-操作",children:["input 操作",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#input-操作",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["input 操作中使用的 key 参数可参考",(0,d.jsx)(n.a,{href:"/guides/topic-detail/generator/create/config",children:"配置参数"}),"，需要在使用对应工程方案下的 key，即不支持在 ",(0,d.jsx)(n.code,{children:"solution"})," 和 ",(0,d.jsx)(n.code,{children:"scenes"}),"。"]}),"\n",(0,d.jsxs)(n.p,{children:["input 操作中的 input 参数对应的 Schema 类型可参考 ",(0,d.jsx)(n.a,{href:"/guides/topic-detail/generator/plugin/api/input",children:"Input"}),"。"]}),"\n",(0,d.jsxs)(n.h4,{id:"addinputbefore",children:["addInputBefore",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#addinputbefore",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["在指定的 input ",(0,d.jsx)(n.code,{children:"key"})," 前添加问题。"]}),"\n",(0,d.jsx)(n.p,{children:"例如："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"context.addInputBefore('packageManager', {\n  type: 'object',\n  properties: {\n    language: {\n      type: 'string',\n      title: '开发语言',\n      enum: [\n        { label: 'TS', value: 'ts' },\n        { label: 'ES6+', value: 'js' },\n      ],\n    },\n  },\n});\n"})}),"\n",(0,d.jsxs)(n.h4,{id:"addinputafter",children:["addInputAfter",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#addinputafter",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["在指定的 input ",(0,d.jsx)(n.code,{children:"key"})," 后添加问题。"]}),"\n",(0,d.jsx)(n.p,{children:"例如："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"context.addInputAfter('packageManager', {\n  type: 'object',\n  properties: {\n    language: {\n      type: 'string',\n      title: '开发语言',\n      enum: [\n        { label: 'TS', value: 'ts' },\n        { label: 'ES6+', value: 'js' },\n      ],\n    },\n  },\n});\n"})}),"\n",(0,d.jsxs)(n.div,{className:"modern-directive info",children:[(0,d.jsx)(n.div,{className:"modern-directive-title",children:"INFO"}),(0,d.jsxs)(n.div,{className:"modern-directive-content",children:["\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["添加问题的 ",(0,d.jsx)(n.code,{children:"key"})," 不能和 Modern.js 提供的工程方案自身的问题的 ",(0,d.jsx)(n.code,{children:"key"})," 重复。"]}),"\n",(0,d.jsxs)(n.li,{children:["添加问题 ",(0,d.jsx)(n.code,{children:"addInputAfter"})," 的优先级高于 ",(0,d.jsx)(n.code,{children:"addInputBefore"}),"，当同时对一个 key 添加 After 问题和对其后一个key 添加 Before 问题时，After 问题会在 Before 之前。"]}),"\n",(0,d.jsxs)(n.li,{children:["当需要在相同 ",(0,d.jsx)(n.code,{children:"key"})," 前面或者后面添加多个问题时，可多次调用该方法，问题的顺序会按照调用顺序进行排列。"]}),"\n"]}),"\n"]})]}),"\n",(0,d.jsxs)(n.h4,{id:"setinput",children:["setInput",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#setinput",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["设置指定 input ",(0,d.jsx)(n.code,{children:"key"})," 的属性。"]}),"\n",(0,d.jsxs)(n.p,{children:["例如设置 ",(0,d.jsx)(n.code,{children:"packageName"})," 的 ",(0,d.jsx)(n.code,{children:"title"})," 属性："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"context.setInput('packageName', 'title', \"展示名称\");\n"})}),"\n",(0,d.jsxs)(n.div,{className:"modern-directive info",children:[(0,d.jsx)(n.div,{className:"modern-directive-title",children:"INFO"}),(0,d.jsx)(n.div,{className:"modern-directive-content",children:(0,d.jsx)(n.p,{children:"对于 Modern.js 工程方案提供的输入选项，只支持删除，不支持增加，增加会造成代码中的逻辑判断存在问题。"})})]}),"\n",(0,d.jsxs)(n.h4,{id:"setinputvalue",children:["setInputValue",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#setinputvalue",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["设置指定 input ",(0,d.jsx)(n.code,{children:"key"})," 的选项默认值。"]}),"\n",(0,d.jsxs)(n.p,{children:["例如设置 ",(0,d.jsx)(n.code,{children:"packageManager"})," 的默认值："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"context.setInputValue({\n  packageManager: 'npm',\n});\n"})}),"\n",(0,d.jsxs)(n.div,{className:"modern-directive info",children:[(0,d.jsx)(n.div,{className:"modern-directive-title",children:"INFO"}),(0,d.jsx)(n.div,{className:"modern-directive-content",children:(0,d.jsx)(n.p,{children:"设置完成后，该问题还是需要交互，只是会使用生成器插件配置的默认值。"})})]}),"\n",(0,d.jsxs)(n.h4,{id:"setdefaultconfig",children:["setDefaultConfig",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#setdefaultconfig",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["设置指定 input ",(0,d.jsx)(n.code,{children:"key"})," 的默认值。"]}),"\n",(0,d.jsxs)(n.p,{children:["例如设置 ",(0,d.jsx)(n.code,{children:"packageManager"})," 的默认值："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"context.setDefaultConfig({\n  packageManager: 'npm',\n});\n"})}),"\n",(0,d.jsxs)(n.div,{className:"modern-directive info",children:[(0,d.jsx)(n.div,{className:"modern-directive-title",children:"INFO"}),(0,d.jsx)(n.div,{className:"modern-directive-content",children:(0,d.jsxs)(n.p,{children:["设置完成后，将不再展示对应问题，和 ",(0,d.jsx)(n.code,{children:"@modern-js/create"})," 制定 ",(0,d.jsx)(n.code,{children:"--config"})," 行为一致。不支持设置 ",(0,d.jsx)(n.code,{children:"vertical"})," 和 ",(0,d.jsx)(n.code,{children:"projectOrg"}),"。\n"]})})]}),"\n",(0,d.jsxs)(n.h4,{id:"setgitmessage",children:["setGitMessage",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#setgitmessage",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["设置 Git 初始提交信息。Modern.js 默认 Git 初始化提交信息为 ",(0,d.jsx)(n.code,{children:"feat: init"}),"，通过该函数可以修改。"]}),"\n",(0,d.jsxs)(n.h3,{id:"生命周期函数",children:["生命周期函数",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#生命周期函数",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["生命周期函数比较复杂，将通过后面两节 ",(0,d.jsx)(n.a,{href:"/guides/topic-detail/generator/plugin/api/onForged",children:(0,d.jsx)(n.code,{children:"onForged"})})," 和 ",(0,d.jsx)(n.a,{href:"/guides/topic-detail/generator/plugin/api/afterForged",children:(0,d.jsx)(n.code,{children:"afterForged"})})," 分别介绍。"]})]})}var l=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,s.useMDXComponents)(),e.components).wrapper;return n?(0,d.jsx)(n,Object.assign({},e,{children:(0,d.jsx)(a,e)})):a(e)}}}]);