(self.webpackChunk_modern_js_main_doc=self.webpackChunk_modern_js_main_doc||[]).push([["docs_zh_guides_topic-detail_generator_plugin_context_md"],{37454:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e,n){for(var r in n)Object.defineProperty(e,r,{enumerable:!0,get:n[r]})}(n,{frontmatter:function(){return s},title:function(){return t},toc:function(){return c},default:function(){return a}});var d=r("9880"),i=r("23169"),s={sidebar_position:4},t="Context",c=[{text:"自定义 Input",depth:2,id:"自定义-input"},{text:"生命周期",depth:2,id:"生命周期"},{text:"onForged",depth:2,id:"onforged"},{text:"afterForged",depth:2,id:"afterforged"}];function o(e){var n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",pre:"pre",div:"div",h2:"h2",ul:"ul",li:"li"},(0,i.useMDXComponents)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"context",children:["Context",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#context",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["生成器插件默认会导出一个函数，函数参数为 ",(0,d.jsx)(n.code,{children:"context"}),"，在执行过程中 ",(0,d.jsx)(n.code,{children:"context"})," 会自动注入到生成器插件中。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",meta:'title="src/index.ts"',children:"import { IPluginContext, ForgedAPI } from '@modern-js/generator-plugin';\n\nexport default function (context: IPluginContext) {\n  context.onForged(async (_api: ForgedAPI, _input: Record<string, unknown>) => {\n    /**\n     * Todo\n     */\n  });\n}\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"context"})," 提供了两类 API，分别用于自定义 Input 和定义生成器插件声明周期逻辑。"]}),"\n",(0,d.jsxs)(n.div,{className:"modern-directive info",children:[(0,d.jsx)(n.div,{className:"modern-directive-title",children:"INFO"}),(0,d.jsx)(n.div,{className:"modern-directive-content",children:(0,d.jsxs)(n.p,{children:["下面只对部分 API 做简单示例讲解，完整的 API 请移步 ",(0,d.jsx)(n.a,{href:"/guides/topic-detail/generator/plugin/api/context",children:"生成器插件 API"})," 查看。\n"]})})]}),"\n",(0,d.jsxs)(n.h2,{id:"自定义-input",children:["自定义 Input",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义-input",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"Modern.js Web 应用和 Npm 模块工程方案都存在一些默认的 Input 交互，使用这里的 API 可以对这些 Input 进行添加、修改、隐藏、提供默认值等操作。"}),"\n",(0,d.jsx)(n.p,{children:"例如："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"添加问题"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"context.addInputBefore('packageManager', {\n  type: 'object',\n  properties: {\n    'username': {\n      type: 'string',\n      title: '用户名',\n    },\n  },\n});\n"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"通过设置 config 隐藏问题"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"context.setDefaultConfig({ langauge: 'ts' });\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"生命周期",children:["生命周期",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#生命周期",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"生成器插件提供了两个生命周期钩子函数用于定义生成器插件行为："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"onForged：完成文件操作后的生命周期。"}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"afterForged：onForged 钩子函数执行完成后的生命周期。"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.h2,{id:"onforged",children:["onForged",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#onforged",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"在 Modern.js 工程方案生成器完成文件操作之后的钩子函数，用于完成生成器插件中的文件操作，比如添加模板文件，覆盖现有文件，删除现有文件等。"}),"\n",(0,d.jsxs)(n.p,{children:["对于扩展类型同时执行多个生成器插件时，将会按照声明顺序依次执行对应生成器插件的 ",(0,d.jsx)(n.code,{children:"onForged"})," 操作。"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"onForged"})," 函数参数为一个回调函数，参数为 ",(0,d.jsx)(n.code,{children:"api"})," 和 ",(0,d.jsx)(n.code,{children:"input"}),"。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"context.onForged(async (api: ForgedAPI, input: Record<string, unknown>) => {\n  const { language } = input;\n  api.addFile({\n      type: FileType.Text,\n      file: `src/index.${language as string}`,\n      templateFile: `index.${language as string}.handlebars`,\n      force: true,\n  });\n})\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"api"})," 上会提供生成器插件支持的文件操作相关方法。"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"input"})," 为当前用户输入内容，包含 ",(0,d.jsx)(n.code,{children:"--config"})," 参数定义的，默认工程方案交互的及生成器插件定义的用户输入。"]}),"\n",(0,d.jsxs)(n.p,{children:["当需要添加新的文件模板时，将模板文件定义到 ",(0,d.jsx)(n.code,{children:"templates"})," 目录，然后通过上述 ",(0,d.jsx)(n.code,{children:"api"})," 上方法进行操作即可，生成器插件默认对 ",(0,d.jsx)(n.code,{children:"templates"})," 目录文件进行操作，无需再声明 ",(0,d.jsx)(n.code,{children:"templates"})," 路径。"]}),"\n",(0,d.jsxs)(n.h2,{id:"afterforged",children:["afterForged",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#afterforged",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"onForged"})," 钩子函数执行完成后执行，这里主要用于进行安装依赖，Git 操作等。"]}),"\n",(0,d.jsx)(n.p,{children:"默认 Modern.js 工程方案在完成文件操作后会默认执行安装依赖及 Git 初始化，Git 初次提交等，该钩子函数可以不使用。"}),"\n",(0,d.jsx)(n.p,{children:"对于自定义的生成器插件还支持 custom 类型，该类型只提供了少量最佳实践的项目配置，则需要在该钩子函数中完成安装依赖和 Git 初始化等操作。"}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"afterForged"})," 函数参数也为一个回调函数，参数为 ",(0,d.jsx)(n.code,{children:"api"})," 和 ",(0,d.jsx)(n.code,{children:"input"}),"。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:"  context.afterForged(\n    async (api: AfterForgedAPI, input: Record<string, unknown>) => {\n      const { packageManager } = input;\n      console.info('packageManager:', packageManager);\n      await api.install();\n    },\n  );\n"})})]})}var a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,i.useMDXComponents)(),e.components).wrapper;return n?(0,d.jsx)(n,Object.assign({},e,{children:(0,d.jsx)(o,e)})):o(e)}}}]);