(self.webpackChunk_modern_js_main_doc=self.webpackChunk_modern_js_main_doc||[]).push([["docs_en_guides_concept_entries_mdx"],{1868:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return o}});var r=t("9880"),i=t("23169");function s(e){return(0,r.jsx)(r.Fragment,{})}var o=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,i.useMDXComponents)(),e.components).wrapper;return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(s,e)})):s(e)}},8940:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e,n){for(var t in n)Object.defineProperty(e,t,{enumerable:!0,get:n[t]})}(n,{frontmatter:function(){return o},title:function(){return d},toc:function(){return a},default:function(){return l}});var r=t("9880"),i=t("23169"),s=t.ir(t("1868")),o={sidebar_position:1},d="Entry",a=[{text:"What is Entry?",depth:2,id:"what-is-entry?"},{text:"Single Entry and Multiple Entries",depth:2,id:"single-entry-and-multiple-entries"},{text:"Entry Types",depth:2,id:"entry-types"},{text:"Framework Mode Entry",depth:3,id:"framework-mode-entry"},{text:"Conventional Routing",depth:4,id:"conventional-routing"},{text:"Self-controlled Routing",depth:4,id:"self-controlled-routing"},{text:"Custom Bootstrap",depth:4,id:"custom-bootstrap"},{text:"Build Mode Entry",depth:3,id:"build-mode-entry"},{text:"Specifying Entry Using Configuration",depth:2,id:"specifying-entry-using-configuration"},{text:"Disable Default Entry Scanning",depth:3,id:"disable-default-entry-scanning"}];function c(e){var n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",strong:"strong",pre:"pre",code:"code",div:"div",ol:"ol",li:"li",h3:"h3",h4:"h4"},(0,i.useMDXComponents)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"entry",children:["Entry",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entry",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"In this chapter, you will learn about the entry convention in Modern.js and how to customize it."}),"\n",(0,r.jsxs)(n.h2,{id:"what-is-entry?",children:["What is Entry?",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#what-is-entry?",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Entry refers to the starting module of a page."})}),"\n",(0,r.jsx)(n.p,{children:"In a Modern.js project, each entry corresponds to an independent page and a server-side route. By default, Modern.js automatically determines the entry of a page based on directory conventions, but also supports customizing the entry through configuration options."}),"\n",(0,r.jsx)(n.p,{children:"Many configuration options provided by Modern.js are divided by entry, such as page title, HTML template, page meta information, whether to enable SSR/SSG, server-side routing rules, etc."}),"\n",(0,r.jsxs)(n.h2,{id:"single-entry-and-multiple-entries",children:["Single Entry and Multiple Entries",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#single-entry-and-multiple-entries",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"The project initialized by Modern.js is a single entry (SPA) project, with the following structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:".\n├── src\n│   └── routes\n│       ├── index.css\n│       ├── layout.tsx\n│       └── page.tsx\n├── package.json\n├── modern.config.ts\n└── tsconfig.json\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In a Modern.js project, you can easily switch from single entry to multiple entries by running ",(0,r.jsx)(n.code,{children:"pnpm run new"})," in the project directory and creating an entry:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'? Please select the operation you want: Create Element\n? Please select the type of element to create: New "entry"\n? Please fill in the entry name: new-entry\n'})}),"\n",(0,r.jsxs)(n.p,{children:["After running the command, Modern.js will automatically generate a new entry directory. At this point, you can see that the ",(0,r.jsx)(n.code,{children:"src/"})," directory has the following structure:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:".\n├── myapp     # Original entry\n│   └── routes\n│       ├── index.css\n│       ├── layout.tsx\n│       └── page.tsx\n└── new-entry  # New entry\n    └── routes\n        ├── index.css\n        ├── layout.tsx\n        └── page.tsx\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The original entry code has been moved to a directory with the same name as the ",(0,r.jsx)(n.code,{children:"name"})," field in ",(0,r.jsx)(n.code,{children:"package.json"}),", and a ",(0,r.jsx)(n.code,{children:"new-entry"})," entry directory has been created."]}),"\n",(0,r.jsxs)(n.p,{children:["After running ",(0,r.jsx)(n.code,{children:"pnpm run dev"}),", you can see a new route named ",(0,r.jsx)(n.code,{children:"/new-entry"})," has been added, and the migrated code route has not changed."]}),"\n",(0,r.jsxs)(n.div,{className:"modern-directive tip",children:[(0,r.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,r.jsxs)(n.div,{className:"modern-directive-content",children:[(0,r.jsxs)(n.p,{children:["Modern.js will use the entry with the same name as the ",(0,r.jsx)(n.code,{children:"name"})," field in ",(0,r.jsx)(n.code,{children:"package.json"})," as the main entry. The route of the main entry is ",(0,r.jsx)(n.code,{children:"/"}),", and the route of other entries is ",(0,r.jsx)(n.code,{children:"/{entryName}"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, when the ",(0,r.jsx)(n.code,{children:"name"})," field in ",(0,r.jsx)(n.code,{children:"package.json"})," is ",(0,r.jsx)(n.code,{children:"myapp"}),", ",(0,r.jsx)(n.code,{children:"src/myapp"})," will be the main entry of the project."]}),"\n"]})]}),"\n",(0,r.jsxs)(n.h2,{id:"entry-types",children:["Entry Types",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#entry-types",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Different entry types have different compilation and runtime behaviors."}),"\n","\n",(0,r.jsx)(s.default,{}),"\n",(0,r.jsxs)(n.p,{children:["By default, Modern.js scans the files under ",(0,r.jsx)(n.code,{children:"src/"})," before starting the project, identifies the entry, and generates the corresponding server-side route."]}),"\n",(0,r.jsxs)(n.div,{className:"modern-directive tip",children:[(0,r.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,r.jsxs)(n.div,{className:"modern-directive-content",children:[(0,r.jsxs)(n.p,{children:["You can modify the directory for entry identification by using the ",(0,r.jsx)(n.a,{href:"/configure/app/source/entries-dir",children:"source.entriesDir"})," config."]}),"\n"]})]}),"\n",(0,r.jsxs)(n.p,{children:["Not all top-level directories under ",(0,r.jsx)(n.code,{children:"src/"})," become project entries. The directory where the entry is located must meet one of the following four conditions:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Has a ",(0,r.jsx)(n.code,{children:"routes/"})," directory."]}),"\n",(0,r.jsxs)(n.li,{children:["Has an ",(0,r.jsx)(n.code,{children:"App.[jt]sx?"})," file."]}),"\n",(0,r.jsxs)(n.li,{children:["Has an ",(0,r.jsx)(n.code,{children:"index.[jt]sx?"})," file."]}),"\n",(0,r.jsxs)(n.li,{children:["Has a ",(0,r.jsx)(n.code,{children:"pages/"})," directory (compatible with Modern.js 1.0)."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["When the ",(0,r.jsx)(n.code,{children:"src/"})," directory meets the entry requirements, Modern.js considers the current project as a single entry application."]}),"\n",(0,r.jsxs)(n.div,{className:"modern-directive tip",children:[(0,r.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,r.jsxs)(n.div,{className:"modern-directive-content",children:[(0,r.jsxs)(n.p,{children:["In a single entry application, the default entry name is ",(0,r.jsx)(n.code,{children:"main"}),"."]}),"\n"]})]}),"\n",(0,r.jsxs)(n.p,{children:["When the project is not a single entry application, Modern.js will further look at the top-level directories under ",(0,r.jsx)(n.code,{children:"src/"}),"."]}),"\n",(0,r.jsxs)(n.h3,{id:"framework-mode-entry",children:["Framework Mode Entry",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#framework-mode-entry",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Framework mode refers to the need to use Modern.js framework capabilities, such as Router, SSR, integrated calls, etc. Under this type of entry convention, the entry defined by the developer is not a real webpack compilation entry. Modern.js will generate a wrapped entry during startup, and you can find the real entry in ",(0,r.jsx)(n.code,{children:"node_modules/.modern/{entryName}/index.js"}),"."]}),"\n",(0,r.jsxs)(n.h4,{id:"conventional-routing",children:["Conventional Routing",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#conventional-routing",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["If there is a ",(0,r.jsx)(n.code,{children:"routes/"})," directory in the entry, Modern.js will scan the files under ",(0,r.jsx)(n.code,{children:"routes/"})," during startup, and automatically generate client-side routes (react-router) based on file conventions. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:".\n├── src\n│   └── routes\n│       ├── layout.tsx\n│       └── page.tsx\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the above directory, the component exported in ",(0,r.jsx)(n.code,{children:"layout.tsx"})," will be the outermost component, and the component exported in ",(0,r.jsx)(n.code,{children:"page.tsx"})," will be the component of the ",(0,r.jsx)(n.code,{children:"/"})," route."]}),"\n",(0,r.jsxs)(n.p,{children:["For more information, please refer to ",(0,r.jsx)(n.a,{href:"/guides/basic-features/routes#conventional-routing",children:"Conventional Routing"}),"."]}),"\n",(0,r.jsxs)(n.h4,{id:"self-controlled-routing",children:["Self-controlled Routing",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#self-controlled-routing",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["If there is an ",(0,r.jsx)(n.code,{children:"App.[jt]sx?"})," file in the entry, developers can set the client-side route in this file through code, or not set the client-side route."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { BrowserRouter, Route, Routes } from '@modern-js/runtime/router';\n\nexport default () => {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route index element={<div>index</div>} />\n        <Route path=\"about\" element={<div>about</div>} />\n      </Routes>\n    </BrowserRouter>\n  );\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For more information, please refer to ",(0,r.jsx)(n.a,{href:"/guides/basic-features/routes#self-controlled-routing",children:"Self-controlled Routing"}),"."]}),"\n",(0,r.jsxs)(n.h4,{id:"custom-bootstrap",children:["Custom Bootstrap",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#custom-bootstrap",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["If there is an ",(0,r.jsx)(n.code,{children:"index.[jt]sx"})," file in the entry, and the file exports a function by default, Modern.js will pass the default ",(0,r.jsx)(n.code,{children:"bootstrap"})," function as a parameter and use the exported function to replace the default ",(0,r.jsx)(n.code,{children:"bootstrap"}),". This way, developers can customize how components are mounted to DOM nodes or add custom behavior before mounting. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"export default (App: React.ComponentType, bootstrap: () => void) => {\n  // do something before bootstrap...\n  initSomething().then(() => {\n    bootstrap();\n  })\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"At this point, the generated file content of Modern.js is as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport customBootstrap from '@_modern_js_src/index.tsx';\nimport App from '@_modern_js_src/App';\nimport { router, state } from '@modern-js/runtime/plugins';\n\nconst IS_BROWSER = typeof window !== 'undefined' && window.name !== 'nodejs';\nconst MOUNT_ID = 'root';\n\nlet AppWrapper = null;\n\nfunction render() {\n  AppWrapper = createApp({\n    // plugin parameters for runtime...\n  })(App);\n  if (IS_BROWSER) {\n    customBootstrap(AppWrapper);\n  }\n  return AppWrapper;\n}\n\nAppWrapper = render();\n\nexport default AppWrapper;\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"build-mode-entry",children:["Build Mode Entry",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#build-mode-entry",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Build mode refers to not using any Modern.js runtime capabilities and completely defining the project's webpack entry by the developer."}),"\n",(0,r.jsxs)(n.p,{children:["If there is an ",(0,r.jsx)(n.code,{children:"index.[jt]sx"})," file in the entry and it does not export a default function, then this file is the real webpack entry file. Similar to ",(0,r.jsx)(n.a,{href:"https://github.com/facebook/create-react-app",target:"_blank",rel:"noopener noreferrer",children:"Create React App"}),", you need to mount the component to the DOM node by yourself, add hot update code, etc. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",meta:"title=src/index.jsx",children:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Modern.js ",(0,r.jsx)(n.strong,{children:"does not recommend"})," using this method for new projects, as it loses some of the framework's capabilities, such as the ",(0,r.jsx)(n.code,{children:"runtime"})," configuration in the ",(0,r.jsx)(n.code,{children:"modern.config.js"})," file will no longer take effect. However, this method can be very useful when migrating projects from other frameworks to Modern.js, such as CRA, or manually building webpack."]}),"\n",(0,r.jsxs)(n.h2,{id:"specifying-entry-using-configuration",children:["Specifying Entry Using Configuration",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#specifying-entry-using-configuration",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Most existing projects are not built according to the directory structure of Modern.js. If you want to change to the directory structure of Modern.js, there will be certain migration costs."}),"\n",(0,r.jsxs)(n.p,{children:["In this case, in addition to using file conventions to generate entries, you can manually configure the entry in ",(0,r.jsx)(n.code,{children:"modern.config.[jt]s"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  source: {\n    entries: {\n      // Specify a new entry named entry_customize\n      entry_customize: './src/home/test/index.ts',\n    },\n    // Disable default ingress scanning\n    disableDefaultEntries: true,\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"disable-default-entry-scanning",children:["Disable Default Entry Scanning",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#disable-default-entry-scanning",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"When using custom entries, part of the project structure may coincidentally hit the directory conventions of Modern.js, but in fact, this part of the directory is not the real entry."}),"\n",(0,r.jsxs)(n.p,{children:["Modern.js provides the ",(0,r.jsx)(n.code,{children:"disableDefaultEntries"})," configuration to disable the default entry scanning rules. When you need to customize the entry, you generally need to use ",(0,r.jsx)(n.code,{children:"disableDefaultEntries"})," in combination with ",(0,r.jsx)(n.code,{children:"entries"}),". This way, some existing projects can be quickly migrated without modifying the directory structure."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  source: {\n    disableDefaultEntries: true,\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.div,{className:"modern-directive tip",children:[(0,r.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,r.jsxs)(n.div,{className:"modern-directive-content",children:[(0,r.jsxs)(n.p,{children:["For detailed usage, please refer to ",(0,r.jsx)(n.a,{href:"/configure/app/source/entries",children:"source.entries"})," and ",(0,r.jsx)(n.a,{href:"/configure/app/source/disable-default-entries",children:"source.disableDefaultEntries"}),"."]}),"\n"]})]})]})}var l=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,i.useMDXComponents)(),e.components).wrapper;return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(c,e)})):c(e)}}}]);