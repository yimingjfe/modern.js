(self.webpackChunk_modern_js_main_doc=self.webpackChunk_modern_js_main_doc||[]).push([["docs_zh_guides_topic-detail_generator_plugin_structure_md"],{92047:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e,n){for(var r in n)Object.defineProperty(e,r,{enumerable:!0,get:n[r]})}(n,{frontmatter:function(){return d},title:function(){return t},toc:function(){return i},default:function(){return o}});var s=r("9880"),c=r("23169"),d={sidebar_position:1},t="介绍及创建项目",i=[{text:"介绍",depth:2,id:"介绍"},{text:"创建项目",depth:2,id:"创建项目"},{text:"package.json",depth:2,id:"packagejson"},{text:"src/index.ts",depth:2,id:"src/indexts"},{text:"templates",depth:2,id:"templates"}];function a(e){var n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"介绍及创建项目",children:["介绍及创建项目",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#介绍及创建项目",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"介绍",children:["介绍",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#介绍",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Modern.js 提供了 Web 应用、Npm 模块等工程方案，并通过使用 ",(0,s.jsx)(n.code,{children:"@modern-js/create"})," 工具可以创建工程方案的初始项目模板，初始项目模板会提供基本的代码开发环境、简单的示例代码及配置等。"]}),"\n",(0,s.jsx)(n.p,{children:"Modern.js 提供的初始化模板具有通用性，能满足一些通用的项目开发需求。"}),"\n",(0,s.jsx)(n.p,{children:"当你深度使用 Modern.js 时，必然会发现每次创建的项目都会进行一些针对自身项目的特定的相似改动，比如修改示例代码、增加一些配置、开启某些功能等。"}),"\n",(0,s.jsxs)(n.p,{children:["生成器插件可以帮你将这些针对个人或团队特定的改动沉淀下来，在执行 ",(0,s.jsx)(n.code,{children:"npx @modern-js/create@latest"})," 只需简单的带上 ",(0,s.jsx)(n.code,{children:"--plugin"})," 参数即可避免每次创建完项目都需重复性修改项目的工作。"]}),"\n",(0,s.jsxs)(n.p,{children:["生成器插件是在 Modern.js 提供的初始化模板项目的基础上，提供对模板进行增加、删除、修改的方法，并通过快捷的方式修改 ",(0,s.jsx)(n.code,{children:"package.json"}),"、",(0,s.jsx)(n.code,{children:"modernConfig"})," 配置和开启功能等操作。"]}),"\n",(0,s.jsxs)(n.h2,{id:"创建项目",children:["创建项目",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建项目",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["使用 ",(0,s.jsx)(n.code,{children:"@modern-js/create"})," 可直接创建生成器插件项目："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx @modern-js/create@latest plugin --plugin @modern-js/generator-plugin-plugin\n? 请选择你想创建的工程类型 Npm 模块\n? 请选择项目场景 生成器插件\n? 请输入生成器插件插件包名 plugin\n? 请选择开发语言 TS\n? 请选择包管理工具 pnpm\n? 请选择插件类型 extend\n? 请选择插件基础类型 Web 应用\n"})}),"\n",(0,s.jsx)(n.p,{children:"创建完成后，我们可以看一下这个项目的目录结构："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:".\n├── .changeset\n│   └── config.json\n├── .eslintrc.js\n├── .gitignore\n├── .npmrc\n├── .nvmrc\n├── .prettierrc\n├── README.md\n├── modern.config.ts\n├── package.json\n├── src\n│   ├── modern-app-env.d.ts\n│   └── index.ts\n├── templates\n│   └── .gitkeep\n└── tsconfig.json\n"})}),"\n",(0,s.jsx)(n.p,{children:"项目是基于 Npm 模块项目创建的，核心是下面几个文件："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"*\n├── package.json\n├── src\n│   └── index.ts\n├── templates\n│   └── .gitkeep\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"packagejson",children:["package.json",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packagejson",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"package.json"})," 中除了正常的模块项目的字段外，提供了 meta 字段，用于描述生成器插件的信息。"]}),"\n",(0,s.jsxs)(n.p,{children:["生成器插件分为两类：扩展和自定义，具体分类定义可查看",(0,s.jsx)(n.a,{href:"/guides/topic-detail/generator/plugin/category",children:"类型"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",meta:'title="package.json"',children:'{\n  ...,\n  "meta": {\n    "extend": "mwa"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"src/indexts",children:["src/index.ts",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#src/indexts",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"该文件用于完成生成器插件的内容开发。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { IPluginContext, ForgedAPI } from '@modern-js/generator-plugin';\n\nexport default function (context: IPluginContext) {\n  context.onForged(async (_api: ForgedAPI, _input: Record<string, unknown>) => {\n    /**\n     * todo\n     */\n  });\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["该文件默认导出一个函数，函数参数为 ",(0,s.jsx)(n.code,{children:"context"}),"，",(0,s.jsx)(n.code,{children:"context"})," 上提供了生成器插件支持的 API 方法，可用于实现生成器插件的逻辑。",(0,s.jsx)(n.code,{children:"context"})," 提供的能力可以参考 ",(0,s.jsx)(n.a,{href:"/guides/topic-detail/generator/plugin/context",children:"context"}),"。"]}),"\n",(0,s.jsxs)(n.h2,{id:"templates",children:["templates",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#templates",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"templates"})," 目录存在当前定制化方式的模板文件，支持 ",(0,s.jsx)(n.a,{href:"https://handlebarsjs.com/",target:"_blank",rel:"noopener noreferrer",children:"Handlebars"})," 和 ",(0,s.jsx)(n.a,{href:"https://ejs.co/",target:"_blank",rel:"noopener noreferrer",children:"EJS"})," 格式，将根据模板文件后缀使用不同的渲染引擎就行渲染，如果无后缀，将会直接复制模板文件到目标目录。"]}),"\n",(0,s.jsxs)(n.p,{children:["如果模板文件为 ",(0,s.jsx)(n.code,{children:"js"}),"、",(0,s.jsx)(n.code,{children:"ts"})," 或者 ",(0,s.jsx)(n.code,{children:"json"})," 文件，推荐直接使用 ",(0,s.jsx)(n.code,{children:".handlebars"})," 或者 ",(0,s.jsx)(n.code,{children:".ejs"})," 后缀，可避免项目 eslint 报错和在 Monorepo 中项目识别问题。"]}),"\n",(0,s.jsxs)(n.p,{children:["模板中 ",(0,s.jsx)(n.code,{children:".gitignore"})," 文件和 ",(0,s.jsx)(n.code,{children:".npmrc"})," 文件在发布 npm 包时会自动删除，需要使用 ",(0,s.jsx)(n.code,{children:".handlebars"})," 或者 ",(0,s.jsx)(n.code,{children:".ejs"})," 后缀将其保留。"]})]})}var o=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(a,e)})):a(e)}}}]);