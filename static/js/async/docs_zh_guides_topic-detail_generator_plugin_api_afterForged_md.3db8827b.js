(self.webpackChunk_modern_js_main_doc=self.webpackChunk_modern_js_main_doc||[]).push([["docs_zh_guides_topic-detail_generator_plugin_api_afterForged_md"],{84353:function(e,n,i){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e,n){for(var i in n)Object.defineProperty(e,i,{enumerable:!0,get:n[i]})}(n,{frontmatter:function(){return d},title:function(){return a},toc:function(){return s},default:function(){return c}});var r=i("9880"),t=i("23169"),d={sidebar_position:3},a="afterForged",s=[{text:"类型",depth:2,id:"类型"},{text:"API",depth:2,id:"api"},{text:"isInGitRepo",depth:3,id:"isingitrepo"},{text:"initGitRepo",depth:3,id:"initgitrepo"},{text:"gitAddAndCommit",depth:3,id:"gitaddandcommit"},{text:"install",depth:3,id:"install"}];function o(e){var n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",h3:"h3",ul:"ul",li:"li"},(0,t.useMDXComponents)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"afterforged",children:["afterForged",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#afterforged",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"afterForged"})," 为生成器插件中用于文件操作后其他步骤操作的生命周期函数。"]}),"\n",(0,r.jsxs)(n.h2,{id:"类型",children:["类型",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export type AfterForgedAPI = {\n  isInGitRepo: () => Promise<boolean>;\n  initGitRepo: () => Promise<void>;\n  gitAddAndCommit: (commitMessage: string) => Promise<void>;\n  install: () => Promise<void>;\n};\n\nexport type PluginAfterForgedFunc = (api: AfterForgedAPI, inputData: Record<string, unknown>) => Promise<void>;\n\nexport interface IPluginContext {\n   afterForged: (func: PluginAfterForgedFunc) => void;\n  ...\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"api",children:["API",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"下面将分别介绍 api 参数提供的 API。"}),"\n",(0,r.jsxs)(n.h3,{id:"isingitrepo",children:["isInGitRepo",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#isingitrepo",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"判断当前项目是否为一个 Git 仓库。"}),"\n",(0,r.jsxs)(n.h3,{id:"initgitrepo",children:["initGitRepo",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#initgitrepo",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"初始化当前项目为 Git 仓库。"}),"\n",(0,r.jsxs)(n.h3,{id:"gitaddandcommit",children:["gitAddAndCommit",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#gitaddandcommit",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"提交当前仓库变更。"}),"\n",(0,r.jsx)(n.p,{children:"参数："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"commitMessage"}),": commit 信息。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"install",children:["install",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#install",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在项目根目录安装依赖。",(0,r.jsx)(n.code,{children:"install"})," 函数中将根据 ",(0,r.jsx)(n.code,{children:"packageManager"})," 的值使用对应的包管理工具安装依赖。"]})]})}var c=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,t.useMDXComponents)(),e.components).wrapper;return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(o,e)})):o(e)}}}]);