[{"id":0,"title":"Commands","routePath":"/en/apis/app/commands","lang":"en","toc":[{"text":"modern dev","id":"modern-dev","depth":2,"charIndex":239},{"text":"Compile Partial Pages","id":"compile-partial-pages","depth":3,"charIndex":1004},{"text":"Specify the page by parameter","id":"specify-the-page-by-parameter","depth":3,"charIndex":1600},{"text":"modern start","id":"modern-start","depth":2,"charIndex":1863},{"text":"modern build","id":"modern-build","depth":2,"charIndex":1971},{"text":"Analyze Bundle","id":"analyze-bundle","depth":3,"charIndex":2417},{"text":"modern new","id":"modern-new","depth":2,"charIndex":3067},{"text":"Add Entry","id":"add-entry","depth":3,"charIndex":3681},{"text":"Enable Features","id":"enable-features","depth":3,"charIndex":3934},{"text":"modern serve","id":"modern-serve","depth":2,"charIndex":4470},{"text":"modern upgrade","id":"modern-upgrade","depth":2,"charIndex":5051},{"text":"modern inspect","id":"modern-inspect","depth":2,"charIndex":5466},{"text":"Configuration Env","id":"configuration-env","depth":3,"charIndex":6517},{"text":"Verbose content","id":"verbose-content","depth":3,"charIndex":6716},{"text":"SSR Configuration","id":"ssr-configuration","depth":3,"charIndex":6925},{"text":"modern lint","id":"modern-lint","depth":2,"charIndex":7408},{"text":"modern test","id":"modern-test","depth":2,"charIndex":7764}],"domain":"","content":"#\n\nModern.js has some built-in commands that can help you quickly start a\ndevelopment server, build production environment code, and more.\n\nThrough this chapter, you can learn about the built-in commands of Modern.js and\nhow to use them.\n\n\nmodern dev#\n\nThe modern dev command is used to start a local development server and compile\nthe source code in the development environment.\n\nUsage: modern dev [options]\n\nOptions:\n  -e --entry     compiler by entry\n  -c --config   configuration file path, which can be a relative path or an absolute path\n  -h, --help            show command help\n  --analyze             analyze the bundle and view size of each module\n  --web-only            only start web service\n  --api-only            only start API service\n\n\nAfter running modern dev, Modern.js will watch source file changes and apply hot\nmodule replacement.\n\n$ modern dev\n\ninfo    Starting dev server...\ninfo    App running at:\n\n  > Local:    http://localhost:8080/\n  > Network:  http://192.168.0.1:8080/\n\n\n\nCompile Partial Pages#\n\nIn multi-page (MPA) projects, the --entry option can be added to specify one or\nmore pages to compile. In this way, only part of the code in the project will be\ncompiled, and the dev startup speed will be faster.\n\nFor example, execute modern dev --entry, the entry selector will be displayed in\nthe command line interface:\n\n$ modern dev --entry\n\n? Please select the entry that needs to be built\n❯ ◯ foo\n  ◯ bar\n  ◯ baz\n\n\nFor example, if you select the foo entry, only the code related to the foo entry\nwill be compiled, and the code of other pages will not be compiled.\n\n\nSpecify the page by parameter#\n\nYou can also specify the page name through parameters after --entry, and the\nnames of multiple pages can be separated by commas.\n\n# Compile foo page\nmodern dev --entry foo\n\n# Compile foo and bar pages\nmodern dev --entry foo,bar\n\n\n\nmodern start#\n\nmodern start is an alias of modern dev command, the usage of the two are exactly\nthe same.\n\n\nmodern build#\n\nThe modern build command will build a production-ready product in the dist/\ndirectory by default. You can specify the output directory by modifying the\nconfiguration output.distPath.\n\nUsage: modern build [options]\n\nOptions:\n  -c --config   configuration file path, which can be a relative path or an absolute path\n  -h, --help            show command help\n  --analyze             analyze the bundle and view size of each module\n\n\n\nAnalyze Bundle#\n\nexecute npx modern build --analyze command, can produce an HTML file that\nanalyzes the volume of the bundle while packaging the production code:\n\nBundle Analyzer saved report to /example/dist/report.html\nFile sizes after production build:\n\n  122.35 KB  dist/static/js/885.1d4fbe5a.js\n  2.3 KB     dist/static/js/main.4b8e8d64.js\n  761 B      dist/static/js/runtime-main.edb7cf35.js\n  645 B      dist/static/css/main.0dd3ecc1.css\n\n\nOpen the above HTML file in the browser, you can see the tile diagram of the\npackaged product, and perform package volume analysis and optimization:\n\n> this features based on webpack-bundle-analyzer.\n\n\nmodern new#\n\nThe modern new command is used to enable features in an existing project.\n\nFor example, add application entry, enable some optional features such as\nTailwind CSS, micro frontend, etc.\n\nUsage: modern new [options]\n\nOptions:\n  --lang           set the language (zh or en) for the new command.\n  -d, --debug            using debug mode to log something (default: false)\n  -c, --config   set default generator config(json string)\n  --dist-tag        use specified tag version for its generator\n  --registry             set npm registry url to run npm command\n  -h, --help             show command help\n\n\n\nAdd Entry#\n\nIn the project, execute the new command to add entries as follows:\n\n$ npx modern new\n? Please select the operation you want: Create Element\n? Please select the type of element to create: New \"entry\"\n? Please fill in the entry name: entry\n\n\n\nEnable Features#\n\nIn the project, execute the new command to enable features as follows:\n\n$ npx modern new\n? Please select the operation you want: Enable Features\n? Please select the feature name: (Use arrow keys)\n❯ Enable Tailwind CSS\n  Enable BFF\n  Enable SSG\n  Enable Micro Frontend\n  Enable Unit Test / Integration Test\n  Enable Visual Testing (Storybook)\n\n\nTIP\n\nThe --config parameter needs to use a JSON string.\n\npnpm does not support the use of JSON strings as parameter values currently. Use\nnpm new to turn on.【Relate Issue】\n\n\nmodern serve#\n\nUsually use the modern serve command to enable project run in the production\nenvironment, and you need to execute the `build' command in advance to build the\noutputs.\n\nUsage: modern serve [options]\n\nOptions:\n  -c --config   configuration file path, which can be a relative path or an absolute path\n  -h, --help            show command help\n  --api-only            only run API service\n\n\nBy default, the project will run in localhost:8080, you can modify the server\nport number with server.port:\n\nexport default defineConfig({\n  server: {\n    port: 8081,\n  },\n});\n\n\n\nmodern upgrade#\n\nExecute the command npx modern upgrade in the project, by default, dependencies\nin the package.json are updated to the latest version.\n\nUsage: modern upgrade [options]\n\nOptions:\n  --registry   specify npm registry (default: \"\")\n  -d,--debug             using debug mode to log something (default: false)\n  --cwd             app directory (default: \"\")\n  -h, --help             show command help\n\n\n\nmodern inspect#\n\nThe modern inspect command is used to view the Modern.js Builder config and\nwebpack config of the project.\n\nUsage: modern inspect [options]\n\nOptions:\n  --env            view the configuration in the target environment (default: \"development\")\n  --output      Specify the path to output in the dist (default: \"/\")\n  --verbose             Show the full function in the result\n  -c --config   configuration file path, which can be a relative path or an absolute path\n  -h, --help            show command help\n\n\nAfter executing the command npx modern inspect in the project root directory,\nthe following files will be generated in the dist directory of the project:\n\n * builder.config.js: The Modern.js Builder config to use at build time.\n * webpack.config.web.js: The webpack config used by to use at build time.\n\n➜ npx modern inspect\n\nInspect config succeed, open following files to view the content:\n\n  - Builder Config: /root/my-project/dist/builder.config.js\n  - Webpack Config (web): /root/my-project/dist/webpack.config.web.js\n\n\n\nConfiguration Env#\n\nBy default, the inspect command will output the development configs, you can use\nthe --env production option to output the production configs:\n\nmodern inspect --env production\n\n\n\nVerbose content#\n\nBy default, the inspect command will omit the function content in the config\nobject, you can use the --verbose option to output the full content of the\nfunction:\n\nmodern inspect --verbose\n\n\n\nSSR Configuration#\n\nIf the project has enabled SSR, an additional webpack.config.node.js file will\nbe generated in the dist/, corresponding to the webpack configuration at SSR\nbuild time.\n\n➜ npx modern inspect\n\nInspect config succeed, open following files to view the content:\n\n  - Builder Config: /root/my-project/dist/builder.config.js\n  - Webpack Config (web): /root/my-project/dist/webpack.config.web.js\n  - Webpack Config (node): /root/my-project/dist/webpack.config.node.js\n\n\n\nmodern lint#\n\nRun ESLint to check the syntax of the code.\n\nUsage: modern lint [options] [...files]\n\nOptions:\n  --no-fix    disable auto fix source file\n  -h, --help  display help for command\n\n\nNormally, only the part of the code modified by this commit needs to be checked\nby lint-staged during the git commit phase.\n\n * --no-fix close auto fix by lint.\n\n\nmodern test#\n\nmodern test command will automatically run the test cases.\n\nUsage: modern test [options]\n\nOptions:\n  -h, --help  show command help\n\n\nTIP\n\nmodern test command need to execute the new command in advance to enable the\nunit test/integration test.\n\nThe effect is as follows:\n\n$ npx modern test\n PASS  src/tests/index.test.ts\n  The add method\n    ✓ should work fine. (2ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.994 s, estimated 1 s\n\n\nINFO\n\nFiles match *.test.(js|ts) in api/ or src/ folders will be recognized as test\ncases by default.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/commands.mdx","_relativePath":"en/apis/app/commands.mdx"},{"id":1,"title":"**/*.[tj]s","routePath":"/en/apis/app/hooks/api/api","lang":"en","toc":[{"text":"Routing File Convention","id":"routing-file-convention","depth":2,"charIndex":399},{"text":"Default Routing","id":"default-routing","depth":3,"charIndex":426},{"text":"Nested Routing","id":"nested-routing","depth":3,"charIndex":589},{"text":"Dynamic Routing","id":"dynamic-routing","depth":3,"charIndex":850},{"text":"Allow List","id":"allow-list","depth":3,"charIndex":1240},{"text":"Function Definition","id":"function-definition","depth":2,"charIndex":1680}],"domain":"","content":"#\n\nFiles that declare API routes in the BFF Function Mode. Except for some\nconvention files, files in the api directory will be registered as the routes.\n\nINFO\n\nUsing the api directory requires enabling the BFF feature, and you need to run\nthe new command in the project to enable the \"BFF\" feature.\n\nThis file supports using the js or ts language, but you must use esm syntax to\nexport functions.\n\n\nRouting File Convention#\n\n\nDefault Routing#\n\nThe routing system will map files named index to the previous directory.\n\n * api/index.ts -> $BASENAME/\n * api/user/index.ts -> $BASENAME/user\n\n\nNested Routing#\n\nThe routing system also supports parsing nested files. If you create a nested\nfolder structure, the files will still automatically resolve routes in the same\nway.\n\n * api/hello.ts -> $BASENAME/hello\n * api/user/list.ts -> $BASENAME/user/list\n\n\nDynamic Routing#\n\nThe routing system supports generating dynamic routes through file directories\nnamed with [].\n\n * api/user/[username]/info.ts -> $BASENAME/user/:username/info\n * api/user/[username]/delete.ts -> $BASENAME/user/:username/delete\n * api/article/[id]/info.ts -> $BASENAME/article/:id/info\n\nThe $BASENAME can be configured in modern.config.js, and the default value is\n/api.\n\n\nAllow List#\n\nBy default, all files in the api directory will be parsed as BFF function files,\nbut we also set a white list for these files that are not parsed:\n\n * Files whose names start with _. For example: _utils.ts.\n * All files in folders whose names start with _. For example: _utils/index.ts,\n   _utils/cp.ts.\n * Test files. For example: foo.test.ts.\n * TypeScript type files. For example: hello.d.ts.\n * Files under node_modules.\n\n\nFunction Definition#\n\nIn addition to the routing rules above, there are also conventions for function\ndefinitions and exports in the code.\n\nFunctions are exported by name, and the name of the exported function is the\nHTTP method accepted by the corresponding interface, that is:\n\nexport const get = async () => {\n  return {\n    name: 'Modern.js',\n    desc: 'Modern web Solutions',\n  };\n};\n\n\nBy exporting functions in this way, you will get a GET interface.\n\nThe application project supports 9 Method definitions, namely: GET, POST, PUT,\nDELETE, CONNECT, TRACE, PATCH, OPTION, HEAD, that is, these Methods can be used\nas the names of the exported functions.\n\nThe name is case-insensitive, that is, if it is GET, it can be written as get,\nGet, GEt, GET, all of which can be accurately recognized. The default export,\nthat is, export default xxx, will be mapped to Get.\n\nBecause delete is a keyword in JavaScript, you can use del or DELETE instead.\n\nMultiple functions with different Methods can be defined in one file, but if\nmultiple functions with the same Method are defined, only the first one will\ntake effect.\n\nINFO\n\nIt should be noted that the defined functions should all be asynchronous, which\nis related to the type when calling the function.","frontmatter":{"title":"**/*.[tj]s","sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/api/api.mdx","_relativePath":"en/apis/app/hooks/api/api.mdx"},{"id":2,"title":"_app.[tj]s","routePath":"/en/apis/app/hooks/api/app","lang":"en","toc":[],"domain":"","content":"#\n\nIn the BFF Function Mode, this file can add pre-middleware for BFF functions.\n\nNOTE\n\nFor specific examples, please refer to hook.","frontmatter":{"title":"_app.[tj]s","sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/api/app.mdx","_relativePath":"en/apis/app/hooks/api/app.mdx"},{"id":3,"title":"lambda/*.[tj]s","routePath":"/en/apis/app/hooks/api/lambda","lang":"en","toc":[{"text":"Routing File Convention","id":"routing-file-convention","depth":2,"charIndex":406},{"text":"Default Routing","id":"default-routing","depth":3,"charIndex":433},{"text":"Nested Routing","id":"nested-routing","depth":3,"charIndex":610},{"text":"Dynamic Routing","id":"dynamic-routing","depth":3,"charIndex":885},{"text":"Allow List","id":"allow-list","depth":3,"charIndex":1296},{"text":"Function Definition","id":"function-definition","depth":2,"charIndex":1730}],"domain":"","content":"#\n\nFiles that declare API routes under the BFF Framework Mode. Except for\nconvention files, files under the lambda/ directory will be registered as the\nroutes.\n\nINFO\n\nUsing the api directory requires enabling the BFF function, and you need to run\nthe new command to enable the \"BFF\" function under the project.\n\nTIP\n\nThis file supports using js or ts language, but must export functions using esm\nsyntax.\n\n\nRouting File Convention#\n\n\nDefault Routing#\n\nThe routing system will map files named index to the previous directory.\n\n * api/lambda/index.ts -> $BASENAME/\n * api/lambda/user/index.ts -> $BASENAME/user\n\n\nNested Routing#\n\nThe routing system also supports parsing nested files. If you create a nested\nfolder structure, the files will still automatically resolve routes in the same\nway.\n\n * api/lambda/hello.ts -> $BASENAME/hello\n * api/lambda/user/list.ts -> $BASENAME/user/list\n\n\nDynamic Routing#\n\nThe routing system supports generating dynamic routes through file directories\nnamed with [].\n\n * api/lambda/user/[username]/info.ts -> $BASENAME/user/:username/info\n * api/lambda/user/[username]/delete.ts -> $BASENAME/user/:username/delete\n * api/lambda/article/[id]/info.ts -> $BASENAME/article/:id/info\n\nThe $BASENAME can be configured in modern.config.js, and the default value is\n/api.\n\n\nAllow List#\n\nBy default, all files in the lambda directory are parsed as BFF function files,\nbut we also set up a whitelist so that these files are not parsed:\n\n * Files named starting with _. For example: _utils.ts.\n * All files in a folder named starting with _. For example: _utils/index.ts,\n   _utils/cp.ts.\n * Test files. For example: foo.test.ts.\n * TypeScript type files. For example: hello.d.ts.\n * Files under node_module.\n\n\nFunction Definition#\n\nCompletely consistent with the Function Definition under the function mode.","frontmatter":{"title":"lambda/*.[tj]s","sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/api/lambda.mdx","_relativePath":"en/apis/app/hooks/api/lambda.mdx"},{"id":4,"title":"test.[tj]s","routePath":"/en/apis/app/hooks/api/test","lang":"en","toc":[],"domain":"","content":"#\n\nApp's BFF test file, support for writing test cases in the api/ directory which\nfile with suffix .test.[tj]s.\n\nINFO\n\nTo use unit test and integration test, you need to execute the new command in\nadvance to enable the unit test/integration test.","frontmatter":{"title":"test.[tj]s","sidebar_position":4},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/api/test.mdx","_relativePath":"en/apis/app/hooks/api/test.mdx"},{"id":5,"title":"html/","routePath":"/en/apis/app/hooks/config/html","lang":"en","toc":[],"domain":"","content":"#\n\nYou can inject custom HTML fragments at different locations of the default\ninternal HTML template through the config/html directory.\n\nFor specific usage, please refer to: Custom HTML.","frontmatter":{"title":"html/","sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/config/html.mdx","_relativePath":"en/apis/app/hooks/config/html.mdx"},{"id":6,"title":"icon/","routePath":"/en/apis/app/hooks/config/icon","lang":"en","toc":[{"text":"Favicon","id":"favicon","depth":2,"charIndex":3},{"text":"Order","id":"order","depth":3,"charIndex":349},{"text":"Apple Touch Icon","id":"apple-touch-icon","depth":2,"charIndex":515},{"text":"Order","id":"order-1","depth":3,"charIndex":883}],"domain":"","content":"#\n\n\nFavicon#\n\nWhen there is a favicon.* file in the config directory at the root of the\nproject, Modern.js will automatically set the file to the html.favicon\nconfiguration item for generating the favicon icon on the page:\n\n./config\n└── favicon.ico\n\n\nAfter the build is completed, you can see the following tags automatically\ngenerated in HTML:\n\n\n\n\n\nOrder#\n\nWhen setting up the favicon, Modern.js looks for files in the following order:\n\n * favicon.png\n * favicon.jpg\n * favicon.jpeg\n * favicon.svg\n * favicon.ico\n\n\nApple Touch Icon#\n\nWhen there is an icon.* file in the config directory at the root of the project,\nModern.js will automatically set the file to the html.appIcon configuration item\nfor generating the Apple Touch Icon icon under the iOS system.\n\n./config\n└── icon.png\n\n\nAfter the build is completed, you can see the following tags automatically\ngenerated in HTML:\n\n\n\n\n\nOrder#\n\nWhen setting up the app icon, Modern.js looks for files in the following order:\n\n * icon.png\n * icon.jpg\n * icon.jpeg\n * icon.svg\n * icon.ico","frontmatter":{"title":"icon/","sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/config/icon.mdx","_relativePath":"en/apis/app/hooks/config/icon.mdx"},{"id":7,"title":"mock/","routePath":"/en/apis/app/hooks/config/mock","lang":"en","toc":[],"domain":"","content":"#\n\nWhen there is a config/mock/index.js file in the project directory, Modern.js\nwill automatically enable the Mock service during development.","frontmatter":{"title":"mock/","sidebar_position":5},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/config/mock.mdx","_relativePath":"en/apis/app/hooks/config/mock.mdx"},{"id":8,"title":"public/","routePath":"/en/apis/app/hooks/config/public","lang":"en","toc":[{"text":"Description","id":"description","depth":2,"charIndex":156},{"text":"Scenarios","id":"scenarios","depth":2,"charIndex":449},{"text":"Code Compression","id":"code-compression","depth":2,"charIndex":829}],"domain":"","content":"#\n\nAny static resource files can be placed in the public/ directory, and the files\nwill be deployed to the corresponding application domain by the server.\n\n\nDescription#\n\nThe file routing is based on the convention of the directory structure, where\npublic/ is the root directory corresponding to the root path of the Web\napplication.\n\nFor example, the config/public/sdk/index.js file will be deployed under\n${domain}/sdk/index.js after deployment.\n\n\nScenarios#\n\nFor example, authentication files required by third-party systems such as\nrobots.txt and auth.xml.\n\nOr SDKs for other business parties (requiring unchanged routing), or HTML files\nwithout entry.\n\nINFO\n\nFor static resources (such as SVG images) that need to be imported through\nimport in the source code, it is recommended to manage them in the src/assets\ndirectory.\n\n\nCode Compression#\n\nIf the file in the directory is a .js file, it will be automatically compressed\nduring production environment construction.\n\nIf the file ends with .min.js, it will not be compressed.","frontmatter":{"title":"public/","sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/config/public.mdx","_relativePath":"en/apis/app/hooks/config/public.mdx"},{"id":9,"title":"storybook/","routePath":"/en/apis/app/hooks/config/storybook","lang":"en","toc":[],"domain":"","content":"#\n\nModern.js supports debugging using Storybook. When configuring Storybook, you\nneed to configure it in the config/storybook directory of the project.\n\nPlease refer to Storybook Configuration for Storybook configuration.\n\nINFO\n\nEnabling the Visual Testing (Storybook) mode function requires running the new\ncommand to enable it under the project first.","frontmatter":{"title":"storybook/","sidebar_position":7},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/config/storybook.mdx","_relativePath":"en/apis/app/hooks/config/storybook.mdx"},{"id":10,"title":"upload/","routePath":"/en/apis/app/hooks/config/upload","lang":"en","toc":[{"text":"Description","id":"description","depth":2,"charIndex":70},{"text":"Scenarios","id":"scenarios","depth":2,"charIndex":422},{"text":"Code Compression","id":"code-compression","depth":2,"charIndex":576},{"text":"More Usage","id":"more-usage","depth":2,"charIndex":780}],"domain":"","content":"#\n\nAny static resource files can be placed in the upload/ directory.\n\n\nDescription#\n\nIn the development environment, the static resource files in this directory will\nbe hosted under the /upload path. After building the application, the files in\nthis directory will be copied to the dist directory.\n\nThis file convention is mainly used for developers to use plugins to proactively\nupload static resource files to the CDN.\n\n\nScenarios#\n\nFor example, SDKs for project use only, such as google-analysis.js (usually\nrequires HTTP caching).\n\nPictures, font files, common CSS, etc.\n\n\nCode Compression#\n\nIf the file in the directory is a .js file, it will be automatically compressed\nduring production environment construction.\n\nIf the file ends with .min.js, it will not be compressed.\n\n\nMore Usage#\n\nIn React components, you can add this prefix through Environment Variables:\n\nexport default () => {\n  return (\n    \n  );\n};\n\n\nIn addition, whether it is in Custom HTML or any HTML file under config/public/,\nyou can directly use HTML tags to reference resources in the config/upload/\ndirectory:\n\n\n\n\nIf you set the dev.assetPrefix or output.assetPrefix prefix, you can also use\ntemplate syntax to add the prefix directly:\n\n\n\n\nINFO\n\nModern.js does not support using files under config/upload/ through URLs in\nconfig/public/*.css (such as background-image).","frontmatter":{"title":"upload/","sidebar_position":4},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/config/upload.mdx","_relativePath":"en/apis/app/hooks/config/upload.mdx"},{"id":11,"title":"modern.config.[tj]s","routePath":"/en/apis/app/hooks/modern-config","lang":"en","toc":[],"domain":"","content":"#\n\nThe Modern.js configuration file. Through this file, you can personalize the\nconfiguration of various aspects of the current project.\n\nTo learn more about how to use the configuration, please refer to Configuration\nUsage.","frontmatter":{"title":"modern.config.[tj]s","sidebar_position":8},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/modern-config.mdx","_relativePath":"en/apis/app/hooks/modern-config.mdx"},{"id":12,"title":"index.[tj]s","routePath":"/en/apis/app/hooks/server/index_","lang":"en","toc":[],"domain":"","content":"#\n\nA file that extends the Modern.js Web Server. You can add Hooks or Middleware to\nthe Web Server started by the application project in this file.\n\nYou can intercept and process requests and responses, perform authentication and\nrole verification, preprocess requests, and catch exceptions. You can also\ninsert specific business logic into the built-in processing logic (including\nroute matching, resource addressing, header injection, page rendering, and\nstatic web hosting).","frontmatter":{"title":"index.[tj]s","sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/server/index_.mdx","_relativePath":"en/apis/app/hooks/server/index_.mdx"},{"id":13,"title":"test.[tj]s","routePath":"/en/apis/app/hooks/server/test","lang":"en","toc":[],"domain":"","content":"#\n\nCustom Web Server test directory.\n\nThe application supports testing custom Web Server. You can directly create\nfiles with the suffix .test.[tj]s under the server/ directory of the project to\nwrite test cases.\n\nINFO\n\nEnabling unit testing and integration testing requires running the new command\nto enable the \"Unit Testing/Integration Testing\" function under the project\nfirst.","frontmatter":{"title":"test.[tj]s","sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/server/test.mdx","_relativePath":"en/apis/app/hooks/server/test.mdx"},{"id":14,"title":"shared/","routePath":"/en/apis/app/hooks/shared","lang":"en","toc":[],"domain":"","content":"#\n\nShared source code directory. When there is common code in api/, server/, and\nsrc/ in the project, you can put these codes in the shared directory instead of\ndirectly referencing them.","frontmatter":{"title":"shared/","sidebar_position":5},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/shared.mdx","_relativePath":"en/apis/app/hooks/shared.mdx"},{"id":15,"title":"App.[tj]sx","routePath":"/en/apis/app/hooks/src/app","lang":"en","toc":[],"domain":"","content":"#\n\nThe identifier for the entry points when the application uses Self-controlled\nRouting.\n\nApp.[tj]sx is not the actual entry. Modern.js will generate the real entry for\napplication. The content is roughly as follows:\n\n\n\n\n// App.[jt]sx\n\n// runtime plugin\n\n\nconst IS_BROWSER = typeof window !== 'undefined' && window.name !== 'nodejs';\nconst MOUNT_ID = 'root';\n\nlet AppWrapper = null;\n\nfunction render() {\n  AppWrapper = createApp({\n    plugins: [\n     router({...{\"serverBase\":[\"/\"]}, ...App.config?.router}),\n    ]\n  })(App)\n  if (IS_BROWSER) {\n    bootstrap(AppWrapper, MOUNT_ID, null, ReactDOM);\n  }\n  return AppWrapper\n}\n\nAppWrapper = render();\nexport default AppWrapper;\n\n\nNOTE\n\nIn the multi-entry scenario, each entry can have its own App.[jt]sx. See Entries\nfor details.","frontmatter":{"title":"App.[tj]sx","sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/src/app.mdx","_relativePath":"en/apis/app/hooks/src/app.mdx"},{"id":16,"title":"index.[tj]s","routePath":"/en/apis/app/hooks/src/index_","lang":"en","toc":[{"text":"Add custom behavior before bootstrap","id":"add-custom-behavior-before-bootstrap","depth":2,"charIndex":338},{"text":"Completely take over the webpack entry","id":"completely-take-over-the-webpack-entry","depth":2,"charIndex":517}],"domain":"","content":"#\n\nThe identifier for the entry point when the application uses custom bootstrap.\n\nIn general, the App.[tj]sx hook file can already meet our needs. When we need to\nadd custom behavior before bootstrap or completely take over the webpack\npackaging entry, we can place index.[tj]s in the src or entry directory. There\nare two cases below:\n\n\nAdd custom behavior before bootstrap#\n\nJust export a function in src/index.[tj]s:\n\n\n\nexport default App => {\n  // do something before bootstrap...\n  bootstrap(App, 'root');\n};\n\n\n\nCompletely take over the webpack entry#\n\nWhen there is no default export function in src/index.[tj]sx?, the file is the\nreal webpack packaging entry file and the code can be organized directly as\nusing create-react-app and other scaffolding tools:\n\n\n\n\n\nReactDOM.render(, document.getElementById('root'));\n","frontmatter":{"title":"index.[tj]s","sidebar_position":4},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/src/index_.mdx","_relativePath":"en/apis/app/hooks/src/index_.mdx"},{"id":17,"title":"pages/","routePath":"/en/apis/app/hooks/src/pages","lang":"en","toc":[{"text":"Dynamic Routing","id":"dynamic-routing","depth":3,"charIndex":1273},{"text":"Global Layout","id":"global-layout","depth":3,"charIndex":2140},{"text":"Partial Layout","id":"partial-layout","depth":3,"charIndex":3106},{"text":"404 Route","id":"404-route","depth":3,"charIndex":3990}],"domain":"","content":"#\n\nThe identifier for the entry point when the application uses the Pages entry\ntype.\n\nINFO\n\nCompatible with Modern.js 1.0 Pages entry. It is recommended to use conventional\nrouting.\n\nWhen the project structure is of the Pages entry type, the client-side routing\nconfiguration will be obtained by analyzing the files in the src/pages\ndirectory.\n\nFor example, the following directory structure:\n\n.\n└── src\n    └── pages\n        ├── about\n        │   └── index.jsx\n        ├── index.jsx\n        └── info.jsx\n\n\nThe corresponding generated routing configuration is:\n\n[\n  { path: '/', component: 'pages/index.jsx' },\n  { path: '/info' component: 'pages/info.jsx' },\n  { path: '/about', component: 'pages/about/index.jsx' }\n]\n\n\nFiles under the pages directory that meet the following conditions will not be\ntreated as routing files:\n\n * Files whose suffix is not .(j|t)sx?.\n * .d.ts type definition files.\n * Test files ending in .test.(j|t)sx? or .spec.(j|t)sx? or .e2e.(j|t)sx?.\n\nTIP\n\nIt is recommended to only write entry code in the pages directory and write\nbusiness logic in the independent features directory outside the pages\ndirectory. In this way, most of the files under the pages directory will be\nrouting files, and there is no need for additional filtering rules.\n\n\nDynamic Routing#\n\nIf the directory name of the route file is named with [], the generated route\nwill be used as a dynamic route.\n\nFor example, the following directory structure:\n\n.\n└── src\n    └── pages\n        ├── [post]\n        │   ├── detail.jsx\n        │   └── index.js\n        ├── users\n        │   └── [id].jsx\n        ├── index.jsx\n        └── info.jsx\n\n\nThe corresponding generated routing configuration is:\n\n[\n  { path: '/', component: 'pages/index.jsx' },\n  { path: '/info', component: 'pages/info.jsx' },\n  { path: '/:post/', component: 'pages/[post]/index.js' },\n  { path: '/:post/detail' components: 'pages/[post]/detail.jsx'},\n  { path: '/users/:id', components: 'pages/users/[id].jsx'}\n]\n\n\nOn the basis of dynamic routing, special routing suffixes (*, ?, +) can be\nadded.\n\nFor example: src/pages/users/[id]*.tsx will result in the route /users/:id*.\n\n\nGlobal Layout#\n\nWhen the entire application needs a global layout, it can be achieved through\npages/_app.tsx. The specific writing method is as follows:\n\n\n\n\nexport const App = ({Component, ...pageProps}:{ Component: React.ComponentType}) => {\n  return (\n    \n      \n    \n  );\n}\n\n\nThe above Component is the component matched when accessing a specific route.\n\nFor example, the following directory structure:\n\n.\n└── pages\n    ├── a\n    │   ├── b\n    │   │   └── index.js\n    │   └── index.js\n    └── index.js\n\n\n * Accessing / corresponds to the Component component in pages/index.js.\n * Accessing /a corresponds to the Component component in pages/a/index.js.\n * Accessing /a/b corresponds to the Component component in pages/a/b/index.js.\n\nAdvantages of global layout\n * Preserve the state of the global layout when the page changes.\n * Add global styles.\n * ComponentDidCatch error handling.\n * Use defineConfig to dynamically configure the runtime configuration.\n\n\nPartial Layout#\n\nWhen developing an application, there are scenarios where sub-routes under the\nsame route share a layout.\n\nFor this scenario, Modern.js conventionally has a similar effect to global\nlayout when there is _layout.js under the directory.\n\nFor example, the following directory structure:\n\n└── pages\n    ├── a\n    │   ├── b\n    │   │   └── index.js\n    │   ├── _layout.js\n    │   └── index.js\n    └── index.js\n\n\n\n\nconst ALayout = ({ Component, ...pageProps }) => {\n  return ;\n};\nexport default ALayout;\n\n\nThe Component parameter is the component corresponding to a specific accessed\nroute, for example:\n\n * Accessing /a corresponds to the Component component in pages/a/index.js.\n * Accessing /a/b corresponds to the Component component in pages/a/b/index.js.\n\nIn this way, pages/a/_layout.js can be used to meet the layout needs of shared\nroutes under the a directory.\n\n\n404 Route#\n\npages/404.[tj]sx is conventionally the default 404 route.\n\nFor example, the following directory structure:\n\n.\n└── src\n    └── pages\n        ├── user.js\n        ├── home.js\n        ├── 404.js\n\n\nThe generated routing configuration is as follows:\n\n[\n { path: '/user', component: './pages/user.js'},\n { path: '/home', component: './pages/home.js' },\n { path: '*', component: './pages/404.js'}\n]\n\n\nAll unmatched routes will be matched to pages/404.[tj]s.","frontmatter":{"title":"pages/","sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/src/pages.mdx","_relativePath":"en/apis/app/hooks/src/pages.mdx"},{"id":18,"title":"routes/","routePath":"/en/apis/app/hooks/src/routes","lang":"en","toc":[{"text":"Basic Example","id":"basic-example","depth":2,"charIndex":462},{"text":"Dynamic Routing","id":"dynamic-routing","depth":2,"charIndex":864},{"text":"Layout Component","id":"layout-component","depth":2,"charIndex":1596}],"domain":"","content":"#\n\nThe identifier for the entry point when the application uses Conventional\nRouting.\n\nConventional routing uses routes/ as the convention for the entry point and\nanalyzes the files in the src/routes directory to obtain the client-side routing\nconfiguration.\n\nAny layout.[tj]sx and page.[tj]sx under src/routes will be used as the\napplication's routes:\n\n.\n└── routes\n    ├── layout.tsx\n    ├── page.tsx\n    └── user\n        ├── layout.tsx\n        └── page.tsx\n\n\n\nBasic Example#\n\nThe directory name under routes will be used as the mapping of the route URL.\nlayout.tsx is used as the layout component and page.tsx is used as the content\ncomponent in the routing. They are the leaf nodes of the entire route. For\nexample, the following directory structure:\n\n.\n└── routes\n    ├── page.tsx\n    └── user\n        └── page.tsx\n\n\nwill generate two routes:\n\n * /\n * /user\n\n\nDynamic Routing#\n\nIf the directory name of the route file is named with [], the generated route\nwill be used as a dynamic route. For example, the following file directory:\n\n└── routes\n    ├── [id]\n    │   └── page.tsx\n    ├── blog\n    │   └── page.tsx\n    └── page.tsx\n\n\nThe routes/[id]/page.tsx file will be converted to the /:id route. Except for\nthe /blog route that can be matched exactly, all other /xxx routes will be\nmatched to this route.\n\nIn the component, you can use useParams to obtain the corresponding named\nparameter.\n\nWhen using the loader function to obtain data, params will be passed as an input\nparameter to the loader function, and the corresponding parameter can be\nobtained through the attribute of params.\n\n\nLayout Component#\n\nIn the following example, a common layout component can be added to all route\ncomponents by adding layout.tsx:\n\n.\n└── routes\n    ├── layout.tsx\n    ├── page.tsx\n    └── user\n        ├── layout.tsx\n        └── page.tsx\n\n\nIn the layout component, you can use to represent the child components:\n\n\n\nexport default () => {\n  return (\n    <>\n      \n    </>\n  );\n};\n\n\nNOTE\n\nis a new API in React Router 6. For details, see Outlet.","frontmatter":{"title":"routes/","sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/src/routes.mdx","_relativePath":"en/apis/app/hooks/src/routes.mdx"},{"id":19,"title":"*.[server|node].[tj]sx","routePath":"/en/apis/app/hooks/src/server","lang":"en","toc":[],"domain":"","content":"#\n\nUsed in the application project to place server-side code. When *.tsx and\n*.[server|node].tsx coexist, SSR will prefer to use the *.[server|node].tsx file\ninstead of the *.tsx file when rendering on the server.","frontmatter":{"title":"*.[server|node].[tj]sx","sidebar_position":8},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/src/server.mdx","_relativePath":"en/apis/app/hooks/src/server.mdx"},{"id":20,"title":"**/*.stories.[tj]sx","routePath":"/en/apis/app/hooks/src/stories","lang":"en","toc":[],"domain":"","content":"#\n\nApplication project Storybook files.\n\nYou can create files in the *.stories.[tj]sx format in the project source code\ndirectory src/ as Storybook files.\n\nRun the npm run dev story command in the project to use these files to debug\nrelevant content in Storybook.\n\nINFO\n\nTo use Storybook, you need to enable the \"Visual Testing (Storybook)\" mode by\nrunning the new command in the project first.","frontmatter":{"title":"**/*.stories.[tj]sx","sidebar_position":7},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/src/stories.mdx","_relativePath":"en/apis/app/hooks/src/stories.mdx"},{"id":21,"title":"**/*.test.[tj]sx?","routePath":"/en/apis/app/hooks/src/test","lang":"en","toc":[],"domain":"","content":"#\n\nApplication project test files.\n\nThe application project supports creating files with the suffix .test.[tj]sx? in\nthe project source code directory (src) to write test cases.\n\nINFO\n\nTo use unit testing and integration testing, you need to enable the \"Unit\nTesting / Integration Testing\" feature by running the new command in the project\nfirst.","frontmatter":{"title":"**/*.test.[tj]sx?","sidebar_position":6},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/hooks/src/test.mdx","_relativePath":"en/apis/app/hooks/src/test.mdx"},{"id":22,"title":"defineConfig","routePath":"/en/apis/app/runtime/app/define-config","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":63},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":580},{"text":"Input","id":"input","depth":3,"charIndex":651},{"text":"Example","id":"example","depth":2,"charIndex":722}],"domain":"","content":"#\n\nFor dynamically configuring applications runtime features.\n\n\nUsage#\n\n\n\n\nRuntime configurations can usually be configured under the runtime of the\nmodern.config.js, such as the router configuration.\n\nThe configuration in modern.config.js is determined at build time, If some\nconfiguration parameters are obtained at runtime, or if the configuration\nparameters are from a module (such as a component), then need use defineConfig\nAPI configuration on runtime.\n\nINFO\n\n@modern-js/app-tools has the same name API, Used to provide TS type for\nconfiguration, please distinguish them.\n\n\nFunction Signature#\n\nfunction defineConfig(Component, config): any;\n\n\n\nInput#\n\n * Component: App root Component.\n * config: runtime config.\n\n\nExample#\n\nfunction App () {\n  ...\n}\n\ndefineConfig(App, {\n  router: {\n    supportHtml5History: false\n  }\n})\n\n\n 1. defineConfig can configuring runtime.state、runtime.router etc.\n\n 2. defineConfig before configuring a property, such as router, you need to make\n    sure that the modern.config.js has been configured to enable this feature.\n\n 3. defineConfig incoming configuration will be merged with the configuration in\n    modern.config.js. Taking router as an example, the final application\n    configuration is as follows:\n\n{\n  // 来自 `modern.config.js`\n  ...runtime.router\n  // 来自 `defineConfig`\n  ...config.router\n}\n","frontmatter":{"title":"defineConfig"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/app/define-config.mdx","_relativePath":"en/apis/app/runtime/app/define-config.mdx"},{"id":23,"title":"hook","routePath":"/en/apis/app/runtime/bff/hook","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":111},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":207},{"text":"Input","id":"input","depth":3,"charIndex":335},{"text":"Example","id":"example","depth":2,"charIndex":442}],"domain":"","content":"#\n\nUsed to add framework middleware under BFF function mode, the middleware will\nexecute before BFF function.\n\n\nUsage#\n\naccording to the framework extend plugin, export from the corresponding\nnamespace:\n\n\n\n\n\nFunction Signature#\n\ntype HookOptions = {\n  addMiddleware: string | function;\n};\n\nfunction hook(options: HookOptions): void;\n\n\n\nInput#\n\n * options: a range of hooks provided by Modern.js.\n   * addMiddleware: add middlewares for BFF.\n\n\nExample#\n\nmiddleware for different frameworks should be different(an example is when using\nthe koa framework):\n\n\n\nexport default hook(({ addMiddleware }) => {\n  addMiddleware(async (ctx, next) => {\n    ctx.req.query.id = 'koa';\n    await next();\n  });\n});\n","frontmatter":{"title":"hook"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/bff/hook.mdx","_relativePath":"en/apis/app/runtime/bff/hook.mdx"},{"id":24,"title":"useContext","routePath":"/en/apis/app/runtime/bff/use-context","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":57},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":153},{"text":"Example","id":"example","depth":2,"charIndex":203}],"domain":"","content":"#\n\nUsed to get the request context in the BFF function.\n\n\nUsage#\n\naccording to the framework extend plugin, export from the corresponding\nnamespace:\n\n\n\n\n\nFunction Signature#\n\nfunction useContext(): any\n\n\nExample#\n\nDevelopers can get more request information through context, such as browser\nUA(an example is when using the koa framework):\n\n\n\nexport async function get() {\n  const ctx = useContext();\n  return ctx.req.headers['user-agent'];\n}\n\n\nCAUTION\n\nonly in BFF function, useContext API can be used.\n\nAlthough the useContext API is supported in any framework extend plugin, the\ntypes of return values are different.","frontmatter":{"title":"useContext"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/bff/use-context.mdx","_relativePath":"en/apis/app/runtime/bff/use-context.mdx"},{"id":25,"title":"bootstrap","routePath":"/en/apis/app/runtime/core/bootstrap","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":118},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":177},{"text":"Input","id":"input","depth":3,"charIndex":462},{"text":"Example","id":"example","depth":2,"charIndex":828}],"domain":"","content":"#\n\nUsed to start and mount App, usually without manual calls. This API is only\nrequired when using Custom Bootstrap.\n\n\nUsage#\n\n\n\n\nbootstrap(App, 'root', undefined, ReactDOM);\n\n\n\nFunction Signature#\n\ntype BootStrap = (\n  App: React.ComponentType,\n  id: string | HTMLElement | RuntimeContext,\n  root?: any,\n  ReactDOM?: {\n    render?: Renderer;\n    hydrate?: Renderer;\n    createRoot?: typeof createRoot;\n    hydrateRoot?: typeof hydrateRoot;\n  },\n) => Promise;\n\n\n\nInput#\n\n * AppComponent: reactElement instance created by createApp.\n * rootId: DOM root element id to mount, like \"root\".\n * root: ReactDOM.create the return value, which is used in the scenario where\n   the root needs to destroy the component outside the bootstrap function.\n * ReactDOM: ReactDOM object for distinguishing between React 18 and React 17\n   APIs.\n\n\nExample#\n\n\n\n\nfunction App() {\n  return \nHello Modern.js;\n}\n\nconst WrappedApp = createApp({\n  // customized plugin\n  plugins: [customPlugin()],\n})(App);\n\nbootstrap(WrappedApp, 'root', undefined, ReactDOM);\n\n\nINFO\n\nsince @modern-js/runtime/plugins is a alias, when used in a ts project, its type\nneeds to be declared, Just add the following type declarations to\nsrc/modern-app-env.d.ts:\n\ndeclare module '@modern-js/runtime/plugins';\n\n\nWARNING\n\nbootstrap only supported for use in CSR.","frontmatter":{"title":"bootstrap"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/core/bootstrap.mdx","_relativePath":"en/apis/app/runtime/core/bootstrap.mdx"},{"id":26,"title":"createApp","routePath":"/en/apis/app/runtime/core/create-app","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":108},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":120},{"text":"Input","id":"input","depth":3,"charIndex":219},{"text":"Example","id":"example","depth":2,"charIndex":305},{"text":"Create Custom Entry","id":"create-custom-entry","depth":3,"charIndex":316},{"text":"Custom Plugins","id":"custom-plugins","depth":3,"charIndex":368}],"domain":"","content":"#\n\nUsed to create custom entries, custom runtime plugins. This API is only required\nwhen using Custom App.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\n\n\nfunction createApp(options: { plugins: Plugin[] }): React.ComponentType;\n\n\n\nInput#\n\n * options: optional configuration.\n   * plugins: custom plugin extensions.\n\n\nExample#\n\n\nCreate Custom Entry#\n\nFor details, see bootstrap.\n\n\nCustom Plugins#\n\n\n\nfunction App() {\n  return \napp;\n}\n\nexport default createApp({\n  plugins: [customPlugin()],\n})(App);\n","frontmatter":{"title":"createApp"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/core/create-app.mdx","_relativePath":"en/apis/app/runtime/core/create-app.mdx"},{"id":27,"title":"useLoader","routePath":"/en/apis/app/runtime/core/use-loader","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":270},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":282},{"text":"Input","id":"input","depth":3,"charIndex":803},{"text":"Return Value","id":"return-value","depth":3,"charIndex":1341},{"text":"Example","id":"example","depth":2,"charIndex":1813}],"domain":"","content":"#\n\nIsomorphic API, usually used to make asynchronous requests. When SSR, the server\nlevel uses useLoader to prefetch the data, and the browser side also reuses this\npart of the data.\n\nTIP\n\nWhen using Rspack as the bundler, the useLoader API is not currently supported.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\ntype LoaderFn = (context: runtimeContext) => Promise;\ntype Options = {\n  onSuccess: (data: Record) => void;\n  onError: (error: Error) => void;\n  initialData: Record;\n  skip: boolean;\n  params: Record;\n  static: boolean;\n};\ntype ReturnData = {\n  data: Record;\n  loading: boolean;\n  error: Error;\n  reload: (params?: Record) => Promise | undefined;\n  reloading: boolean;\n};\n\nfunction useLoader(loaderFn: LoaderFn, options: Options): ReturnData;\n\n\nINFO\n\nruntimeContext can refer to useRuntimeContext.\n\n\nInput#\n\n * loaderFn: function for loading data, returning a Promise.\n * options: optional configuration.\n   * onSuccess: successful callback.\n   * onError: error callback.\n   * initialData: the initial data before the first execution,.\n   * skip: when the value is true, the function does not execute.\n   * params: when the result of the params serialization changes, the function\n     is re-executed. params is also passed in as the second argument of the\n     function.\n   * static: when the value is true, useLoader is used for SSG.\n\n\nReturn Value#\n\n * data: return data on successful execution.\n * loading: indicates whether the function is in execution.\n * error: error message when function execution fails.\n * reload: the function can be re-executed after the call.\n   * params: when the value is undefined, the last value will be reused;\n     otherwise, the function will be re-executed with the new value.\n * reloading: during the execution of the call to reload, the value of reloading\n   is true.\n\n\nExample#\n\nfunction Container() {\n  const { data, error, loading } = useLoader(\n    async (context, params) => {\n      console.log(params) // nicole\n      return fetch(user);\n    },\n    {\n      onSuccess: data => {\n        console.log('I did success:(',  data);\n      },\n      onError: error => {\n        console.log('I met error:)',  error);\n      },\n      initialData: { name: 'nicole', gender: 'female' },\n      params: 'nicole'\n    }\n  );\n\n  return ...;\n}\n","frontmatter":{"title":"useLoader"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/core/use-loader.mdx","_relativePath":"en/apis/app/runtime/core/use-loader.mdx"},{"id":28,"title":"useModuleApps","routePath":"/en/apis/app/runtime/core/use-module-apps","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":104},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":116},{"text":"Example","id":"example","depth":2,"charIndex":231},{"text":"Centralized Routing","id":"centralized-routing","depth":3,"charIndex":1135},{"text":"Load Animation","id":"load-animation","depth":2,"charIndex":2309}],"domain":"","content":"#\n\nReturns the React components of all micro-front-end sub-applications for freely\ncontrolled routing.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\nfunction useModuleApps(): Record>\n\nReturns the React components wrapped around each subapp.\n\n\nExample#\n\nYou need to configure the micro-front-end sub-application information first.\n\n\n\n\nexport default defineConfig({\n  runtime: {\n    router: true,\n    state: true,\n    masterApp: true,\n  },\n  plugins: [appTools(), garfishPlugin()],\n});\n\n\nfunction App() {\n  const { Home, Contact } = useModuleApps();\n\n  return (\n    \n\n      Master APP\n      \n        \n      \n      \n        \n      \n    \n  );\n}\n\ndefineConfig(App, {\n  masterApp: {\n    apps: [\n      {\n        // name is case-sensitive, what name provides is what useModuleApps returns\n        name: 'Home',\n        entry: 'http://127.0.0.1:8081/',\n      },\n      {\n        name: 'Contact',\n        entry: 'http://localhost:8082',\n      },\n    ],\n  },\n});\n\n\nGet the Home and Contact sub-application components(the same as name in the\nconfig) through useModuleApps(). After that, you can load the child application\njust like a normal React component.\n\n\nCentralized Routing#\n\nCentralized Routing is a way to centrally configure the activation routes of\nsub-applications. Add activeWhen config to enable Centralized Routing.\n\n\n\ndefineConfig(App, {\n  masterApp: {\n    apps: [\n      {\n        name: 'DashBoard',\n        entry: 'http://127.0.0.1:8081/',\n      },\n      {\n        name: 'TableList',\n        entry: 'http://localhost:8082',\n      },\n    ],\n  },\n});\n\n\nThen use the useModuleApp method to get the MApp component in the main\napplication, and render the MApp in the main application.\n\n\n\nfunction App() {\n  const { MApp } = useModuleApps();\n\n  return (\n    \n\n      \n    \n  );\n}\n\ndefineConfig(App, {\n  masterApp: {\n    apps: [\n      {\n        // name is case sensitive, what name provides is what useModuleApps returns\n        name: 'Dashboard',\n        activeWhen: '/dashboard',\n        entry: 'http://127.0.0.1:8081/',\n      },\n      {\n        name: 'TableList',\n        activeWhen: '/table',\n        entry: 'http://localhost:8082',\n      },\n    ],\n  },\n});\n\n\nAfter starting the application in this way, accessing the /dashboard route will\nrender the Dashboard, and accessing the /table route will render the TableList.\n\n\nLoad Animation#\n\nThe transition animation of the component loading process can be customized in\nthe following ways.\n\nfunction App() {\n  const {\n    Components: { Home },\n  } = useModuleApps();\n\n  return (\n    \n\n      Master APP\n      \n         {\n              if (error) {\n                console.error(error);\n                return \nerror: {error?.message};\n              } else if (pastDelay) {\n                return \nloading;\n              } else {\n                return null;\n              }\n            },\n          }}\n        />\n      \n    \n  );\n}\n","frontmatter":{"title":"useModuleApps"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/core/use-module-apps.mdx","_relativePath":"en/apis/app/runtime/core/use-module-apps.mdx"},{"id":29,"title":"useRuntimeContext","routePath":"/en/apis/app/runtime/core/use-runtime-context","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":105},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":213},{"text":"Return Value","id":"return-value","depth":3,"charIndex":489},{"text":"Example","id":"example","depth":2,"charIndex":1201}],"domain":"","content":"#\n\nThis function is mainly used to get the runtime context and can only be used in\nfunction components.\n\n\nUsage#\n\n\n\nexport function App() {\n  const runtimeContext = useRuntimeContext();\n  return \nHello World;\n}\n\n\n\nFunction Signature#\n\ntype RuntimeContext = {\n  request: {\n    params: Record;\n    pathname: string;\n    query: Record;\n    headers: IncomingHttpHeaders;\n    cookie: string;\n  };\n  store: ReduckStore;\n  router: RemixRouter;\n};\n\nfunction useRuntimeContext(): RuntimeContext;\n\n\n\nReturn Value#\n\n * request: additional information in the request context.\n   * params: dynamic parameters in the request path.\n   * pathname: the pathname of the request.\n   * query: the query of the request.\n   * headers: the header info of the request.\n   * cookie: the cookie of the request.\n * store: when the runtime.state is enabled, this value is the Reduck global\n   store.\n * router: When the runtime.router is enabled, this value exists.\n   * location: The current location reflected by the router. The same as\n     [useLocation] the return value of\n     (/apis/app/runtime/router/router.html#uselocation).\n   * navigate: Navigate to the given path. The same as the return value of\n     useNavigate.\n\n\nExample#\n\n\n\n\nfunction App() {\n  const { store } = useRuntimeContext();\n\n  const [state, actions] = store.use(fooModel);\n\n  return \nstate: {state};\n}\n","frontmatter":{"title":"useRuntimeContext"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/core/use-runtime-context.mdx","_relativePath":"en/apis/app/runtime/core/use-runtime-context.mdx"},{"id":30,"title":"Provider","routePath":"/en/apis/app/runtime/model/Provider","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":448},{"text":"Input","id":"input","depth":3,"charIndex":545},{"text":"Example","id":"example","depth":2,"charIndex":691}],"domain":"","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nProvider is a component that injects Reduck's Store into the application's\ncomponent tree, making the Model accessible to components inside the component\ntree. Normally, Provider is defined at the top level of the component tree.\n\n\nFunction Signature#\n\ninterface ProviderProps {\n  store?: ReduckStore;\n  config?: AppConfig;\n}\n\n\n\nInput#\n\n * store: the Store object created by createStore.\n * config: this config to create Reduck Store, same as config param in\n   createApp.\n\n\nExample#\n\nReactDOM.render(\n  \n    \n  ,\n  document.getElementById('root'),\n);\n","frontmatter":{"sidebar_position":8,"title":"Provider"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/model/Provider.mdx","_relativePath":"en/apis/app/runtime/model/Provider.mdx"},{"id":31,"title":"Auto actions","routePath":"/en/apis/app/runtime/model/auto-actions","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":386},{"text":"Basic Data Type","id":"basic-data-type","depth":3,"charIndex":397},{"text":"Array","id":"array","depth":3,"charIndex":793},{"text":"PlainObject","id":"plainobject","depth":3,"charIndex":2222}],"domain":"","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nReduck can automatically generate Actions according to the type of State, for\neasy to modify State.\n\nTIP\n\ncan use runtime.state.autoActions close auto actions feature.\n\n\nExample#\n\n\nBasic Data Type#\n\nState type in string、number、boolean、null, generate setState Action.\n\nconst fooModel = model('foo').define({\n  state: 1,\n});\n\nfunction App() {\n  const [state, actions] = useModel(fooModel);\n\n  return (\n    \n\n      \nState: {state}\n       {\n          // call auto generate setState Action\n          actions.setState(state + 1);\n        }}\n      >\n        add\n      \n    \n  );\n}\n\n\n\nArray#\n\nState type is Array, generate the following Actions:\n\n * push: adds one or more elements to the end of the array.\n * pop: removes the last element from the array.\n * shift: removes the first element from the array.\n * unshift: adds one or more elements to the beginning of the array.\n   * usage: arr.unshift(element1, ..., elementN)\n   * elementN: the element or elements to add to the beginning of the array.\n * filter: filter element.\n\n * concat: concat array.\n\n * splice: modify the array by deleting or replacing existing elements or adding\n   new elements in place, and return the modified array(Note that it is\n   different from the native splice return value).\n   * usage: splice(start[, deleteCount[, item1[, item2[, ...]]]])\n   * start: specifies the start position of the modification(counting from 0).\n   * deleteCount: an integer representing the number of array elements to\n     remove.\n   * item, item2, ...: The elements to add to the array, starting at the start\n     position. If not specified, splice will only delete array elements.\n\nconst fooModel = model('foo').define({\n  state: [1, 2, 3],\n});\n\nfunction App() {\n  const [state, actions] = useModel(fooModel);\n\n  useEffect(() => {\n    actions.push(4);\n    actions.pop();\n    actions.shift(0);\n    actions.unshift();\n    actions.filter(val => val <= 2);\n    actions.splice(0, 1, 1, 2);\n  }, []);\n\n  return (\n    \n\n      \nState: {state}\n    \n  );\n}\n\n\n\nPlainObject#\n\nState type is PlainObject, base on the names contained in State, generate\nset${key}(Camel-Case) Actions.\n\nconst fooModel = model('foo').define({\n  state: {\n    a: 1,\n    b: { value: 1 },\n    c: 'c',\n  },\n});\n\nfunction App() {\n  const [state, actions] = useModel(fooModel);\n\n  useEffect(() => {\n    actions.setA(2);\n    actions.setB({ value: 2 });\n    actions.setC('d');\n  }, []);\n\n  return (\n    \n\n      \nState: {state}\n    \n  );\n}\n","frontmatter":{"sidebar_position":6,"title":"Auto actions"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/model/auto-actions.mdx","_relativePath":"en/apis/app/runtime/model/auto-actions.mdx"},{"id":32,"title":"connect","routePath":"/en/apis/app/runtime/model/connect","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":497},{"text":"Input","id":"input","depth":3,"charIndex":885},{"text":"Return Type","id":"return-type","depth":3,"charIndex":2213},{"text":"Example","id":"example","depth":2,"charIndex":2335},{"text":"Basic","id":"basic","depth":3,"charIndex":2346},{"text":"Select State & Actions","id":"select-state-&-actions","depth":3,"charIndex":2945},{"text":"Forwarding Ref","id":"forwarding-ref","depth":3,"charIndex":3360}],"domain":"","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nTIP\n\nThe original type of Reduck is complex. The following type definition shows the\nsimplified type information. For the original type, see connect.\n\nConnect is the same as useModel and is the corresponding HOC-style API. It is\nrecommended to use the Hook-style useModel first.\n\n\nFunction Signature#\n\ntype SelectStateToProps = (\n  ...modelStates: State[],\n  ownProps?: any,\n) => PlainObject;\ntype SelectActionsToProps = (\n  ...modelActions: Actions[],\n  ownProps?: any,\n) => PlainObject;\n\nfunction connect(models: Model, options?: ConnectOptions);\nfunction connect(\n  models: [...Model[], SelectStateToProps?, SelectActionsToProps?],\n  options?: ConnectOptions,\n);\n\n\n\nInput#\n\n * models: passed one or more Models. When models is an array type parameter,\n   the last two params can be a function for filtering State (SelectStateToProps\n   type) and a function for filtering Actions (SelectActionsToProps type).\n   \n   * SelectStateToProps: modelStates is an array of the State of the passed\n     Model object, ownProps is the props received by current component. The data\n     returned by SelectStateToProps is passed to the props of the component.\n     When the SelectStateToProps parameter is not passed in models, the States\n     of all Models are merged and passed to the props of the component.\n   \n   * SelectActionsToProps: modelActions is an array of the Action of the passed\n     Model object, ownProps is the props received by current component. returned\n     by SelectActionsToProps is passed to the props of the component. When the\n     SelectActionsToProps parameter is not passed in models, the Action of all\n     Models are merged and passed to the props of the component.\n\n * options: Optional parameter for auxiliary configuration. Currently supports\n   setting forwardRef, which is used to control whether to forward the ref of\n   the component. The default value is false, which means that the ref is not\n   forwarded. Set to { forwardRef: true }, which means to forward ref.\n\n\nReturn Type#\n\nReturns a HOC: receives an component, returns a component with extra State and\nActions injected on props.\n\n\nExample#\n\n\nBasic#\n\nconst modelA = model('modelA').define({\n  state: {\n    a: 1,\n  },\n  actions: {\n    incA(state) {\n      return {\n        ...state,\n        a: state.a + 1,\n      };\n    },\n  },\n});\n\nconst modelB = model('modelB').define({\n  state: {\n    b: 10,\n  },\n  actions: {\n    incB(state) {\n      return {\n        ...state,\n        b: state.b + 1,\n      };\n    },\n  },\n});\n\nfunction Test(props) {\n  props.incA(); // call modelA's action\n  props.incB(); // call modelB's action\n\n  props.a; // get modelA's state: a\n  props.b; // get modelB's state: b\n}\n\nexport default connect([modelA, modelB])(Test);\n\n\n\nSelect State & Actions#\n\nfunction Test(props) {\n  props.incAll();\n  props.c;\n}\n\nconst stateSelector = (stateA, stateB) => ({\n  ...stateA,\n  ...stateB,\n  c: stateA.a + stateA.b,\n});\nconst actionsSelector = (actionsA, actionsB) => ({\n  ...actionsA,\n  ...actionsB,\n  incAll: () => {\n    actionsA.incA();\n    actionsB.incB();\n  },\n});\n\nexport default connect([modelA, modelB, stateSelector, actionsSelector])(Test);\n\n\n\nForwarding Ref#\n\n\n\nfunction Test(props, ref) {\n  const { a, b } = props;\n\n  return (\n    \n\n      {a}\n      {b}\n    \n  );\n}\n\nconst TestWrapper = connect([modelA, modelB], { forwardRef: true })(\n  forwardRef(Test),\n);\n\nfunction App() {\n  const testRef = useRef();\n\n  return ;\n}\n","frontmatter":{"sidebar_position":5,"title":"connect"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/model/connect.mdx","_relativePath":"en/apis/app/runtime/model/connect.mdx"},{"id":33,"title":"createApp","routePath":"/en/apis/app/runtime/model/create-app","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":678},{"text":"Input","id":"input","depth":3,"charIndex":859},{"text":"Return Value","id":"return-value","depth":3,"charIndex":1112},{"text":"Example","id":"example","depth":2,"charIndex":1595}],"domain":"","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nReduck will call createApp to create a global application by default. If the\nentire application only needs one Store, then there is no need to call createApp\nmanually.Only need to use createApp when you need to create a Store locally in\nthe app.\n\nCAUTION\n\nNote that the exported createApp in @modern-js/runtime/model is used to manage\nstate, while the exported createApp in @modern-js/runtime is used to create the\nentire application. The two are differently.\n\n\nFunction Signature#\n\ninterface AppConfig extends StoreConfig {\n  devTools?: boolean | DevToolsOptions;\n  autoActions?: boolean;\n}\n\nfunction createApp(config: AppConfig): object;\n\n\n\nInput#\n\n * config\n   * StoreConfig: the same as createStore params.\n   * devTools: the default value is true. when it is an object type, configuring\n     Options of Redux DevTools.\n   * autoActions: the default value is true.if auto generate Actions.\n\n\nReturn Value#\n\nReduck App, consists of the following properties:\n\n * Provider: inject shared Store into locally component tree, same as Provider.\n * useModel: get the Model mounted by the app's local Store, same as useModel.\n * useStaticModel: get the Model mounted by the app's local Store. same as\n   useStaticModel.\n * useLocalModel: get the Model mounted by the app's local Store. same as\n   useLocalModel.\n * useStore: get the Store used locally by the app. same as useStore.\n\n\nExample#\n\nuse createApp, local states can be created to isolate the states between\ndifferent Reduck applications.\n\nconst { Provider: LocalFooProvider, useModel: useLocalFooModel } = createApp();\nconst { Provider: LocalBarProvider, useModel: useLocalBarModel } = createApp();\n\nfunction Foo() {\n  const [fooState] = useLocalFooModel(fooModel);\n  const [barState] = useLocalBarModel(fooModel);\n\n  return (\n    \n\n      \nFoo: {fooState}\n      \nBar: {barState}\n    \n  );\n}\n\nfunction Container() {\n  return (\n    \n      \n        \n      \n    \n  );\n}\n","frontmatter":{"sidebar_position":11,"title":"createApp"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/model/create-app.mdx","_relativePath":"en/apis/app/runtime/model/create-app.mdx"},{"id":34,"title":"createStore","routePath":"/en/apis/app/runtime/model/create-store","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":565},{"text":"Input","id":"input","depth":3,"charIndex":906},{"text":"Return Value","id":"return-value","depth":3,"charIndex":1233},{"text":"Example","id":"example","depth":2,"charIndex":1517}],"domain":"","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\ncreateStore is used to create a Store. Reduck’s Store based on Redux's Store\nimplementatio. Used to store the state of the application and managing the state\nand Model.\n\nIn general, this API is only used when you need to have full control over the\ncreation of the Store. For example, to customize a Store, pass in the 'Provider'\ncomponent to use.\n\n\nFunction Signature#\n\ninterface StoreConfig {\n  initialState?: Record;\n  middlewares?: Middleware[];\n  models?: Model[];\n  plugins?: Plugin[];\n  enhancers?: StoreEnhancer[];\n}\n\ninterface ReduckStore extends ReduxStore {\n  use: typeof useModel;\n  unmount: (model: Model) => void;\n}\n\nfunction createStore(config?: StoreConfig): ReduckStore;\n\n\n\nInput#\n\n * config: store options.\n   * initialState: set the initial state for store.\n   * models: set the Model to mount to the Store in advance(No need for normal\n     use).\n   * middlewares: set Redux middleware.\n   * enhancers: set Redux Store enhancer.\n   * plugins: set Reduck plugin.experimental API, not recommended.\n\n\nReturn Value#\n\nReduck Store:\n\n * use: mount and fetch Model objects dynamically. Usage is the same as\n   'useModel', but can be used outside of React components.\n * unmount: unmount the Model object, and the Model State is cleared from the\n   Store.\n * ReduxStore: Redux Store API.\n\n\nExample#\n\nconst store = createStore();\n\nfunction load() {\n  const [, actions] = store.use(fooModel);\n\n  actions.load();\n}\n","frontmatter":{"sidebar_position":10,"title":"createStore"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/model/create-store.mdx","_relativePath":"en/apis/app/runtime/model/create-store.mdx"},{"id":35,"title":"handleEffect","routePath":"/en/apis/app/runtime/model/handle-effect","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":847},{"text":"Input","id":"input","depth":3,"charIndex":1202},{"text":"Return Type","id":"return-type","depth":3,"charIndex":3156}],"domain":"","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nAn asynchronous function type Effect usually has three states that need to be\nprocessed: in request, request successful, and request failed. The way to handle\nthese states is to write the Action functions (pending, fulfilled, rejected).\n\nWith the help of the handleEffect API, we can generate default Action functions\nto handle different results at each stage of an asynchronous request. The\nstructure of the State returned by the Action generated by handleEffect is as\nfollows:\n\ninterface State {\n  result: any; // result of fulfilled state\n  pending: boolean; // request is pending\n  error: string; // request error message\n}\n\n\n\nFunction Signature#\n\ninterface EffectActions {\n  pending: Action;\n  fulfilled: Action;\n  rejected: Action;\n}\n\ninterface Config {\n  ns?: string;\n  result?: string | false;\n  error?: string | false;\n  pending?: string | false;\n  combineMode?: 'merge' | 'replace';\n  omitResultNamespace?: boolean;\n}\n\nfunction handleEffect(config: Config): EffectActions;\n\n\n\nInput#\n\n * ns: the default returned State structure is flat, By setting this parameter,\n   the returned State can be mounted under the field named by the ns. For\n   example, if ns is set to \"data\", the returned structure is:\n\ninterface State {\n  data: {\n    pending: boolean;\n    result: any;\n    error: string;\n  };\n}\n\n\n * result: the default value is \"result\". This parameter corresponds to the\n   field name that stores the fulfilled state results. For example, set result\n   to \"items\", the returned State structure is:\n\ninterface State {\n  items: any; // Default result -> items\n  pending: boolean;\n  error: string;\n}\n\n\nif result is false, then returned State has no result:\n\ninterface State {\n  pending: boolean;\n  error: string;\n}\n\n\n * pending: the default value is \"pending\". Change the name of the pending field\n   in the returned State. Usage is the same as result.\n\n * error: the default value is \"error\". Change the name of the error field in\n   the returned State. Usage is the same as result.\n\n * combineMode: the default value is \"merge\". Get fulfilled state results. There\n   are two ways to deal with it (The data types that can be automatically\n   processed here are also limited to simple object or array types):\n   \n   * \"merge\": the previous data is merged with the current data. the data is an\n     array type, operation is similar to [].concat(lastData, currentData). the\n     data is an object, operation is similar to {...lastData, ...curData}.\n   * \"replace\": the current data directly replaces the previous data.\n\n * omitResultNamespace: the default value is false. When the result is an object\n   type, you want to mount the result directly on the State of the Model, rather\n   than on \"result\", you can set it to true. For example:\n\n// the result: {user: 'xx', email: 'xx'},\n// config handleEffect({ omitResultNamespace: true })\n// get State like follows:\n{\n  user: 'xx',\n  email: 'xx',\n  pending: false,\n  error: null,\n}\n\n\n\nReturn Type#\n\nObjects are processed by actions in pending, fulfilled, and rejected states.\n\nMore\n\nManage Effect.","frontmatter":{"sidebar_position":7,"title":"handleEffect"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/model/handle-effect.mdx","_relativePath":"en/apis/app/runtime/model/handle-effect.mdx"},{"id":36,"title":"model","routePath":"/en/apis/app/runtime/model/model_","lang":"en","toc":[{"text":"model","id":"model-1","depth":2,"charIndex":-1},{"text":"define","id":"define","depth":2,"charIndex":545},{"text":"Object Type","id":"object-type","depth":3,"charIndex":673},{"text":"Function Type","id":"function-type","depth":3,"charIndex":1123},{"text":"Input","id":"input","depth":3,"charIndex":2221},{"text":"ModelDesc.state","id":"modeldescstate","depth":4,"charIndex":2229},{"text":"ModelDesc.actions","id":"modeldescactions","depth":4,"charIndex":2431},{"text":"ModelDesc.computed","id":"modeldesccomputed","depth":4,"charIndex":2817},{"text":"ModelDesc.effects","id":"modeldesceffects","depth":4,"charIndex":3485}],"domain":"","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nTIP\n\nThe original type of Reduck is complex. The following type definition shows the\nsimplified type information. For the original type, see model.\n\n\nmodel#\n\nCreate a Model for managing application state.\n\nfunction model(name: string): { define: function }\n\n * name: string, the unique id of the Model created.\n\nmodel('foo');\n\n\n\ndefine#\n\nUsed to define the detailed structure of the Model, supporting passing in an\nobject type or function type parameter.\n\n\nObject Type#\n\nfunction define(modelDesc: ModelDesc): Model;\n\n * modelDesc: ModelDesc, definition of Model structure, includes\n   state、computed、actions、effects etc. props.\n\nconst fooModel = model('foo').define({\n  state: 'foo',\n  computed: {\n    cFoo: state => `c${state}`,\n  },\n  actions: {\n    setState: (state, value) => {\n      return value;\n    },\n  },\n  effects: {\n    loadState: async () => {\n      // get state from remote\n    },\n  },\n});\n\n\n\nFunction Type#\n\nfunction define((context: Context, utils: Utils) => ModelDesc): Model;\n\n * context: Reduck Context, can get underlying store object. store support all\n   Redux Store API, also mounts the use method for consuming the Model, and the\n   unmount method for unmounting the Model.\n * utils: commonly used tool like use、onMount. use is the same as store.use,\n   onMount is the hook function after the Model is mounted.\n\ninterface Utils {\n  use: UseModel;\n  onMount: OnMountHook;\n}\n\ninterface Context {\n  store: ReduxStore & {\n    use: UseModel;\n    unmount: (model: Model) => void;\n  };\n}\n\n\nFor example, through use, you can get the state and actions of the Model itself\nand other Models.\n\nconst fooModel = model('foo').define(() => {\n  return {\n    state: 'foo',\n    actions: {\n      setState: (state, value) => {\n        return value;\n      },\n    },\n  };\n});\n\nconst barModel = model('bar').define((_, { use }) => {\n  return {\n    state: 'bar',\n    effects: {\n      syncFoo() {\n        const [state, actions] = use(fooModel);\n        actions.setState(state);\n      },\n    },\n  };\n});\n\n\n\nInput#\n\nModelDesc.state#\n\nDefine the state of the Model. Technically, any type of State is supported, but\nin practice it is recommended to use a JSON serializable type.\n\ninterface ModelDesc {\n  state: any;\n}\n\n\nModelDesc.actions#\n\nDefine the Actions of the Model. The function type of Actions is:\n\ninterface ModelDesc {\n  actions: {\n    [actionKey: string]: (state: State, payload: any) => State | void;\n  };\n}\n\n\nReduck internally integrates immer, which can directly return the original\nstate. When the Action has no explicit return value, Reduck internally returns a\nmodified new State object.\n\nModelDesc.computed#\n\nDefines the derived state of the Model. The definition of derived state supports\ntwo types:\n\n 1. Depends only on the state of the Model itself\n\ninterface ModelDesc {\n  computed: {\n    [computedKey: string]: (state: State) => any;\n  };\n}\n\n\n 2. Depends on the state of other Models\n\ninterface ModelDesc {\n  computed: {\n    [computedKey: string]: [\n      ...models: Model[],\n      (state: State, ...args: ModelState[]) => any,\n    ];\n  };\n}\n\n\nconst fooModel = model('foo').define({\n  state: 'foo',\n});\n\nconst barModel = model('bar').define({\n  state: 'bar',\n  computed: {\n    combineFoo: [fooModel, (state, fooState) => state + fooState],\n  },\n});\n\n\nModelDesc.effects#\n\nDefines the Effects of the Model. The function types defined in Effects are:\n\ninterface ModelDesc {\n  effects: {\n    [effectKey: string]: (...args: any[]) => any;\n  };\n}\n\n\nconst fooModel = model('foo').define((context, { use }) => ({\n  state: 'foo',\n  effects: {\n    persist() {\n      const [state] = use(fooModel);\n      localStorage.setItem('state', state);\n    },\n  },\n}));\n\n\nMore\n\nDefine Model.","frontmatter":{"sidebar_position":1,"title":"model"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/model/model_.mdx","_relativePath":"en/apis/app/runtime/model/model_.mdx"},{"id":37,"title":"useLocalModel","routePath":"/en/apis/app/runtime/model/use-local-model","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":371}],"domain":"","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nTo use the State in the Model as a local state, the effect is similar to React's\nuseState. useLocalModel API same as useModel. For detail, see useModel.\n\n\nExample#\n\nfunction Container() {\n  const [state, actions] = useLocalModel(modelA);\n  const [state1, actions1] = useLocalModel(modelA);\n\n  // ...\n}\n\n\nmodelA was loaded twice with useLocalModel above, because useLocalModel consumes\nlocal state, so state and state1 are also completely isolated.\n\nMore\n\nUse Model.","frontmatter":{"sidebar_position":4,"title":"useLocalModel"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/model/use-local-model.mdx","_relativePath":"en/apis/app/runtime/model/use-local-model.mdx"},{"id":38,"title":"useModel","routePath":"/en/apis/app/runtime/model/use-model","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":366},{"text":"Input","id":"input","depth":3,"charIndex":696},{"text":"Return Value","id":"return-value","depth":3,"charIndex":1319},{"text":"Example","id":"example","depth":2,"charIndex":2154},{"text":"Basic","id":"basic","depth":3,"charIndex":2165},{"text":"Selector Usage","id":"selector-usage","depth":3,"charIndex":2489}],"domain":"","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nTIP\n\nThe original type of Reduck is complex. The following type definition shows the\nsimplified type information. For the original type, see model.\n\n\nFunction Signature#\n\nfunction useModel(\n  models: Models[],\n  stateSelector?: StateSelector,\n  actionSelector?: ActionSelector,\n): [state, actions, subscribe];\nfunction useModel(\n  ...models: Models[],\n  stateSelector?: (...args: State[]) => any,\n  actionSelector?: (...args: Actions[]) => any,\n): [state, actions, subscribe];\n\n\n\nInput#\n\n * models: Array of Model objects, which can be passed in as an array type\n   parameter, or all Models can be passed in as parameters one by one.\n * stateSelector: Optional parameters, used to filter State calculations. The\n   first n parameters are the States corresponding to n Models, and the returned\n   data is used as the first element of the useModel return value array.\n * actionSelector: Optional parameters, used to filter Action calculations. The\n   first n parameters are the States corresponding to n Models, and the returned\n   data is used as the second element of the useModel return value array.\n\n\nReturn Value#\n\nReturns an array with each value:\n\n * state: return value of stateSelector. if there is no stateSelector, will\n   combine all incoming Model States(including derived states) and return them.\n   If there is an attribute of the same name in the State of different Models,\n   the following State will override the previous State. when state changes, the\n   component call useModel will re-render.\n * actions: return value of actionSelector. if there is no actionSelector, will\n   combine all incoming Model Action(including Effect) and return them. If there\n   is an attribute of the same name in the Action of different Models, the\n   following Action will override the previous Action.\n * subscribe: A function that subscribes to State changes. This function is\n   called when the State of any Model passed in changes.\n\n\nExample#\n\n\nBasic#\n\n\n\n\nfunction Test(props) {\n  const [state, actions] = useModel([todoModel, filterModel]);\n  actions.add(); // call todoModel add action\n  actions.setVisibleStatus(); // call filterModel filterModel action\n\n  state.items; // get todoModel state items\n  state.visibleStatus; // get filterModel state visibleStatus\n}\n\n\n\nSelector Usage#\n\nfunction Test(props) {\n  const [state, actions] = useModel(\n    [todoModel, filterModel],\n    (todoState, filterState) => ({\n      items: todoState.items,\n      visibleStatus: `${props.prefix}-${filterState.visibleStatus}`,\n    }),\n    (todoActions, filterActions) => ({\n      ...todoActions,\n      ...filterActions,\n    }),\n  );\n  actions.add(); // call todoModel add action\n  actions.setVisibleStatus(); // call filterModel filterModel action\n\n  state.items; // get todoModel state items\n  state.visibleStatus; // get filterModel state visibleStatus\n}\n\n\nMore\n\nuse Model.","frontmatter":{"sidebar_position":2,"title":"useModel"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/model/use-model.mdx","_relativePath":"en/apis/app/runtime/model/use-model.mdx"},{"id":39,"title":"useStaticModel","routePath":"/en/apis/app/runtime/model/use-static-model","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":911}],"domain":"","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nIf want to consume a Model in the form of React Hook in the component, and can\nget the current latest state at any time, but you don't want the Model state to\nbe updated, which will cause the component to be re-rendered, we can use\nuseStaticModel.\n\nuseStaticModel API is same as useModel.For detail, see useModel.\n\nTo ensure that the latest state is always available, be careful not to\ndeconstruct the returned state.\n\nfunction App() {\n  // ❌ Do not deconstruct state, but can deconstruct actions.\n  const [{ username }, { logout }] = useStaticModel(userModel);\n\n  // ✅ True Usage.\n  const [state, { logout }] = useStaticModel(userModel);\n\n  useEffect(() => {\n    state.username;\n  }, []);\n}\n\n\n\nExample#\n\nThe following App component consumes the userModel state, but does not use it\ndirectly in JSX. It can be found that changes in the userModel state do not\nnecessarily cause the component to re-render. This situation can be optimized\nusing useStaticModel.\n\nfunction App() {\n  const [state] = useStaticModel(userModel);\n\n  useEffect(() => {\n    // 统计 UV 数据\n    send('pageview', { user: state.user });\n  }, [state]);\n\n  return \nHello;\n}\n\n\nMore\n\nUse Model.","frontmatter":{"sidebar_position":3,"title":"useStaticModel"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/model/use-static-model.mdx","_relativePath":"en/apis/app/runtime/model/use-static-model.mdx"},{"id":40,"title":"useStore","routePath":"/en/apis/app/runtime/model/use-store","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":287},{"text":"Return Type","id":"return-type","depth":3,"charIndex":345}],"domain":"","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nuseStore Used to get the store shared by the current component tree.\n\n\nFunction Signature#\n\nfunction useStore(): ReduckStore;\n\n\n\nReturn Type#\n\n * ReduckStore: Reduck Store, type refer to the return type of createStore.\n\nMore\n\nUse Model.","frontmatter":{"sidebar_position":9,"title":"useStore"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/model/use-store.mdx","_relativePath":"en/apis/app/runtime/model/use-store.mdx"},{"id":41,"title":"router","routePath":"/en/apis/app/runtime/router/router","lang":"en","toc":[{"text":"hooks","id":"hooks","depth":2,"charIndex":55},{"text":"useNavigate","id":"usenavigate","depth":3,"charIndex":64},{"text":"useLocation","id":"uselocation","depth":3,"charIndex":567},{"text":"useParams","id":"useparams","depth":3,"charIndex":1049},{"text":"useRouteError","id":"userouteerror","depth":3,"charIndex":1399},{"text":"Components","id":"components","depth":2,"charIndex":1700},{"text":"Link","id":"link","depth":3,"charIndex":1714},{"text":"NavLink","id":"navlink","depth":3,"charIndex":2036},{"text":"Outlet","id":"outlet","depth":3,"charIndex":2541},{"text":"Route","id":"route","depth":3,"charIndex":3115},{"text":"More","id":"more","depth":2,"charIndex":4794}],"domain":"","content":"#\n\nINFO\n\nThe router solution based on react-router 6.\n\n\nhooks#\n\n\nuseNavigate#\n\ndeclare function useNavigate(): NavigateFunction;\n\ninterface NavigateFunction {\n  (\n    to: To,\n    options?: {\n      replace?: boolean;\n      state?: any;\n      relative?: RelativeRoutingType;\n    },\n  ): void;\n  (delta: number): void;\n}\n\n\nThe useNavigate hook returns a function that lets you navigate programmatically.\n\n\n\nexport function HomeButton() {\n  let navigate = useNavigate();\n\n  function handleClick() {\n    navigate('/home');\n  }\n\n  return (\n    \n      Go home\n    \n  );\n}\n\n\n\nuseLocation#\n\ndeclare function useLocation(): Location;\n\ninterface Location extends Path {\n  state: unknown;\n  key: Key;\n}\n\n\nThe useLocation hook returns the current location object. A new location object\nwould be returned whenever the current location changes.\n\n\n\nfunction usePageViews() {\n  let location = useLocation();\n  React.useEffect(() => {\n    ga.send([\"pageview\", location.pathname]);\n  }, [location]);\n}\n\nfunction App() {\n  usePageViews();\n  return (\n    //...\n  );\n}\n\n\n\nuseParams#\n\ndeclare function useParams(): Readonly>;\n\n\nThe useParams hook returns an object of key/value pairs of the dynamic params\nfrom the current URL that were matched by the .\n\n\n\nfunction BlogPost() {\n  const { slug } = useParams();\n  return \nNow showing post {slug};\n}\n\nfunction App() {\n  return (\n    \n      home} />\n      } />\n    \n  );\n}\n\n\n\nuseRouteError#\n\nexport declare function useRouteError(): unknown;\n\n\nuseRouteError returns the nearest ancestor Route error。\n\n\nconst ErrorBoundary = () => {\n  const error = useRouteError();\n  return (\n    \n\n      \n\n\n{error.status}\n      \n\n\n{error.message}\n    \n  );\n};\nexport default ErrorBoundary;\n\n\n\nComponents#\n\n\nLink#\n\ndeclare function Link(props: LinkProps): React.ReactElement;\n\ninterface LinkProps\n  extends Omit, 'href'> {\n  replace?: boolean;\n  state?: any;\n  to: To;\n  reloadDocument?: boolean;\n}\n\ntype To = string | Partial;\n\n\nA is an element that lets the user navigate to another page by clicking or\ntapping on it.\n\nAbout\n\n\n\nNavLink#\n\ndeclare function NavLink(props: NavLinkProps): React.ReactElement;\n\ninterface NavLinkProps\n  extends Omit {\n  caseSensitive?: boolean;\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean }) => React.ReactNode);\n  className?: string | ((props: { isActive: boolean }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: { isActive: boolean }) => React.CSSProperties);\n}\n\n\nA is a special kind of that knows whether or not it is \"active\".\n\n\nOutlet#\n\ninterface OutletProps {\n  context?: unknown;\n}\ndeclare function Outlet(props: OutletProps): React.ReactElement | null;\n\n\nAn should be used in parent route elements to render their child route elements.\nThis allows nested UI to show up when child routes are rendered.\n\nfunction Dashboard() {\n  return (\n    \n\n      \n\n\nDashboard\n\n      {/* This element will render either  when the URL is\n          \"/messages\",  at \"/tasks\", or null if it is \"/\"\n      */}\n      \n    \n  );\n}\n\nfunction App() {\n  return (\n    \n      }>\n        } />\n        } />\n      \n    \n  );\n}\n\n\n\nRoute#\n\ninterface RouteObject {\n  path?: string;\n  index?: boolean;\n  children?: React.ReactNode;\n  caseSensitive?: boolean;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  handle?: RouteObject['handle'];\n  shouldRevalidate?: ShouldRevalidateFunction;\n}\n\n\nRoute represents the route information. A Route object couples URL segments to\ncomponents, data loading and data mutations.\n\nRoute can be used as a plain object, passing to the router creation functions:\n\nconst router = createBrowserRouter([\n  {\n    // it renders this element\n    element: ,\n\n    // when the URL matches this segment\n    path: 'teams/:teamId',\n\n    // with this data loaded before rendering\n    loader: async ({ request, params }) => {\n      return fetch(`/fake/api/teams/${params.teamId}.json`, {\n        signal: request.signal,\n      });\n    },\n\n    // performing this mutation when data is submitted to it\n    action: async ({ request }) => {\n      return updateFakeTeam(await request.formData());\n    },\n\n    // and renders this element in case something went wrong\n    errorElement: ,\n  },\n]);\n\n\nYou can also declare your routes with JSX and createRoutesFromElements, the\nprops to the element are identical to the properties of the route objects:\n\nconst router = createBrowserRouter(\n  createRoutesFromElements(\n    }\n      path=\"teams/:teamId\"\n      loader={async ({ params }) => {\n        return fetch(`/fake/api/teams/${params.teamId}.json`);\n      }}\n      action={async ({ request }) => {\n        return updateFakeTeam(await request.formData());\n      }}\n      errorElement={}\n    />,\n  ),\n);\n\n\n\nMore#\n\nYou can access to React Router to get the full API information.","frontmatter":{"title":"router","sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/router/router.mdx","_relativePath":"en/apis/app/runtime/router/router.mdx"},{"id":42,"title":"NoSSR","routePath":"/en/apis/app/runtime/ssr/no-ssr","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":196},{"text":"Example","id":"example","depth":2,"charIndex":235},{"text":"Scene","id":"scene","depth":2,"charIndex":562}],"domain":"","content":"#\n\nThe content wrapped by NoSSR will not be rendered at the server, nor will it be\nrendered during the client side hydrate. it will only be rendered immediately\nafter the entire app is rendered.\n\n\nUsage#\n\n\n\nexport default () => ...;\n\n\n\nExample#\n\nIn the following code, the Time component is used to display the current time.\nSince the time obtained by server-side rendering and client side hydrate are\ndiff, React will throw an exception. For this case, you can use NoSSR to\noptimize:\n\n\n\nfunction Time() {\n  return (\n    \n      \nTime: {Date.now()}\n    \n  );\n}\n\n\n\nScene#\n\nIn CSR, it is often necessary to render different content according to the\nbrowser UA, or a parameter of the current page URL. If the application switches\ndirectly to SSR at this time, it is very likely that the results will not meet\nthe expectations.\n\nModern.js provides complete browser side information in the SSR context, which\ncan be used to determine the rendering result of the component on the server\nside.\n\nEven so, if there is too much logic in the application, or the developer wants\nto use the context later, or does not want some content to be rendered at the\nserver side. developer can use the NoSSR component to exclude this part from\nserver-side rendering.","frontmatter":{"title":"NoSSR"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/ssr/no-ssr.mdx","_relativePath":"en/apis/app/runtime/ssr/no-ssr.mdx"},{"id":43,"title":"PreRender","routePath":"/en/apis/app/runtime/ssr/pre-render","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":117},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":172},{"text":"Input","id":"input","depth":3,"charIndex":546},{"text":"Example","id":"example","depth":2,"charIndex":1477}],"domain":"","content":"#\n\nA Helmet-like HOC without content implements SPA routing-level caching, manner\nwithout additional configuration.\n\n\nUsage#\n\n\n\nexport default () => (\n  <>\n    \n  </>\n);\n\n\n\nFunction Signature#\n\nThe PreRender provides a set of configuration for controlling caching rules,\nexpiration times, caching algorithms, and more.\n\ntype Props {\n  interval: number;\n  staleLimit: number;\n  level: number;\n  include: { header?: string[], query?: string[] };\n  matches: { header?: Record, query?: Record }\n}\n\nfunction PreRender(props: Props): React.Component\n\n\n\nInput#\n\n * interval: set the time the cache keep fresh, seconds. During this time, the\n   cache will be used directly and not invoke asynchronous rendering.\n * staleLimit: sets the time when the cache is completely expired,\n   seconds.During this time, The cache can be returned and asynchronous\n   rendering will be invoke, otherwise must wait for the re-rendered result.\n * level: sets the calculation rule level for the cache identity, usually used\n   with includes and matches. The default value is 0.\n\n0: pathname\n1: pathname + querystring\n2: pathname + headers\n3: pathname + querystring + headers\n\n\n * includes: sets the content that needs to be included in the cache identifier,\n   used when the level is not 0. The default value is null.\n * matches: sets the rewriting rule for the value of query or header in cache\n   identity, usually used in cache category, supports regular expressions. The\n   default value is null.\n\n\nExample#\n\n\n\nexport default function App() {\n  return (\n    <>\n      \n      \nHello Modern\n    </>\n  );\n}\n\n\nThe following example shows how to add the parameters in the query and header\ninto the cache identifier calculation:\n\n/* calculate cache identifier using channel in query and language in header */\n\n\n\nThe following example shows how not to let the test channel affect the online\ncache:\n\n/* rewrite the channel value starting with test_ in the query as \"testChannel\", otherwise rewrite it as \"otherChannel\" */\n\n","frontmatter":{"title":"PreRender"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/ssr/pre-render.mdx","_relativePath":"en/apis/app/runtime/ssr/pre-render.mdx"},{"id":44,"title":"act","routePath":"/en/apis/app/runtime/testing/act","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":111},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":123},{"text":"Example","id":"example","depth":2,"charIndex":200}],"domain":"","content":"#\n\nUsed to ensure that behaviors such as rendering, events, data fetching, etc.\nhave been applied to the DOM.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\nact is the same as react-dom/test-utils act function.\n\n\nExample#\n\n\n\n\n\ndescribe('test act', () => {\n  it('it should be foo', () => {\n    const el = document.createElement('div');\n    act(() => {\n      ReactDOM.render(, el);\n    });\n\n    expect(el.innerHTML).toBe('\nFoo');\n  });\n});\n","frontmatter":{"title":"act"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/testing/act.mdx","_relativePath":"en/apis/app/runtime/testing/act.mdx"},{"id":45,"title":"cleanup","routePath":"/en/apis/app/runtime/testing/cleanup","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":57},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":69},{"text":"Example","id":"example","depth":2,"charIndex":117}],"domain":"","content":"#\n\nUsed to uninstall all currently rendered components.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\nfunction cleanup(): void\n\n\nExample#\n\nINFO\n\nNote that if you are using a testing framework that supports afterEach and it is\ninjected into your testing environment (such as mocha, Jest, and Jasmine), will\nexecute cleanup in the afterEach hook by default. Otherwise, you will need to do\nmanual cleanup after each test.\n\nFor example, if you use the ava test framework, then you need to use the\ntest.after Each hook like this.\n\n\n\n\ntest.afterEach(cleanup);\n\ntest('renders into document', () => {\n  render(\n);\n  // ...\n});\n\n// ... more tests ...\n","frontmatter":{"title":"cleanup","sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/testing/cleanup.mdx","_relativePath":"en/apis/app/runtime/testing/cleanup.mdx"},{"id":46,"title":"render","routePath":"/en/apis/app/runtime/testing/render","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":51},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":63},{"text":"Input","id":"input","depth":3,"charIndex":508},{"text":"Return Value","id":"return-value","depth":3,"charIndex":1211},{"text":"Example","id":"example","depth":2,"charIndex":1754}],"domain":"","content":"#\n\nUsed to render the component in the test case.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\ntype Options = {\n  container: DOMElement;\n  baseElement: DOMElement;\n  hydrate: boolean;\n  warpper: React.ComponentType<{children: ReactNode}>;\n  queries: any;\n};\n\ntype RenderResult = {\n  {...queries}: any;\n  container: DOMElement;\n  baseElement: DOMElement;\n  debug: function;\n  rerender: function;\n  unmount: function;\n  asFragment: function;\n}\n\nfunction render(ui: React.ReactElement, options: Options): RenderResult;\n\n\n\nInput#\n\n * ui: the React component that needs to be rendered.\n * options: render options.\n   * container: the dom which component mounted. by default create a div\n     element, and auto append to document.body. the default value is\n     document.body.append(document.createElement('div')).\n   * baseElement: Used to specify the basename used in queries. If container is\n     specified, the default value is the value of container, otherwise it is\n     document.body.\n   * hydrate: If set to true, the ReactDOM.hydrate rendering component is used.\n     The default value is false.\n   * wrapper: a react component that can be used to customize rendering logic.\n   * queries: customize some own queries.\n\n\nReturn Value#\n\n * {...queries}: all available queries.\n * container: the DOM element that React component mounted.\n * baseElement\n * debug\n * rerender: if you want to test some scene when a rendered component is\n   updated, you can use rerender for reality.\n * unmount: unmount rendered components. This API is helpful if you want to test\n   what happens after the component is unmounted.\n * asFragment: return the DocumentFragment of rendered component. used to test\n   the response of the DOM structure after the react event is triggered.\n\n\nExample#\n\n\n\n\ntest('renders a message', () => {\n  const { container, getByText } = render();\n  expect(getByText('Hello, world!')).toBeInTheDocument();\n  expect(container.firstChild).toMatchInlineSnapshot(`\n    \n\n\nHello, World!\n  `);\n});\n","frontmatter":{"title":"render"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/testing/render.mdx","_relativePath":"en/apis/app/runtime/testing/render.mdx"},{"id":47,"title":"renderApp","routePath":"/en/apis/app/runtime/testing/renderApp","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":118},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":433},{"text":"Example","id":"example","depth":2,"charIndex":489}],"domain":"","content":"#\n\nThe render function is used to test normal components, and the renderApp\nfunction is used to test App components.\n\n\nUsage#\n\n\n\n\nApp components refer to components that contain some Modern.js contexts, such as\nApp root components, Containers using Models, etc.\n\nFor the testing of such components, you can use the renderApp function, which\nwill automatically wrap the context information according to the current\nmodern.config.js.\n\n\nFunction Signature#\n\nrenderApp is the same as render.\n\n\nExample#\n\n\n\n\ndescribe('test', () => {\n  it('test App', () => {\n    const { getByText } = renderApp();\n    expect(getByText('Hello Modern!')).toBeInTheDocument();\n  });\n});\n","frontmatter":{"title":"renderApp"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/testing/renderApp.mdx","_relativePath":"en/apis/app/runtime/testing/renderApp.mdx"},{"id":48,"title":"CSS-In-JS API","routePath":"/en/apis/app/runtime/utility/css-in-js","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":38},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":50},{"text":"Example","id":"example","depth":2,"charIndex":99}],"domain":"","content":"#\n\nUse Style Component to write CSS.\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\nsee styled-component API.\n\n\nExample#\n\n\n\nconst Button = styled.button`\n  background: palevioletred;\n  border-radius: 3px;\n  border: none;\n  color: white;\n`;\n\nconst TomatoButton = styled(Button)`\n  background: tomato;\n`;\n\nfunction ButtonExample() {\n  return (\n    <>\n      I'm purple.\n      \n\n      I'm red.\n    </>\n  );\n}\n","frontmatter":{"title":"CSS-In-JS API"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/utility/css-in-js.mdx","_relativePath":"en/apis/app/runtime/utility/css-in-js.mdx"},{"id":49,"title":"Head","routePath":"/en/apis/app/runtime/utility/head","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":96},{"text":"Example","id":"example","depth":2,"charIndex":135},{"text":"More","id":"more","depth":2,"charIndex":299}],"domain":"","content":"#\n\nUsed to add html elements (such as title, meta, script, etc.) to the element,\nsupports SSR.\n\n\nUsage#\n\n\n\nexport default () => ...;\n\n\n\nExample#\n\n\n\nfunction IndexPage() {\n  return (\n    \n\n      \n        My page title\n        \n      \n      \n\nHello Modern.js!\n    \n  );\n}\n\nexport default IndexPage;\n\n\n\nMore#\n\nFor detail, see react-helmet.","frontmatter":{"title":"Head"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/utility/head.mdx","_relativePath":"en/apis/app/runtime/utility/head.mdx"},{"id":50,"title":"loadable","routePath":"/en/apis/app/runtime/utility/loadable","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":38},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":50},{"text":"Input","id":"input","depth":3,"charIndex":302},{"text":"loadFn","id":"loadfn","depth":4,"charIndex":310},{"text":"options.resolveComponent","id":"optionsresolvecomponent","depth":4,"charIndex":415},{"text":"options.fallback","id":"optionsfallback","depth":4,"charIndex":1366},{"text":"options.ssr","id":"optionsssr","depth":4,"charIndex":1438},{"text":"Return Value","id":"return-value","depth":3,"charIndex":1505},{"text":"LoadableComponent","id":"loadablecomponent","depth":4,"charIndex":1520}],"domain":"","content":"#\n\nUsed to create Loadable component\n\n\nUsage#\n\n\n\n\n\nFunction Signature#\n\ntype Options = {\n  resolveComponent?: (\n    module: Module,\n    props: Props,\n  ) => React.ComponentType,\n  fallback?: JSX.Element;\n  ssr?: boolean;\n}\n\nfunction loadable(loadFn: Function, options?: Options) => LoadableComponent\n\n\n\nInput#\n\nloadFn#\n\nUsed to load component.\n\n\n\nconst OtherComponent = loadable(() => import('./OtherComponent'));\n\n\noptions.resolveComponent#\n\nType: (module: Module, props: Props) => React.ComponentType\n\nmodule is the component returned by loadFn, and props is the props parameter\naccepted by the component.\n\nBy default, we think that the default export of file is a react component, so we\ncan render the component directly. But when the component is named export, or we\nneed to dynamically determine which component needs to be rendered according to\nthe props, we can use resolveComponent. Here is an example:\n\nexport const Apple = () => 'Apple!';\nexport const Orange = () => 'Orange!';\n\n\nconst LoadableApple = loadable(() => import('./components'), {\n  resolveComponent: components => components.Apple,\n});\nconst LoadableOrange = loadable(() => import('./components'), {\n  resolveComponent: components => components.Orange,\n});\nconst LoadableFruit = loadable(() => import('./components'), {\n  resolveComponent: (components, props) => components[props.fruit],\n});\n\n\noptions.fallback#\n\nWhether to display fallback content during loading.\n\noptions.ssr#\n\nWhether to support SSR, the default value is true.\n\n\nReturn Value#\n\nLoadableComponent#\n\ntype LoadableComponent = React.ComponentType<\n  Props & { fallback?: JSX.Element }\n> & {\n  preload(props?: Props): void;\n  load(props?: Props): Promise>;\n};\n","frontmatter":{"title":"loadable"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/utility/loadable.mdx","_relativePath":"en/apis/app/runtime/utility/loadable.mdx"},{"id":51,"title":"Hook","routePath":"/en/apis/app/runtime/web-server/hook","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":143},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":569},{"text":"Input","id":"input","depth":3,"charIndex":1756},{"text":"Example","id":"example","depth":2,"charIndex":2091},{"text":"Redirect","id":"redirect","depth":3,"charIndex":2102},{"text":"Rewrite","id":"rewrite","depth":3,"charIndex":2303},{"text":"HTML Inject","id":"html-inject","depth":3,"charIndex":2529}],"domain":"","content":"#\n\nUsed to extend Modern.js built-in Web Server, all page requests are handled by\nthese hooks.\n\nNOTE\n\nFor more detail, see Extend Web Server.\n\n\nUsage#\n\n\n\nexport const afterMatch: AfterMatchHook = (context, next) => {};\nexport const afterRender: AfterRenderHook = (context, next) => {};\n\n\nINFO\n\nBefore using this API, please execute pnpm run new to create a new \"Custom Web\nServer\" source code directory.\n\npnpm run new\n? Please select the operation you want: Create Elements\n? Please select the type of element to create: New \"Custom Web Server\" source code directory\n\n\n\nFunction Signature#\n\ntype HookContext = {\n  response: {\n    set: (key: string, value: string) => void;\n    status: (code: number) => void;\n    cookies: {\n      set: (key: string, value: string, options?: any) => void;\n      clear: () => void;\n    };\n    raw: (\n      body: string,\n      { status, headers }: { status: number; headers: Record },\n    ) => void;\n  };\n  request: {\n    host: string;\n    pathname: string;\n    query: Record;\n    cookie: string;\n    cookies: {\n      get: (key: string) => string;\n    };\n    headers: IncomingHttpHeaders;\n  };\n};\n\nfunction Hook(context: HookContext, next: NextFunction): Promsie | void;\n\n\ndifferent Hooks additionally provide different contexts. Currently Modern.js\nsupport AfterMatch and AfterRender.\n\ntype AfterMatchContext = HookContext & {\n  router: {\n    redirect: (url: string, status: number) => void;\n    rewrite: (entry: string) => void;\n  };\n};\n\ntype AfterRenderContext = {\n  template: {\n    get: () => string;\n    set: (html: string) => void;\n    prependHead: (fragment: string) => void;\n    appendHead: (fragment: string) => void;\n    prependBody: (fragment: string) => void;\n    appendBody: (fragment: string) => void;\n  };\n};\n\n\n\nInput#\n\n * context: Hook context.\n   * response: provides a series of methods to process the response.\n   * request: provides a series of methods to get request info.\n   * router: provides methods on routing.\n   * template: provides methods on content.\n * next: call next listener (not affect the server process, only current hook).\n\n\nExample#\n\n\nRedirect#\n\nRedirect to pages outside the site, for example to login page:\n\n\n\nexport const afterMatch: AfterMatch = async (ctx, next) => {\n  ctx.router.redirect('https://website.com/login', 302);\n};\n\n\n\nRewrite#\n\nRewrite to pages of the current site, for example, the same route returns pages\nthat are adapted to different UA:\n\n\n\nexport const afterMatch: AfterMatch = async (ctx, next) => {\n  ctx.router.rewrite('mobile');\n};\n\n\n\nHTML Inject#\n\nInject some HTML content to the page, such as scripts, page skeletons, etc.:\n\n\n\nexport const afterRender: AfterRenderHook = (context, next) => {\n  ctx.template.prependBody('\nFooter');\n};\n","frontmatter":{"title":"Hook"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/web-server/hook.mdx","_relativePath":"en/apis/app/runtime/web-server/hook.mdx"},{"id":52,"title":"Middleware","routePath":"/en/apis/app/runtime/web-server/middleware","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":233},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":700},{"text":"Input","id":"input","depth":3,"charIndex":1448},{"text":"Example","id":"example","depth":2,"charIndex":1964},{"text":"Tracking","id":"tracking","depth":3,"charIndex":1975},{"text":"Inject Tools & Data","id":"inject-tools-&-data","depth":3,"charIndex":2151},{"text":"Framework Extension","id":"framework-extension","depth":3,"charIndex":2394}],"domain":"","content":"#\n\nUsed to extend the built-in Web Server of Modern.js, unlike Hook, Middleware can\ndirectly operate Node's origin request and response, and can be extended using\nthe framework plugin.\n\nNOTE\n\nFor more detail, see Extend Web Server.\n\n\nUsage#\n\n\n\nexport const middleware: Middleware = async (context, next) => {};\nexport const middleware: Middleware[] = [\n  async (context, next) => {},\n  async (context, next) => {},\n];\n\n\nINFO\n\nBefore using this API, please execute pnpm run new to create a new \"Custom Web\nServer\" source code directory.\n\npnpm run new\n? Please select the operation you want: Create Element\n? Please select the type of element to create: New \"Custom Web Server\" source code directory\n\n\n\nFunction Signature#\n\ntype Middleware = (\n  context: MiddlewareContext,\n  next: NextFunction,\n) => Promise | void;\n\ntype MiddlewareContext = {\n  response: {\n    set: (key: string, value: string) => void;\n    status: (code: number) => void;\n    cookies: {\n      set: (key: string, value: string, options?: any) => void;\n      clear: () => void;\n    };\n    raw: (\n      body: string,\n      { status, headers }: { status: number; headers: Record },\n    ) => void;\n    locals: Record;\n  };\n  request: {\n    host: string;\n    pathname: string;\n    query: Record;\n    cookie: string;\n    cookies: {\n      get: (key: string) => string;\n    };\n    headers: IncomingHttpHeaders;\n  };\n  source: {\n    req: IncomingMessage;\n    res: ServerResponse;\n  };\n};\n\n\n\nInput#\n\n * context: Middleware context.\n   * response: provides a series of methods to process the response.\n   * request: provides a series of methods to get request info.\n   * source: provides Node.js native req and res object.\n * next: call next listener (not affect the server process, only current hook).\n\nWARNING\n\nThe execution of the next function does not affect built-in processes, only\ncontrols whether the next middleware executes. Rendering processes are\ninterrupted only when the response is written.\n\n\nExample#\n\n\nTracking#\n\nexport const Middleware = () => async (ctx, next) => {\n  const start = Date.now();\n  ctx.res.once('finish', () => {\n    console.log(Date.now() - start);\n  });\n};\n\n\n\nInject Tools & Data#\n\nModern.js provides res.locals to store local variables for the current request.\n\nexport const Middleware = () => async (ctx, next) => {\n  ctx.res.locals.id = 'Modern.js';\n  ctx.res.locals.rpc = createRpcInstance();\n};\n\n\n\nFramework Extension#\n\nMiddleware can also use runtime framework extensions like BFF.\n\nWhen using framework runtime extensions, type information is exported from\n@modern-js/runtime/{namespace}. Middleware can use framework syntax, such as\nframework middleware writing, the following is pseudo-code:\n\n\n\nexport const middleware: SomeType = (ctx, next) => {\n  console.log(ctx.url);\n  next();\n};\n\n\nBy default, the framework extension capability of Web Server is turned off after\ninstalling the framework extension plug-in. If you want to use the framework\nextension, you can turn it on through 'server.enableFrameworkExt'.\n\nINFO\n\nThe type name exported by the framework extension may not 'Middleware', but is\nnamed by the framework extension plugin.","frontmatter":{"title":"Middleware"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/apis/app/runtime/web-server/middleware.mdx","_relativePath":"en/apis/app/runtime/web-server/middleware.mdx"},{"id":53,"title":"Overview","routePath":"/en/community/blog/overview","lang":"en","toc":[{"text":"Announcing Modern.js v2: support Rspack","id":"announcing-modernjs-v2:-support-rspack","depth":2,"charIndex":244},{"text":"What is Streaming SSR in React 18","id":"what-is-streaming-ssr-in-react-18","depth":2,"charIndex":1061},{"text":"Introducing React Server Component in Modern.js","id":"introducing-react-server-component-in-modernjs","depth":2,"charIndex":2058},{"text":"Updates during Sept - Oct in 2022","id":"updates-during-sept---oct-in-2022","depth":2,"charIndex":2551},{"text":"Updates during July - August in 2022","id":"updates-during-july---august-in-2022","depth":2,"charIndex":2892}],"domain":"","content":"#\n\nWelcome to Modern.js blog!\n\nYou can find the latest update of Modern.js and our thought processes here.\nOccasionally we explain the infrastructure behind it.\n\n--------------------------------------------------------------------------------\n\n\nAnnouncing Modern.js v2: support Rspack#\n\n> Published on 16.03.2023\n\nWe are excited to announce the release of Modern.js v2!\n\nModern.js is a suite of infrastructure tools we built for web development inside\nBytedance (we call ourself Web Infra). Since we open sourced this project a\nlittle more than a year ago, there were dozens of contributors helped us on\ndevelopment; we aggregated more than 2,000 pull requests and Modern.js started\nto support build tool like Rspack, features like nested routes, Streaming SSR\nand there are more to come!\n\nWe are extremely proud of what we have achieved so far, you can also refer to\nthis article(English version under construction)👈🏻 to see what has changed\nover the last year in Modern.js.\n\n--------------------------------------------------------------------------------\n\n\nWhat is Streaming SSR in React 18#\n\n> Published on 16.12.2022\n\nSince React 18, React supports a new type of SSR (streaming SSR) and it brought\ntwo advantages over the React tool chain:\n\n * Streaming HTML: Server will be able to transmit HTML to browser parts by\n   parts, rather than waiting until the whole page being rendered. Client side\n   will render the page faster thus dramatically increase performance benchmark\n   scores like TTFB(Time to First Byte), FCP(First Contentful Paint) and more.\n\n * Selective Hydration: On the client side, browser can hydrate only the HTML\n   elements that has already been rendered, without needing to wait until the\n   whole page finish rendering and all the javascript bundle being loaded.\n\nTo understand its design further, check out this Github Discussion by Dan\nAbramov or watch this talk.\n\nOr read more from us at here(Further content in English under construction).\n\n--------------------------------------------------------------------------------\n\n\nIntroducing React Server Component in Modern.js#\n\n> Published on 01.12.2022\n\nTo explain the experimental React Server Component, the one-liner given by the\nReact Team was: zero-bundle-size React Server Components.\n\nWe agreed with the React team that this is where the whole direction will move\nforward in React. Open source maintainers and contributors inside the React\ncommunity are also actively building an eco-system around it.\n\nRead more from React team at here or more from us at here\n\n\nUpdates during Sept - Oct in 2022#\n\n> Published on 01.11.2022\n\nWe updated Modern.js to v1.21.0 during Sept - Oct. Major upgrade includes:\n\n * support pnpm v7\n * added typescript compiler option on server side\n\nRead more (English version under construction)\n\n--------------------------------------------------------------------------------\n\n\nUpdates during July - August in 2022#\n\n> Published on 2022.09.05\n\nModern.js upgraded to v1.17.0 during July to August in 2022. Major updates\ninclude:\n\n * Support React 18\n * Unifying packages: All the Modern.js package version numbers are unified, and\n   added version update command line in CLI.\n * Support npm module bundle building: We support bundling npm module output.\n * Reduck v1.1: We released Reduck v1.1 and updated all our documentations.\n\nRead more (English version under construction)","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/community/blog/overview.md","_relativePath":"en/community/blog/overview.md"},{"id":54,"title":"Contributing Guide","routePath":"/en/community/contributing-guide","lang":"en","toc":[{"text":"Setup the Dev Environment","id":"setup-the-dev-environment","depth":2,"charIndex":241},{"text":"Fork the Repo","id":"fork-the-repo","depth":3,"charIndex":270},{"text":"Install Node.js","id":"install-nodejs","depth":3,"charIndex":369},{"text":"Install pnpm","id":"install-pnpm","depth":3,"charIndex":904},{"text":"Install Dependencies","id":"install-dependencies","depth":3,"charIndex":1007},{"text":"Set Git Email","id":"set-git-email","depth":3,"charIndex":1501},{"text":"Making Changes and Building","id":"making-changes-and-building","depth":2,"charIndex":1981},{"text":"Checkout A New Branch","id":"checkout-a-new-branch","depth":3,"charIndex":2115},{"text":"Build the Package","id":"build-the-package","depth":3,"charIndex":2288},{"text":"Testing","id":"testing","depth":2,"charIndex":2903},{"text":"Add New Tests","id":"add-new-tests","depth":3,"charIndex":2914},{"text":"Run Unit Tests","id":"run-unit-tests","depth":3,"charIndex":3108},{"text":"Run E2E Tests","id":"run-e2e-tests","depth":3,"charIndex":3482},{"text":"Linting","id":"linting","depth":2,"charIndex":3947},{"text":"Documentation","id":"documentation","depth":2,"charIndex":4214},{"text":"Submitting Changes","id":"submitting-changes","depth":2,"charIndex":5089},{"text":"Add a Changeset","id":"add-a-changeset","depth":3,"charIndex":5111},{"text":"Committing your Changes","id":"committing-your-changes","depth":3,"charIndex":5385},{"text":"Format of PR titles","id":"format-of-pr-titles","depth":3,"charIndex":5481},{"text":"Publishing","id":"publishing","depth":2,"charIndex":5763}],"domain":"","content":"#\n\nThanks for that you are interested in contributing to Modern.js. Before starting\nyour contribution, please take a moment to read the following guidelines.\n\n--------------------------------------------------------------------------------\n\n\nSetup the Dev Environment#\n\n\nFork the Repo#\n\nFork this repository to your own GitHub account and then clone it to your local.\n\n\nInstall Node.js#\n\nWe recommend using Node.js 16 or 18. You can check your currently used Node.js\nversion with the following command:\n\nnode -v\n#v16.18.0\n\n\nIf you do not have Node.js installed in your current environment, you can use\nnvm or fnm to install it.\n\nHere is an example of how to install the Node.js 16 LTS version via nvm:\n\n# Install the LTS version of Node.js 16\nnvm install 16 --lts\n\n# Make the newly installed Node.js 16 as the default version\nnvm alias default 16\n\n# Switch to the newly installed Node.js 16\nnvm use 16\n\n\n\nInstall pnpm#\n\n# Enable pnpm with corepack, only available on Node.js >= `v14.19.0`\ncorepack enable\n\n\n\nInstall Dependencies#\n\npnpm install\n\n\nWhat this will do:\n\n * Install all dependencies\n * Create symlinks between packages in the monorepo\n * Run the prepare script to build all packages (this will take some time, but\n   is necessary to make ensure all packages are built)\n\n> A full rebuild of all packages is generally not required after this. If a new\n> feature you are developing requires an updated version of another package, it\n> is usually sufficient to build the changed dependencies.\n\n\nSet Git Email#\n\nPlease make sure you have your email set up in . This will be needed later when\nyou want to submit a pull request.\n\nCheck that your git client is already configured the email:\n\ngit config --list | grep email\n\n\nSet the email to global config:\n\ngit config --global user.email \"SOME_EMAIL@example.com\"\n\n\nSet the email for local repo:\n\ngit config user.email \"SOME_EMAIL@example.com\"\n\n\n--------------------------------------------------------------------------------\n\n\nMaking Changes and Building#\n\nOnce you have set up the local development environment in your forked repo, we\ncan start development.\n\n\nCheckout A New Branch#\n\nIt is recommended to develop on a new branch, as it will make things easier\nlater when you submit a pull request:\n\ngit checkout -b MY_BRANCH_NAME\n\n\n\nBuild the Package#\n\nTo build the package you want to change, first open the package directory, then\nrun the build command:\n\n# Replace some-path with the path of the package you want to work on\ncd ./packages/some-path\npnpm run build\n\n\nAlternatively, you can build the package from the root directory of the\nrepository using the --filter option:\n\npnpm run --filter @modern-js/some-package build\n\n\nBuild all packages:\n\npnpm run prepare\n\n\nIf you need to clean all node_modules/* in the project, run the reset command:\n\npnpm run reset\n\n\n--------------------------------------------------------------------------------\n\n\nTesting#\n\n\nAdd New Tests#\n\nIf you've fixed a bug or added code that should be tested, then add some tests.\n\nYou can add unit test cases in the /tests folder. The test syntax is based on\nJest and Vitest.\n\n\nRun Unit Tests#\n\nBefore submitting a pull request, it's important to make sure that the changes\nhaven't introduced any regressions or bugs. You can run the unit tests for the\nproject by executing the following command:\n\npnpm run test\n\n\nAlternatively, you can run the unit tests of single package using the --filter\noption:\n\npnpm run --filter @modern-js/some-package test\n\n\n\nRun E2E Tests#\n\nIn addition to the unit tests, the Modern.js also includes end-to-end (E2E)\ntests, which checks the functionality of the application as a whole.\n\nYou can run the test:e2e command to run the E2E tests:\n\npnpm run test:e2e\n\n\nIf you need to run a specified test, you can add keywords to filter:\n\n# Only run test cases with the copy-assets keyword\nnpx jest copy-assets\n\n\n--------------------------------------------------------------------------------\n\n\nLinting#\n\nTo help maintain consistency and readability of the codebase, we use a ESLint to\nlint the codes.\n\nYou can run the Linter by executing the following command:\n\npnpm run lint\n\n\n--------------------------------------------------------------------------------\n\n\nDocumentation#\n\nCurrently Modern.js provides documentation in English and Chinese. If you can\nuse Chinese, please update both documents at the same time. Otherwise, just\nupdate the English documentation.\n\nYou can find all the documentation in the packages/document folder:\n\nroot\n└─ packages\n   └─ document\n       ├─ builder-doc    # Documentation for Modern.js Builder\n       ├─ doc-tools-doc  # Documentation for Modern.js Doc\n       ├─ main-doc       # Documentation for Modern.js Framework\n       └─ module-doc     # Documentation for Modern.js Module\n\n\nThis website is built with Modern.js Doc, the document content can be written\nusing markdown or mdx syntax. You can refer to the Modern.js Doc Website for\ndetailed usage.\n\nThe source code of Modern.js Doc can be found in this folder.\n\n--------------------------------------------------------------------------------\n\n\nSubmitting Changes#\n\n\nAdd a Changeset#\n\nModern.js is using Changesets to manage the versioning and changelogs.\n\nIf you've changed some packages, you need add a new changeset for the changes.\nPlease run change command to select the changed packages and add the changeset\ninfo.\n\npnpm run change\n\n\n\nCommitting your Changes#\n\nCommit your changes to your forked repo, and create a pull request.\n\n\nFormat of PR titles#\n\nThe format of PR titles follow Conventional Commits.\n\nAn example:\n\nfeat(plugin-swc): Add `xxx` config\n^    ^    ^\n|    |    |__ Subject\n|    |_______ Scope\n|____________ Type\n\n\n--------------------------------------------------------------------------------\n\n\nPublishing#\n\nWe use Modern.js Monorepo Solution to manage version and changelog.\n\nRepository maintainers can publish a new version of all packages to npm.\n\nHere are the steps to publish (we generally use CI for releases and avoid\npublishing npm packages locally):\n\n 1. Pull latest code from the main branch.\n 2. Install:\n\npnpm i\n\n\n 3. Build packages:\n\npnpm run prepare\n\n\n 4. Bump version:\n\npnpm run bump\n\n\n 5. Commit the version change.\n\ngit add .\ngit commit -m \"Release va.b.c\"\n","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/community/contributing-guide.mdx","_relativePath":"en/community/contributing-guide.mdx"},{"id":55,"title":"Releases","routePath":"/en/community/releases","lang":"en","toc":[{"text":"Changelog","id":"changelog","depth":2,"charIndex":3},{"text":"Version Specification","id":"version-specification","depth":2,"charIndex":104},{"text":"Release Cycle","id":"release-cycle","depth":2,"charIndex":366},{"text":"Version Upgrade","id":"version-upgrade","depth":2,"charIndex":655}],"domain":"","content":"#\n\n\nChangelog#\n\nPlease visit GitHub - Releases to see what has changed with each release of\nModern.js.\n\n\nVersion Specification#\n\nModern.js follows the Semantic Versioning specification.\n\n * Major version: Contains incompatible API changes.\n * Minor version: Contains backward compatible functional changes.\n * Patch version: Contains backwards compatible bug fixes\n\n\nRelease Cycle#\n\n * Modern.js generally releases an official release every Thursday.\n * If critical bugs appear, we will release a revised version on the same day.\n * We expect to keep Modern.js v2 stable and compatible, there are currently no\n   plans to release the next major version.\n\n\nVersion Upgrade#\n\nWhen you need to upgrade the Modern.js version in your project, you can use the\nmodern upgrade command, refer to Upgrade.\n\nnpx modern upgrade\n","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/community/releases.mdx","_relativePath":"en/community/releases.mdx"},{"id":56,"title":"Showcase","routePath":"/en/community/showcase","lang":"en","toc":[{"text":"The Cases","id":"the-cases","depth":2,"charIndex":-1}],"domain":"","content":"#\n\nWelcome to the Modern.js showcase page! Here, we present a collection of\nwebsites that have been built using Modern.js.\n\nIf you have built a website using Modern.js, we would love for you to share it\nwith the community. Simply reply to the GitHub discussion thread with a link to\nyour website. We will collect content on a regular basis and display it on the\ncurrent page.\n\n\nThe Cases#","frontmatter":{"sidebar_position":0},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/community/showcase.mdx","_relativePath":"en/community/showcase.mdx"},{"id":57,"title":"Meet the Team","routePath":"/en/community/team","lang":"en","toc":[{"text":"Core Team Members","id":"core-team-members","depth":2,"charIndex":101},{"text":"All Contributors","id":"all-contributors","depth":2,"charIndex":156}],"domain":"","content":"#\n\nThe development of Modern.js is driven by ByteDance's Modern.js team and\ncommunity contributors.\n\n\nCore Team Members#\n\nThe Modern.js core team members:\n\n\nAll Contributors#\n\nThanks to the following friends for their contributions to Modern.js:","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/community/team.mdx","_relativePath":"en/community/team.mdx"},{"id":58,"title":"autoLoadPlugins","routePath":"/en/configure/app/auto-load-plugin","lang":"en","toc":[{"text":"Manual Registration Plugin","id":"manual-registration-plugin","depth":3,"charIndex":114},{"text":"Auto Registration plugin","id":"auto-registration-plugin","depth":3,"charIndex":327}],"domain":"","content":"#\n\n * Type: boolean\n * Default: false\n\nUsed to configure whether Modern.js enables auto-registration of plugins.\n\n\nManual Registration Plugin#\n\nBy default, installing the plugin requires you to register the plugin manually\nin the modern.config.ts.\n\n\n\n\nexport default defineConfig({\n  plugins: [appTools(), i18nPlugin()],\n});\n\n\n\nAuto Registration plugin#\n\nIn addition to means registration, Modern.js also provides a way to\nautomatically register plugins: set the autoLoadPlugin configuration item to\ntrue.\n\n\n\nexport default defineConfig({\n  autoLoadPlugins: true,\n});\n\n\nModern.js will help you automatically register the plugin by following these\nsteps\n\n 1. Modern.js maintains an official list of plugins internally.\n\nconst InternalPlugins = ['@modern-js/app-tools', '@modern-js/plugin-i18n', ...];\n\n\n 2. Modern.js will read your package.json and collect the dependency\n    information.\n\n\"dependencies\": {\n  \"@modern-js/plugin-i18n\": \"x.x.x\"\n  ...\n},\n\"devDependencies\": {\n  \"@modern-js/app-tools\": \"x.x.x\"\n  ...\n}\n\n\n 3. Modern.js observes that when you install dependencies such as\n    @modern-js/plugin-i18n and @modern-js/app-tools, automatic plugin\n    registration will be imported.\n\nYou can notice that this approach is relatively black-box and you are not even\naware of the process of loading the plugin. We want to expose more details to\nthe developer and be able to let the developer control the process.\n\nTherefore we recommend you to register the plugin manually.","frontmatter":{"title":"autoLoadPlugins","sidebar_position":11},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/auto-load-plugin.mdx","_relativePath":"en/configure/app/auto-load-plugin.mdx"},{"id":59,"title":"enableHandleWeb","routePath":"/en/configure/app/bff/enable-handle-web","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: boolean\n\n * Default: false\n\nCAUTION\n\nPlease enable BFF functionality in the current application project root\ndirectory using new first.\n\nBy default, the BFF service can only handle requests for BFF APIs.\n\nWhen this value is set to true, page request will also pass through BFF, and the\ndefault logic for page rendering built in Modern.js will run as the last\nmiddleware of the BFF service.\n\nexport default defineConfig({\n  bff: {\n    enableHandleWeb: true,\n  },\n});\n","frontmatter":{"title":"enableHandleWeb"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/bff/enable-handle-web.mdx","_relativePath":"en/configure/app/bff/enable-handle-web.mdx"},{"id":60,"title":"bff.prefix","routePath":"/en/configure/app/bff/prefix","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: string\n\n * Default: /api\n\nCAUTION\n\nPlease enable BFF functionality in the current application project root\ndirectory using new first.\n\nBy default, the prefix for accessing routes in the BFF API directory is /api, as\nshown in the following directory structure:\n\napi\n└── hello.ts\n\n\nThe route corresponding to api/hello.ts when accessed is\nlocalhost:8080/api/hello.\n\nThis configuration option can modify the default route prefix:\n\nexport default defineConfig({\n  bff: {\n    prefix: '/api-demo',\n  },\n});\n\n\nThe corresponding route for api/hello.ts when accessed is\nlocalhost:8080/api-demo/hello.","frontmatter":{"sidebar_label":"prefix"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/bff/prefix.mdx","_relativePath":"en/configure/app/bff/prefix.mdx"},{"id":61,"title":"bff.proxy","routePath":"/en/configure/app/bff/proxy","lang":"en","toc":[{"text":"Common Usage","id":"common-usage","depth":2,"charIndex":1326},{"text":"Solving Cross-Domain Issues for APIs","id":"solving-cross-domain-issues-for-apis","depth":3,"charIndex":1342}],"domain":"","content":"#\n\n * Type: Record\n\n * Default: {}\n\nCAUTION\n\nPlease enable BFF functionality in the current application project root\ndirectory using new first.\n\nWith simple configuration, Modern.js can automatically proxy requests sent to\nthe BFF server to the specified service.\n\nAdd the following configuration to modern.server-runtime.config.js to enable\nproxy:\n\n\nexport default defineConfig({\n  bff: {\n    proxy: {\n      '/api': 'https://cnodejs.org',\n    },\n  },\n});\n\n\nAssuming the address of Modern.js BFF server is localhost:8080, all requests\nstarting with api will be proxied to https://cnodejs.org, for example, the\nrequest to localhost:8080/api/v1/topics will be proxied to\nhttps://cnodejs.org/api/v1/topics.\n\n这里还可以进行路径重写，如将发送到 localhost:8080/api/topics 的请求代理到\nhttps://cnodejs.org/api/v1/topics。\n\n\nexport default defineConfig({\n  bff: {\n    proxy: {\n      '/api': {\n        target: 'https://cnodejs.org',\n        pathRewrite: { '/api/topics': '/api/v1/topics' },\n        changeOrigin: true,\n      },\n    },\n  },\n});\n\n\nUnlike dev.proxy, the proxy here only applies to requests entering the BFF/API\nservice; at the same time, this configuration can not only be used in the\ndevelopment environment, but also proxies corresponding requests in the\nproduction environment.\n\nBFF Proxy 使用了强大的 http-proxy-middleware，如果需要更多高级的用法， 可以查看它的文档。\n\n\nCommon Usage#\n\n\nSolving Cross-Domain Issues for APIs#\n\nDuring project development, cross-domain issues are often encountered because\nweb pages and API services are not deployed under the same domain name. There\nare many ways to solve cross-domain issues, and here we can easily solve them\nusing bff.proxy.\n\nINFO\n\nUnder BFF proxy mode, if you don't need to write BFF code, the API directory can\nbe deleted; BFF proxy will still be enabled.\n\nAs shown below, the following configuration in modern.server-runtime.config.ts\nwill proxy all web page requests starting with /api to a service on another\ndomain with the same domain.\n\nexport default defineServerConfig({\n  bff: {\n    proxy: {\n      '/api': 'https://cnodejs.org',\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"proxy"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/bff/proxy.mdx","_relativePath":"en/configure/app/bff/proxy.mdx"},{"id":62,"title":"builderPlugins","routePath":"/en/configure/app/builder-plugins","lang":"en","toc":[{"text":"Precautions","id":"precautions","depth":2,"charIndex":290},{"text":"When to use","id":"when-to-use","depth":2,"charIndex":638},{"text":"Example","id":"example","depth":2,"charIndex":1156},{"text":"Using plugins on npm","id":"using-plugins-on-npm","depth":3,"charIndex":1217},{"text":"Using local plugins","id":"using-local-plugins","depth":3,"charIndex":1417},{"text":"Plugin configuration items","id":"plugin-configuration-items","depth":3,"charIndex":1624}],"domain":"","content":"#\n\n * Type: BuilderPlugin[]\n * Default: []\n\nUsed to configure the Modern.js Builder plugin.\n\nModern.js Builder is the build engine of Modern.js, please read Builder for\nbackground. If you want to know how to write Builder plugins, you can refer to\nModern.js Builder - Introduce to Plugin.\n\n\nPrecautions#\n\nThis option is used to configure the Modern.js Builder plugins. If you need to\nconfigure other types of plugins, please select the corresponding configs:\n\n * Use plugins to configure Modern.js framework plugins.\n * Use tools.webpack or tools.webpackChain to configure webpack plugins.\n * Use tools.babel to configure Babel plugins.\n\n\nWhen to use#\n\nIn most scenarios, we recommend you to use the Modern.js framework plugin, which\ncan be registered through the plugins config. Because the API provided by the\nframework plugin is richer and more capable, while the API provided by the\nBuilder plugin can only be used to build scenes.\n\nWhen you need to reference some existing Builder plugins (and there is no\nrelated capability in Modern.js), or reuse Builder plugins between different\nframeworks, you can use the builderPlugins field to register them.\n\n\nExample#\n\nBelow is an example of using the Builder plugin.\n\n\nUsing plugins on npm#\n\nTo use a plugin on npm, you need to install the plugin through the package\nmanager and import it.\n\n\n\nexport default defineConfig({\n  builderPlugins: [myBuilderPlugin()],\n});\n\n\n\nUsing local plugins#\n\nUse the plugin in the local code repository, you can import it directly through\nthe relative path import.\n\n\n\nexport default defineConfig({\n  builderPlugins: [myBuilderPlugin()],\n});\n\n\n\nPlugin configuration items#\n\nIf the plugin provides some custom configuration options, you can pass in the\nconfiguration through the parameters of the plugin function.\n\n\n\nexport default defineConfig({\n  builderPlugins: [\n    myBuilderPlugin({\n      foo: 1,\n      bar: 2,\n    }),\n  ],\n});\n","frontmatter":{"title":"builderPlugins","sidebar_position":10},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/builder-plugins.mdx","_relativePath":"en/configure/app/builder-plugins.mdx"},{"id":63,"title":"deploy.microFrontend","routePath":"/en/configure/app/deploy/microFrontend","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":379},{"text":"Configuration","id":"configuration","depth":2,"charIndex":500},{"text":"enableHtmlEntry","id":"enablehtmlentry","depth":3,"charIndex":517},{"text":"externalBasicLibrary","id":"externalbasiclibrary","depth":3,"charIndex":1159}],"domain":"","content":"#\n\n * Type: object\n * Default: { enableHtmlEntry: true, externalBasicLibrary: false }\n\ninterface MicroFrontend {\n  enableHtmlEntry?: boolean;\n  externalBasicLibrary?: boolean;\n  moduleApp?: string;\n}\n\n\nDevelopers can use the deploy.microFrontend to configure micro-frontend\nsub-application information.\n\nCAUTION\n\nEnable the \"Micro Frontend\" features through pnpm run new first.\n\n\nExample#\n\nexport default defineConfig({\n  deploy: {\n    microFrontend: {\n      enableHtmlEntry: true,\n    },\n  },\n});\n\n\n\nConfiguration#\n\n\nenableHtmlEntry#\n\n * Type: boolean\n * Default: true\n\nWhether to enable the html entry, the default is true, the sub-application is\nbuilt into the HTML mode, Garfish supports the html entry, you can turn on the\nopen option, experience the corresponding features, and directly point the\nsub-application entry to the HTML entry when it is the HTML entry. Just point to\nthe html of the sub-application\n\nSet it to false to indicate that the sub-application is built as js. After the\nsub-application is built as js, it cannot run independently. When it is a JS\nentry, point the entry file of the sub-application to the JS of the\nsub-application.\n\n\nexternalBasicLibrary#\n\n * Type: boolean\n * Default: false\n\nWhether the external base library, when set to true, the current child\napplication will be external: react, react-dom, Modern.js main application will\nautomatically setExternal these two base libraries, if other types of frameworks\nPlease add react, react-dom dependencies through Garfish.setExternal.","frontmatter":{"sidebar_label":"microFrontend"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/deploy/microFrontend.mdx","_relativePath":"en/configure/app/deploy/microFrontend.mdx"},{"id":64,"title":"dev.assetPrefix","routePath":"/en/configure/app/dev/asset-prefix","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":4,"charIndex":618},{"text":"String type","id":"string-type","depth":4,"charIndex":875}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ndev.assetPrefix.\n\n * Type: boolean | string\n * Default: '/'\n\nSet the URL prefix of static assets in the development environment, similar to\nthe output.publicPath config of webpack.\n\nassetPrefix will affect the URLs of most of the static assets, including\nJavaScript files, CSS files, images, videos, etc. If an incorrect value is\nspecified, you'll receive 404 errors while loading these resources.\n\nThis config is only used in the development environment. In the production\nenvironment, please use the output.assetPrefix to set the URL prefix.\n\nBoolean Type#\n\nIf assetPrefix is set to true, the URL prefix will be http://localhost:port/:\n\nexport default {\n  dev: {\n    assetPrefix: true,\n  },\n};\n\n\nThe script URL will be:\n\n\n\n\nIf assetPrefix is set to false or not set, / is used as the default value.\n\nString type#\n\nWhen the value of assetPrefix is string type, the string will be used as the URL\nprefix:\n\nexport default {\n  dev: {\n    assetPrefix: 'http://example.com/assets/',\n  },\n};\n\n\nThe script URL will be:\n\n\n","frontmatter":{"sidebar_label":"assetPrefix"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/dev/asset-prefix.mdx","_relativePath":"en/configure/app/dev/asset-prefix.mdx"},{"id":65,"title":"dev.beforeStartUrl","routePath":"/en/configure/app/dev/before-start-url","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ndev.beforeStartUrl.\n\n * Type: () => Promise | void\n * Default: undefined\n\ndev.beforeStartUrl is used to execute a callback function before opening the\nstartUrl, this config needs to be used together with dev.startUrl.\n\nexport default {\n  dev: {\n    startUrl: true,\n    beforeStartUrl: async () => {\n      await doSomeThing();\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"beforeStartUrl"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/dev/before-start-url.mdx","_relativePath":"en/configure/app/dev/before-start-url.mdx"},{"id":66,"title":"dev.hmr","routePath":"/en/configure/app/dev/hmr","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see dev.hmr.\n\n * Type: boolean\n * Default: true\n\nWhether to enable Hot Module Replacement.\n\nIf hmr is set to false, the HMR and react-refresh will no longer work.\n\nexport default {\n  dev: {\n    hmr: false,\n  },\n};\n","frontmatter":{"sidebar_label":"hmr"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/dev/hmr.mdx","_relativePath":"en/configure/app/dev/hmr.mdx"},{"id":67,"title":"dev.host","routePath":"/en/configure/app/dev/host","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see dev.host.\n\n * Type: string\n * Default: 0.0.0.0\n\nSpecify the host that the dev server listens to.\n\nBy default, the dev server will listen to 0.0.0.0, which means listening to all\nnetwork interfaces, including localhost and public network addresses.\n\nIf you want the dev server to listen only on localhost, you can set it to:\n\nexport default {\n  dev: {\n    host: 'localhost',\n  },\n};\n","frontmatter":{"sidebar_label":"host"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/dev/host.mdx","_relativePath":"en/configure/app/dev/host.mdx"},{"id":68,"title":"dev.https","routePath":"/en/configure/app/dev/https","lang":"en","toc":[{"text":"Automatically generate certificates","id":"automatically-generate-certificates","depth":4,"charIndex":418},{"text":"Manually set the certificate","id":"manually-set-the-certificate","depth":4,"charIndex":1171}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see dev.https.\n\n * Type: boolean | { key: string; cert: string }\n * Default: false\n\nAfter configuring this option, you can enable HTTPS Dev Server, and disabling\nthe HTTP Dev Server.\n\nHTTP:\n\n  > Local: http://localhost:8080/\n  > Network: http://192.168.0.1:8080/\n\n\nHTTPS:\n\n  > Local: https://localhost:8080/\n  > Network: https://192.168.0.1:8080/\n\n\nAutomatically generate certificates#\n\nYou can directly set https to true, Builder will automatically generate the\nHTTPS certificate based on devcert.\n\nWhen using this method, you need to manually install the devcert dependency in\nyour project:\n\n# npm\nnpm install devcert@1.2.2 -D\n\n#yarn\nyarn add devcert@1.2.2 -D\n\n#pnpm\npnpm add devcert@1.2.2 -D\n\n\nThen configure dev.https to true:\n\nexport default {\n  dev: {\n    https: true,\n  },\n};\n\n\nThe devcert has some limitations, it does not currently support IP addresses\nyet.\n\nTIP\n\nThe https proxy automatically installs the certificate and needs root authority,\nplease enter the password according to the prompt.The password is only used to\ntrust the certificate, and will not be leaked or be used elsewhere.\n\nManually set the certificate#\n\nYou can also manually pass in the certificate and the private key required in\nthe dev.https option. This parameter will be directly passed to the createServer\nmethod of the https module in Node.js.\n\nFor details, please refer to https.createServer.\n\n\n\nexport default {\n  dev: {\n    https: {\n      key: fs.readFileSync('certificates/private.pem'),\n      cert: fs.readFileSync('certificates/public.pem'),\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"https"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/dev/https.mdx","_relativePath":"en/configure/app/dev/https.mdx"},{"id":69,"title":"dev.port","routePath":"/en/configure/app/dev/port","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":285}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see dev.port.\n\n * Type: number\n * Default: 8080\n\nSpecify a port number for Dev Server to listen.\n\nBy default, Dev Server listens on port 8080 and automatically increments the\nport number when the port is occupied.\n\n\nExample#\n\nSet the port to 3000:\n\nexport default {\n  dev: {\n    port: 3000,\n  },\n};\n","frontmatter":{"sidebar_label":"port"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/dev/port.mdx","_relativePath":"en/configure/app/dev/port.mdx"},{"id":70,"title":"dev.progressBar","routePath":"/en/configure/app/dev/progress-bar","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ndev.progressBar.\n\n * Type:\n\ntype ProgressBar =\n  | boolean\n  | {\n      id?: string;\n    };\n\n\n * Default: true\n\nWhether to display progress bar during compilation.\n\nexport default {\n  dev: {\n    progressBar: false,\n  },\n};\n\n\nIf you need to modify the text displayed on the left side of the progress bar,\nyou can set the id option:\n\nexport default {\n  dev: {\n    progressBar: {\n      id: 'Some Text',\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"progressBar"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/dev/progress-bar.mdx","_relativePath":"en/configure/app/dev/progress-bar.mdx"},{"id":71,"title":"dev.proxy","routePath":"/en/configure/app/dev/proxy","lang":"en","toc":[{"text":"Register Plugin","id":"register-plugin","depth":3,"charIndex":253},{"text":"Object Type","id":"object-type","depth":3,"charIndex":658},{"text":"String Type","id":"string-type","depth":3,"charIndex":1166},{"text":"Start Proxy","id":"start-proxy","depth":3,"charIndex":1481}],"domain":"","content":"#\n\n * Type: string | Object\n * Default: null\n\nThis option is used to configure a global proxy based on whistle in the\ndevelopment environment, which can be used to view and modify HTTP/HTTPS\nrequests, responses, and can also be used as a proxy server.\n\n\nRegister Plugin#\n\nBefore using this option, you need to install and register the\n@modern-js/plugin-proxy plugin:\n\n# npm\nnpm add @modern-js/plugin-proxy -D\n\n#yarn\nyarn add @modern-js/plugin-proxy -D\n\n#pnpm\npnpm add @modern-js/plugin-proxy -D\n\n\nAfter the installation, please register the plugin in the modern.config.ts file:\n\n\n\n\nexport default defineConfig({\n  plugins: [appTools(), proxyPlugin()],\n});\n\n\n\nObject Type#\n\nWhen the value of dev.proxy is object type, the key of the object corresponds to\nthe matching pattern, and the value of the object corresponds to the matching\ntarget.\n\nExample:\n\nexport default defineConfig({\n  dev: {\n    proxy: {\n      'https://www.baidu.com': 'https://google.com.hk',\n      // Static files can be returned directly via the file protocol\n      'https://example.com/api': 'file://./data.json',\n    },\n  },\n});\n\n\nPlease refer to whistle - Matching Patterns for detailed usage.\n\n\nString Type#\n\nWhen the value of dev.proxy is string type, it can be used to specify a separate\nproxy file, for example:\n\nexport default defineConfig({\n  dev: {\n    proxy: './proxy.js',\n  },\n});\n\n\nmodule.exports = {\n  name: 'my-app',\n  rules: `\n    ^example.com:8080/api/***   http://localhost:3001/api/$\n  `,\n};\n\n\n\nStart Proxy#\n\nExecute dev, when the prompt is as follows, the proxy server starts\nsuccessfully:\n\n  App running at:\n\n  Local:    http://localhost:8080/\n  Network:  http://192.168.0.1:8080/\n\nℹ  info      Starting the proxy server.....\n✔  success   Proxy Server start on localhost:8899\n\n\nAccess the localhost:8899 to view the Network and configure proxy rules on the\nUI interface:\n\n\n\nINFO\n\nThe https agent automatically installs the certificate to obtain root\nprivileges. Please enter the password as prompted. ** The password is only used\nwhen the certificate is trusted and will not be leaked or used for other links\n**.","frontmatter":{"sidebar_label":"proxy"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/dev/proxy.mdx","_relativePath":"en/configure/app/dev/proxy.mdx"},{"id":72,"title":"dev.startUrl","routePath":"/en/configure/app/dev/start-url","lang":"en","toc":[{"text":"Port placeholder","id":"port-placeholder","depth":3,"charIndex":659}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see dev.startUrl.\n\n * Type: boolean | string | string[] | undefined\n * Default: undefined\n\ndev.startUrl is used to set the URL of the page that automatically opens in the\nbrowser when Dev Server starts.\n\nBy default, no page will be opened.\n\nYou can set it to the following values:\n\nexport default {\n  dev: {\n    // Open the project's default preview page, equivalent to `http://localhost:`\n    startUrl: true,\n    // Open the specified page\n    startUrl: 'http://localhost:8080',\n    // Open multiple pages\n    startUrl: ['http://localhost:8080', 'http://localhost:8080/about'],\n  },\n};\n\n\n\nPort placeholder#\n\nSince the port number may change, you can use the placeholder to refer to the\ncurrent port number, and Builder will automatically replace the placeholder with\nthe actual listening port number.\n\nexport default {\n  dev: {\n    startUrl: 'http://localhost:/home',\n  },\n};\n","frontmatter":{"sidebar_label":"startUrl"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/dev/start-url.mdx","_relativePath":"en/configure/app/dev/start-url.mdx"},{"id":73,"title":"experiments.lazyCompilation","routePath":"/en/configure/app/experiments/lazy-compilation","lang":"en","toc":[{"text":"Lazy Compilation for Dynamic Imports","id":"lazy-compilation-for-dynamic-imports","depth":3,"charIndex":680},{"text":"Lazy Compilation for Entires","id":"lazy-compilation-for-entires","depth":3,"charIndex":1138},{"text":"Limitations","id":"limitations","depth":3,"charIndex":1969},{"text":"Disable split chunks","id":"disable-split-chunks","depth":4,"charIndex":1983},{"text":"Use proxy","id":"use-proxy","depth":4,"charIndex":2286}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nexperiments.lazyCompilation.\n\n * Type:\n\ntype LazyCompilationOptions =\n  | boolean\n  | {\n      // Whether to enable lazy compilation for entries\n      entries?: boolean;\n      // Whether to enable lazy compilation for dynamic imports\n      imports?: boolean;\n    };\n\n\n * Default: false\n * Bundler: only support webpack\n\nUsed to enable the lazy compilation (i.e. compile on demand). When this config\nis enabled, Builder will compile entrypoints and dynamic imports only when they\nare used. It will improve the compilation startup time of the project.\n\nLazy compilation only takes effect in the development.\n\n\nLazy Compilation for Dynamic Imports#\n\nLazy compile async modules introduced by Dynamic Import:\n\nexport default {\n  experiments: {\n    lazyCompilation: {\n      imports: true,\n      entries: false,\n    },\n  },\n};\n\n\nWhen imports option is enabled, all async modules will only be compiled when\nrequested. If your project is a single-page application, and routing is split\nthrough Dynamic Import, there will be a significant effect of speeding up\ncompilation.\n\n\nLazy Compilation for Entires#\n\nIn addition to lazy compilation for async modules, you can also choose to lazily\ncompile both entries and async modules at the same time.\n\nexport default {\n  experiments: {\n    lazyCompilation: {\n      imports: true,\n      entries: true,\n    },\n  },\n};\n\n\nThe above config can also be simplified to:\n\nexport default {\n  experiments: {\n    lazyCompilation: true,\n  },\n};\n\n\nWhen entries option is enabled, all pages will not be compiled when the\ncompilation is started, and the page will be compiled only when you visit it.\n\nWhen using lazy compilation for entries, there are some considerations:\n\n * Only work for multi-page applications, no work for single-page applications.\n * when you visit a page, there will be a white screen for a period of time due\n   to waiting for the page to be compiled.\n\n\nLimitations#\n\nDisable split chunks#\n\nWhen you enable lazy compilation, in order to ensure the compilation results,\nBuilder will disable split chunks in the development. This will not affect the\nbuild results in the production, but will cause a difference between the build\nresults of the development and production.\n\nUse proxy#\n\nLazy Compilation relies on the local development server of webpack. When you\nproxy a domain name to localhost, Lazy Compilation will not work properly.\nTherefore, if you need to develop with proxy, please disable Lazy Compilation.","frontmatter":{"sidebar_label":"lazyCompilation"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/experiments/lazy-compilation.mdx","_relativePath":"en/configure/app/experiments/lazy-compilation.mdx"},{"id":74,"title":"html.appIcon","routePath":"/en/configure/app/html/app-icon","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":523}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see html.appIcon.\n\n * Type: string\n * Default: undefined\n\nSet the file path of the apple-touch-icon icon for the iOS system, can be set as\na relative path relative to the project root directory, or as an absolute path\nto the file. Setting it as a CDN URL is not currently supported.\n\nAfter config this option, the icon will be automatically copied to the dist\ndirectory during the compilation, and the corresponding link tag will be added\nto the HTML.\n\n\nExample#\n\nSet as a relative path:\n\nexport default {\n  html: {\n    appIcon: './src/assets/icon.png',\n  },\n};\n\n\nSet to an absolute path:\n\n\n\nexport default {\n  html: {\n    appIcon: path.resolve(__dirname, './src/assets/icon.png'),\n  },\n};\n\n\nAfter recompiling, the following tags are automatically generated in the HTML:\n\n\n","frontmatter":{"sidebar_label":"appIcon"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/app-icon.mdx","_relativePath":"en/configure/app/html/app-icon.mdx"},{"id":75,"title":"html.crossorigin","routePath":"/en/configure/app/html/crossorigin","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"Optional Values","id":"optional-values","depth":3,"charIndex":-1}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.crossorigin.\n\n * Type: boolean | 'anonymous' | 'use-credentials'\n * Default: false\n\nSet the crossorigin attribute of the\n\nThe","frontmatter":{"sidebar_label":"crossorigin"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/crossorigin.mdx","_relativePath":"en/configure/app/html/crossorigin.mdx"},{"id":76,"title":"html.disableHtmlFolder","routePath":"/en/configure/app/html/disable-html-folder","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":282}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.disableHtmlFolder.\n\n * Type: boolean\n * Default: false\n\nRemove the folder of the HTML files. When this option is enabled, the generated\nHTML file path will change from [name]/index.html to [name].html.\n\n\nExample#\n\nBy default, the structure of HTML files in the dist directory is:\n\n/dist\n└── html\n    └── main\n        └── index.html\n\n\nEnable the html.disableHtmlFolder config:\n\nexport default {\n  html: {\n    disableHtmlFolder: true,\n  },\n};\n\n\nAfter recompiling, the directory structure of the HTML files in dist is:\n\n/dist\n└── html\n    └── main.html\n\n\n> If you want to set the path of the HTML files, use the output.distPath.html\n> config.","frontmatter":{"sidebar_label":"disableHtmlFolder"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/disable-html-folder.mdx","_relativePath":"en/configure/app/html/disable-html-folder.mdx"},{"id":77,"title":"html.faviconByEntries","routePath":"/en/configure/app/html/favicon-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":346}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.faviconByEntries.\n\n * Type: Record\n * Default: undefined\n\nSet different favicon for different pages.\n\nThe usage is same as favicon, and you can use the \"entry name\" as the key to set\neach page individually.\n\nfaviconByEntries will overrides the value set in favicon.\n\n\nExample#\n\nexport default {\n  html: {\n    favicon: './src/assets/default.png',\n    faviconByEntries: {\n      foo: './src/assets/foo.png',\n    },\n  },\n};\n\n\nAfter recompiling, you will see:\n\n * The favicon for page foo is ./src/assets/foo.png.\n * The favicon for other pages is ./src/assets/default.png.","frontmatter":{"sidebar_label":"faviconByEntries"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/favicon-by-entries.mdx","_relativePath":"en/configure/app/html/favicon-by-entries.mdx"},{"id":78,"title":"html.favicon","routePath":"/en/configure/app/html/favicon","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":460}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see html.favicon.\n\n * Type: string\n * Default: undefined\n\nSet the favicon icon path for all pages, can be set as:\n\n * a URL.\n * an absolute path to the file.\n * a relative path relative to the project root directory.\n\nAfter config this option, the favicon will be automatically copied to the dist\ndirectory during the compilation, and the corresponding link tag will be added\nto the HTML.\n\n\nExample#\n\nSet as a relative path:\n\nexport default {\n  html: {\n    favicon: './src/assets/icon.png',\n  },\n};\n\n\nSet to an absolute path:\n\n\n\nexport default {\n  html: {\n    favicon: path.resolve(__dirname, './src/assets/icon.png'),\n  },\n};\n\n\nSet to a URL:\n\n\n\nexport default {\n  html: {\n    favicon: 'https://foo.com/favicon.ico',\n  },\n};\n\n\nAfter recompiling, the following tags are automatically generated in the HTML:\n\n\n","frontmatter":{"sidebar_label":"favicon"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/favicon.mdx","_relativePath":"en/configure/app/html/favicon.mdx"},{"id":79,"title":"html.injectByEntries","routePath":"/en/configure/app/html/inject-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":362}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.injectByEntries.\n\n * Type: Record\n * Default: undefined\n\nSet different script tag inject positions for different pages.\n\nThe usage is same as inject, and you can use the \"entry name\" as the key to set\neach page individually.\n\ninjectByEntries will overrides the value set in inject.\n\n\nExample#\n\nexport default {\n  html: {\n    inject: 'head',\n    injectByEntries: {\n      foo: 'body',\n    },\n  },\n};\n\n\nAfter recompiling, you will see:\n\n * The script tag of the page foo will be injected inside the body tag.\n * The script tag of other pages will be injected inside the head tag.","frontmatter":{"sidebar_label":"injectByEntries"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/inject-by-entries.mdx","_relativePath":"en/configure/app/html/inject-by-entries.mdx"},{"id":80,"title":"html.inject","routePath":"/en/configure/app/html/inject","lang":"en","toc":[{"text":"Default inject position","id":"default-inject-position","depth":4,"charIndex":-1},{"text":"Inject into body","id":"inject-into-body","depth":4,"charIndex":-1}],"domain":"","content":"","frontmatter":{"sidebar_label":"inject"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/inject.mdx","_relativePath":"en/configure/app/html/inject.mdx"},{"id":81,"title":"html.metaByEntries","routePath":"/en/configure/app/html/meta-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":336}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.metaByEntries.\n\n * Type: Record\n * Default: undefined\n\nSet different meta tags for different pages.\n\nThe usage is same as meta, and you can use the \"entry name\" as the key to set\neach page individually.\n\nmetaByEntries will overrides the value set in meta.\n\n\nExample#\n\nexport default {\n  html: {\n    meta: {\n      description: 'ByteDance',\n    },\n    metaByEntries: {\n      foo: {\n        description: 'TikTok',\n      },\n    },\n  },\n};\n\n\nAfter compiling, you can see that the meta of the page foo is:\n\n\n\n\nThe meta of other pages is:\n\n\n","frontmatter":{"sidebar_label":"metaByEntries"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/meta-by-entries.mdx","_relativePath":"en/configure/app/html/meta-by-entries.mdx"},{"id":82,"title":"html.meta","routePath":"/en/configure/app/html/meta","lang":"en","toc":[{"text":"String Type","id":"string-type","depth":4,"charIndex":157},{"text":"Object Type","id":"object-type","depth":4,"charIndex":484},{"text":"Remove Default Value","id":"remove-default-value","depth":3,"charIndex":911}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see html.meta.\n\n * Type: Record>\n * Default: undefined\n\nConfigure the tag of the HTML.\n\nString Type#\n\nWhen the value of a meta object is a string, the key of the object is\nautomatically mapped to name, and the value is mapped to content.\n\nFor example to set description:\n\nexport default {\n  html: {\n    meta: {\n      description: 'a description of the page',\n    },\n  },\n};\n\n\nThe generated meta tag in HTML is:\n\n\n\n\nObject Type#\n\nWhen the value of a meta object is an object, the key: value of the object is\nmapped to the attribute of the meta tag.\n\nIn this case, the name and content properties will not be set by default.\n\nFor example to set http-equiv:\n\nexport default {\n  html: {\n    meta: {\n      'http-equiv': {\n        'http-equiv': 'x-ua-compatible',\n        content: 'ie=edge',\n      },\n    },\n  },\n};\n\n\nThe meta tag in HTML is:\n\n\n\n\n\nRemove Default Value#\n\nSetting the value of the meta object to false and the meta tag will not be\ngenerated.\n\nFor example to remove the imagemode:\n\nexport default {\n  html: {\n    meta: {\n      imagemode: false,\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"meta"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/meta.mdx","_relativePath":"en/configure/app/html/meta.mdx"},{"id":83,"title":"html.mountId","routePath":"/en/configure/app/html/mount-id","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"Notes","id":"notes","depth":3,"charIndex":-1},{"text":"Update Relevant Code","id":"update-relevant-code","depth":4,"charIndex":-1},{"text":"Custom Templates","id":"custom-templates","depth":4,"charIndex":-1}],"domain":"","content":"","frontmatter":{"sidebar_label":"mountId"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/mount-id.mdx","_relativePath":"en/configure/app/html/mount-id.mdx"},{"id":84,"title":"html.scriptLoading","routePath":"/en/configure/app/html/script-loading","lang":"en","toc":[{"text":"defer","id":"defer","depth":3,"charIndex":-1},{"text":"blocking","id":"blocking","depth":3,"charIndex":-1},{"text":"module","id":"module","depth":3,"charIndex":-1}],"domain":"","content":"","frontmatter":{"sidebar_label":"scriptLoading"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/script-loading.mdx","_relativePath":"en/configure/app/html/script-loading.mdx"},{"id":85,"title":"html.tagsByEntries","routePath":"/en/configure/app/html/tags-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":374}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.tagsByEntries.\n\n * Type: Record>\n * Default: undefined\n\nUsed for multiple entry applications, injecting different tags for each entry.\n\nThe usage is the same as tags, and you can use the \"entry name\" as the key to\nset each page individually.\n\ntagsByEntries will override the value set in tags.\n\n\nExample#\n\nexport default {\n  html: {\n    tags: [{ tag: 'script', attrs: { src: 'a.js' } }],\n    tagsByEntries: {\n      foo: [{ tag: 'script', attrs: { src: 'b.js' } }],\n    },\n  },\n};\n\n\nCompile the application and you can see a tag injected on the foo page:\n\n\n\n\nAnd for any other pages:\n\n\n","frontmatter":{"sidebar_label":"tagsByEntries"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/tags-by-entries.mdx","_relativePath":"en/configure/app/html/tags-by-entries.mdx"},{"id":86,"title":"html.tags","routePath":"/en/configure/app/html/tags","lang":"en","toc":[{"text":"Tag Object","id":"tag-object","depth":4,"charIndex":-1},{"text":"Tags Handler","id":"tags-handler","depth":4,"charIndex":-1},{"text":"Limitation","id":"limitation","depth":4,"charIndex":-1}],"domain":"","content":"","frontmatter":{"sidebar_label":"tags"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/tags.mdx","_relativePath":"en/configure/app/html/tags.mdx"},{"id":87,"title":"html.templateByEntries","routePath":"/en/configure/app/html/template-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":356}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.templateByEntries.\n\n * Type: Object\n * Default: undefined\n\nSet different template file for different pages.\n\nThe usage is same as template, and you can use the \"entry name\" as the key to\nset each page individually.\n\ntemplateByEntries will overrides the value set in template.\n\n\nExample#\n\nexport default {\n  html: {\n    template: './static/index.html',\n    templateByEntries: {\n      foo: './src/pages/foo/index.html',\n      bar: './src/pages/bar/index.html',\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"templateByEntries"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/template-by-entries.mdx","_relativePath":"en/configure/app/html/template-by-entries.mdx"},{"id":88,"title":"html.templateParametersByEntries","routePath":"/en/configure/app/html/template-parameters-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":402}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.templateParametersByEntries.\n\n * Type: Object\n * Default: undefined\n\nSet different template parameters for different pages.\n\nThe usage is same as templateParameters, and you can use the \"entry name\" as the\nkey to set each page individually.\n\ntemplateParametersByEntries will overrides the value set in templateParameters.\n\n\nExample#\n\nexport default {\n  html: {\n    templateParametersByEntries: {\n      foo: {\n        type: 'a',\n      },\n      bar: {\n        type: 'b',\n      },\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"templateParametersByEntries"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/template-parameters-by-entries.mdx","_relativePath":"en/configure/app/html/template-parameters-by-entries.mdx"},{"id":89,"title":"html.templateParameters","routePath":"/en/configure/app/html/template-parameters","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":1484}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.templateParameters.\n\n * Type: Object | Function\n * Default:\n\ntype DefaultParameters = {\n  meta: string; // corresponding to html.meta config\n  title: string; // corresponding to html.title config\n  mountId: string; // corresponding to html.mountId config\n  entryName: string; // entry name\n  assetPrefix: string; // corresponding to output.assetPrefix config\n  compilation: webpack.Compilation; // Compilation object corresponding to webpack\n  webpackConfig: config; // webpack config\n  // htmlWebpackPlugin built-in parameters\n  // See https://github.com/jantimon/html-webpack-plugin for details\n  htmlWebpackPlugin: {\n    tags: object;\n    files: object;\n    options: object;\n  };\n};\n\n\nDefine the parameters in the HTML template, corresponding to the\ntemplateParameters config of html-webpack-plugin. You can use the config as an\nobject or a function.\n\nIf it is an object, it will be merged with the default parameters. For example:\n\nexport default {\n  html: {\n    templateParameters: {\n      title: 'My App',\n    },\n  },\n};\n\n\nIf it is a function, the default parameters will be passed in, and you can\nreturn an object to override the default parameters. For example:\n\nexport default {\n  html: {\n    templateParameters: defaultParameters => {\n      console.log(defaultParameters.compilation);\n      console.log(defaultParameters.title);\n      return {\n        title: 'My App',\n      };\n    },\n  },\n};\n\n\n\nExample#\n\nTo use the foo parameter in the HTML template, you can add the following config:\n\nexport default {\n  html: {\n    templateParameters: {\n      foo: 'bar',\n    },\n  },\n};\n\n\nOr you can use a function to dynamically generate the parameters:\n\nexport default {\n  html: {\n    templateParameters: defaultParameters => {\n      return {\n        foo: 'bar',\n      };\n    },\n  },\n};\n\n\nThen you can use the foo parameter in the HTML template by <%= foo %>:\n\n\n\n\nThe compiled HTML is:\n\n\n","frontmatter":{"sidebar_label":"templateParameters"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/template-parameters.mdx","_relativePath":"en/configure/app/html/template-parameters.mdx"},{"id":90,"title":"html.template","routePath":"/en/configure/app/html/template","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":219}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see html.template.\n\n * Type: string\n * Default:\n\nDefine the path to the HTML template, corresponding to the template config of\nhtml-webpack-plugin.\n\n\nExample#\n\nReplace the default template with a custom HTML template file, you can add the\nfollowing config:\n\nexport default {\n  html: {\n    template: './static/index.html',\n  },\n};\n","frontmatter":{"sidebar_label":"template"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/template.mdx","_relativePath":"en/configure/app/html/template.mdx"},{"id":91,"title":"html.titleByEntries","routePath":"/en/configure/app/html/title-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":336}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nhtml.titleByEntries.\n\n * Type: Record\n * Default: undefined\n\nSet different title for different pages.\n\nThe usage is same as title, and you can use the \"entry name\" as the key to set\neach page individually.\n\ntitleByEntries will overrides the value set in title.\n\n\nExample#\n\nexport default {\n  html: {\n    title: 'ByteDance',\n    titleByEntries: {\n      foo: 'TikTok',\n    },\n  },\n};\n\n\nAfter recompiling, you can see:\n\n * The title of the page foo is TikTok.\n * The title of other pages is ByteDance.","frontmatter":{"sidebar_label":"titleByEntries"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/title-by-entries.mdx","_relativePath":"en/configure/app/html/title-by-entries.mdx"},{"id":92,"title":"html.title","routePath":"/en/configure/app/html/title","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see html.title.\n\n * Type: string\n * Default: undefined\n\nSet the title tag of the HTML page, for example:\n\nexport default {\n  html: {\n    title: 'example',\n  },\n};\n","frontmatter":{"sidebar_label":"title"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/html/title.mdx","_relativePath":"en/configure/app/html/title.mdx"},{"id":93,"title":"output.assetPrefix","routePath":"/en/configure/app/output/asset-prefix","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":770}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.assetPrefix.\n\n * Type: boolean | string\n * Default: '/'\n\nWhen using CDN in the production environment, you can use this option to set the\nURL prefix of static assets, similar to the output.publicPath config of webpack.\n\nassetPrefix will affect the URLs of most of the static assets, including\nJavaScript files, CSS files, images, videos, etc. If an incorrect value is\nspecified, you'll receive 404 errors while loading these resources.\n\nThis config is only used in the production environment. In the development\nenvironment, please use the dev.assetPrefix to set the URL prefix.\n\nAfter setting, the URLs of JavaScript, CSS and other static files will be\nprefixed with output.assetPrefix:\n\n\nExample#\n\nexport default {\n  output: {\n    assetPrefix: 'https://cdn.example.com/assets/',\n  },\n};\n\n\nAfter building, you can see that the JS files are loaded from:\n\n\n","frontmatter":{"sidebar_label":"assetPrefix"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/asset-prefix.mdx","_relativePath":"en/configure/app/output/asset-prefix.mdx"},{"id":94,"title":"output.assetsRetry","routePath":"/en/configure/app/output/assets-retry","lang":"en","toc":[{"text":"assetsRetry.max","id":"assetsretrymax","depth":3,"charIndex":1318},{"text":"assetsRetry.domain","id":"assetsretrydomain","depth":3,"charIndex":1511},{"text":"assetsRetry.type","id":"assetsretrytype","depth":3,"charIndex":1757},{"text":"assetsRetry.test","id":"assetsretrytest","depth":3,"charIndex":1982},{"text":"assetsRetry.crossOrigin","id":"assetsretrycrossorigin","depth":3,"charIndex":2240},{"text":"assetsRetry.onRetry","id":"assetsretryonretry","depth":3,"charIndex":2488},{"text":"assetsRetry.onSuccess","id":"assetsretryonsuccess","depth":3,"charIndex":2891},{"text":"assetsRetry.onFail","id":"assetsretryonfail","depth":3,"charIndex":3305},{"text":"assetsRetry.inlineScript","id":"assetsretryinlinescript","depth":3,"charIndex":3713}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.assetsRetry.\n\n * Type: Object\n\noutput.assetsRetry is used to configure the retry of assets.The type of\nAssetsRetryOptions is as follows:\n\nexport type AssetsRetryHookContext = {\n  times: number;\n  domain: string;\n  url: string;\n  tagName: string;\n};\n\nexport type AssetsRetryOptions = {\n  type?: string[];\n  domain?: string[];\n  max?: number;\n  test?: string | ((url: string) => boolean);\n  crossOrigin?: boolean;\n  onRetry?: (options: AssetsRetryHookContext) => void;\n  onSuccess?: (options: AssetsRetryHookContext) => void;\n  onFail?: (options: AssetsRetryHookContext) => void;\n};\n\n\nSince the ability will inject some extra runtime code into HTML, we have\ndisabled this ability by default. If you need to enable it, you can configure it\nin the form of an object, for example:\n\nexport default {\n  output: {\n    assetsRetry: {},\n  },\n};\n\n\nWhen you enable this ability, the default config of assetsRetry is as follows:\n\nexport const defaultAssetsRetryOptions: AssetsRetryOptions = {\n  type: ['script', 'link', 'img'],\n  domain: [],\n  max: 3,\n  test: '',\n  crossOrigin: false,\n  onRetry: () => {},\n  onSuccess: () => {},\n  onFail: () => {},\n};\n\n\nAt the same time, you can also customize your retry logic using the following\nconfigurations.\n\n\nassetsRetry.max#\n\n * Type: number\n * Default: 3\n\nThe maximum number of retries for a single asset. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      max: 3,\n    },\n  },\n};\n\n\n\nassetsRetry.domain#\n\n * Type: string[]\n * Default: []\n\nThe domain of the asset to be retried. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      domain: ['https://cdn1.example.com', 'https://cdn2.example.com'],\n    },\n  },\n};\n\n\n\nassetsRetry.type#\n\n * Type: string[]\n * Default: ['script', 'link', 'img']\n\nThe type of the asset to be retried. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      type: ['script', 'link'],\n    },\n  },\n};\n\n\n\nassetsRetry.test#\n\n * Type: string | ((url: string) => boolean) | undefined\n * Default: undefined\n\nThe test function of the asset to be retried. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      test: /cdn\\.example\\.com/,\n    },\n  },\n};\n\n\n\nassetsRetry.crossOrigin#\n\n * Type: undefined | boolean\n * Default: false\n\nWhether to add the crossOrigin attribute to the asset to be retried. For\nexample:\n\nexport default {\n  output: {\n    assetsRetry: {\n      crossOrigin: true,\n    },\n  },\n};\n\n\n\nassetsRetry.onRetry#\n\n * Type: undefined | (options: AssetsRetryHookContext) => void\n\nThe callback function when the asset is being retried. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      onRetry: ({ times, domain, url, tagName }) => {\n        console.log(\n          `Retry ${times} times, domain: ${domain}, url: ${url}, tagName: ${tagName}`,\n        );\n      },\n    },\n  },\n};\n\n\n\nassetsRetry.onSuccess#\n\n * Type: undefined | (options: AssetsRetryHookContext) => void\n\nThe callback function when the asset is successfully retried. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      onSuccess: ({ times, domain, url, tagName }) => {\n        console.log(\n          `Retry ${times} times, domain: ${domain}, url: ${url}, tagName: ${tagName}`,\n        );\n      },\n    },\n  },\n};\n\n\n\nassetsRetry.onFail#\n\n * Type: undefined | (options: AssetsRetryHookContext) => void\n\nThe callback function when the asset is failed to be retried. For example:\n\nexport default {\n  output: {\n    assetsRetry: {\n      onFail: ({ times, domain, url, tagName }) => {\n        console.log(\n          `Retry ${times} times, domain: ${domain}, url: ${url}, tagName: ${tagName}`,\n        );\n      },\n    },\n  },\n};\n\n\n\nassetsRetry.inlineScript#\n\n * Type: boolean\n * Default: true\n\nWhether to inline the runtime JavaScript code of assetsRetry into the HTML file.\n\nIf you don't want to insert the code in the HTML file, you can set\nassetsRetry.inlineScript to false:\n\nexport default {\n  output: {\n    assetsRetry: {\n      inlineScript: false,\n    },\n  },\n};\n\n\nAfter adding the above configuration, the runtime code of assetsRetry will be\nextracted into a separate assets-retry.[version].js file and output to the dist\ndirectory.\n\nThe downside is that assets-retry.[version].js itself may fail to load. If this\nhappens, the assets retry will not work. Therefore, we prefer to inline the\nruntime code into the HTML file.","frontmatter":{"sidebar_label":"assetsRetry"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/assets-retry.mdx","_relativePath":"en/configure/app/output/assets-retry.mdx"},{"id":95,"title":"output.charset","routePath":"/en/configure/app/output/charset","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.charset.\n\n * Type: 'ascii' | 'utf8'\n * Default: 'ascii'\n\nBy default, Builder's output is ASCII-only and will escape all non-ASCII\ncharacters.\n\nIf you want to output the original characters without using escape sequences,\nyou can set output.charset to utf8.\n\nexport default {\n  output: {\n    charset: 'utf8',\n  },\n};\n\n\nBuilder will automatically add to the generated HTML files if output.charset is\nutf8.","frontmatter":{"sidebar_label":"charset"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/charset.mdx","_relativePath":"en/configure/app/output/charset.mdx"},{"id":96,"title":"output.cleanDistPath","routePath":"/en/configure/app/output/clean-dist-path","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.cleanDistPath.\n\n * Type: boolean\n * Default: true\n\nWhether to clean all files in the dist path before starting compilation.\n\nBy default, Builder clean up the dist file, you can disable this behavior by\nsetting cleanDistPath to false.\n\nexport default {\n  output: {\n    cleanDistPath: false,\n  },\n};\n","frontmatter":{"sidebar_label":"cleanDistPath"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/clean-dist-path.mdx","_relativePath":"en/configure/app/output/clean-dist-path.mdx"},{"id":97,"title":"output.convertToRem","routePath":"/en/configure/app/output/convert-to-rem","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":4,"charIndex":334},{"text":"Object Type","id":"object-type","depth":4,"charIndex":852},{"text":"Example","id":"example","depth":3,"charIndex":2420}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.convertToRem.\n\n * Type: boolean | object\n * Default: false\n\nBy setting output.convertToRem, the Builder can do the following things:\n\n * Convert px to rem in CSS.\n * Insert runtime code into the HTML template to set the fontSize of the root\n   element.\n\nBoolean Type#\n\nIf output.convertToRem is set to true, Rem processing capability will be turned\non.\n\nexport default {\n  output: {\n    convertToRem: true,\n  },\n};\n\n\nAt this point, the rem configuration defaults as follows:\n\n{\n  enableRuntime: true,\n  rootFontSize: 50,\n  screenWidth: 375,\n  rootFontSize: 50,\n  maxRootFontSize: 64,\n  widthQueryKey: '',\n  excludeEntries: [],\n  supportLandscape: false,\n  useRootFontSizeBeyondMax: false,\n  pxtorem: {\n    rootValue: 50,\n    unitPrecision: 5,\n    propList: ['*'],\n  }\n}\n\n\nObject Type#\n\nWhen the value of output.convertToRem is object type, The Builder will perform\nRem processing based on the current configuration.\n\noptions:\n\nNAME                       TYPE       DEFAULT   DESCRIPTION\nenableRuntime              boolean    true      Whether to generate runtime code to calculate and set the\n                                                font size of the root element\ninlineRuntime              boolean    true      Whether to inline the runtime code to HTML. If set to false,\n                                                the runtime code will be extracted into a separate\n                                                convert-rem.[version].js file and output to the dist\n                                                directory\nrootFontSize               number     50        The root element font size\nmaxRootFontSize            number     64        The root element max font size\nwidthQueryKey              string     ''        Get clientWidth from the url query based on widthQueryKey\nscreenWidth                number     375       The screen width for UI design drawings (Usually, fontSize =\n                                                (clientWidth * rootFontSize) / screenWidth)\nexcludeEntries             string[]   []        The entries to ignore\nsupportLandscape           boolean    false     Use height to calculate rem in landscape\nuseRootFontSizeBeyondMax   boolean    false     Whether to use rootFontSize when large than maxRootFontSize\npxtorem                    object               postcss-pxtorem options\n\n\nExample#\n\nexport default {\n  output: {\n    convertToRem: {\n      rootFontSize: 30,\n      excludeEntries: ['404', 'page2'],\n      pxtorem: {\n        propList: ['font-size'],\n      },\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"convertToRem"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/convert-to-rem.mdx","_relativePath":"en/configure/app/output/convert-to-rem.mdx"},{"id":98,"title":"output.copy","routePath":"/en/configure/app/output/copy","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see output.copy.\n\n * Type: CopyPluginOptions | CopyPluginOptions['patterns']\n * Default: undefined\n\nCopies the specified file or directory to the dist directory.\n\nFor example, copy the files under src/assets to the dist directory:\n\nexport default {\n  output: {\n    copy: [{ from: './src/assets', to: '' }],\n  },\n};\n\n\nFor more detailed configuration, please refer to: copy-webpack-plugin.","frontmatter":{"sidebar_label":"copy"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/copy.mdx","_relativePath":"en/configure/app/output/copy.mdx"},{"id":99,"title":"output.cssModuleLocalIdentName","routePath":"/en/configure/app/output/css-module-local-ident-name","lang":"en","toc":[{"text":"Default Value","id":"default-value","depth":3,"charIndex":360},{"text":"Template String","id":"template-string","depth":3,"charIndex":688},{"text":"Example","id":"example","depth":3,"charIndex":1139}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.cssModuleLocalIdentName.\n\n * Type: string\n * Default:\n\n// isProd indicates that the production build\nconst localIdentName = isProd\n  ? '[hash:base64:5]'\n  : '[path][name]__[local]--[hash:base64:5]';\n\n\nSets the format of the className generated by CSS Modules after compilation.\n\n\nDefault Value#\n\ncssModuleLocalIdentName has different default values in development and\nproduction.\n\nIn a production, Builder will generate shorter class names to reduce the bundle\nsize.\n\n\n\n// In development, the value is `.src-index-module__header--xxxxx`\n// In production, the value is `.xxxxx`\nconsole.log(styles.header);\n\n\n\nTemplate String#\n\nYou can use the following template strings in cssModuleLocalIdentName:\n\n * [name] - the basename of the asset.\n * [local] - original class.\n * [hash] - the hash of the string.\n * [folder] - the folder relative path.\n * [path] - the relative path.\n * [file] - filename and path.\n * [ext] - extension with leading dot.\n * [hash::]: hash with hash settings.\n\nTIP\n\nWhen using Rspack as the bundler, currently does not support custom .\n\n\nExample#\n\nSet cssModuleLocalIdentName to other value:\n\nexport default {\n  output: {\n    cssModuleLocalIdentName: '[hash:base64:4]',\n  },\n};\n","frontmatter":{"sidebar_label":"cssModuleLocalIdentName"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/css-module-local-ident-name.mdx","_relativePath":"en/configure/app/output/css-module-local-ident-name.mdx"},{"id":100,"title":"output.cssModules","routePath":"/en/configure/app/output/css-modules","lang":"en","toc":[{"text":"cssModules.auto","id":"cssmodulesauto","depth":3,"charIndex":251}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.cssModules.\n\n * Type:\n\ntype CssModules = {\n  auto?: boolean | RegExp | ((resourcePath: string) => boolean);\n};\n\n\n * Default: undefined\n\nSetup css modules configuration.\n\n\ncssModules.auto#\n\nThe auto configuration option allows CSS modules to be automatically enabled\nbased on their filenames.\n\n * Type: boolean | RegExp | ((resourcePath: string) => boolean);\n\n * Default: undefined\n\nType description:\n\n * undefined: According to the output.disableCssModuleExtension configuration\n   item to determine which style files to enable CSS modules.\n * true: enable CSS modules for all files matching\n   /\\.module\\.\\w+$/i.test(filename) regexp.\n * false: disables CSS Modules.\n * RegExp: enable CSS modules for all files matching /RegExp/i.test(filename)\n   regexp.\n * function: enable CSS Modules for files based on the filename satisfying your\n   filter function check.\n\nexport default {\n  output: {\n    cssModules: {\n      auto: resource => {\n        return resource.includes('.module.') || resource.includes('shared/');\n      },\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"cssModules"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/css-modules.mdx","_relativePath":"en/configure/app/output/css-modules.mdx"},{"id":101,"title":"output.dataUriLimit","routePath":"/en/configure/app/output/data-uri-limit","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":752}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.dataUriLimit.\n\n * Type:\n\ntype DataUriLimitConfig = {\n  svg?: number;\n  font?: number;\n  image?: number;\n  media?: number;\n};\n\n\n * Default:\n\nconst defaultDatUriLimit = {\n  svg: 10000,\n  font: 10000,\n  image: 10000,\n  media: 10000,\n};\n\n\nSet the size threshold to inline static assets such as images and fonts.\n\nBy default, static assets will be Base64 encoded and inline into the page if the\nsize is less than 10KB.\n\nYou can adjust the threshold by setting the dataUriLimit config.\n\nDetail:\n\n * svg: The threshold of the SVG image.\n * font: The threshold of the font file.\n * image: The threshold of non-SVG images.\n * media: The threshold of media assets such as videos.\n\n\nExample#\n\nSet the threshold of images to 5000 Bytes, and set media assets not to be\ninlined:\n\nexport default {\n  output: {\n    dataUriLimit: {\n      image: 5000,\n      media: 0,\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"dataUriLimit"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/data-uri-limit.mdx","_relativePath":"en/configure/app/output/data-uri-limit.mdx"},{"id":102,"title":"output.disableCssExtract","routePath":"/en/configure/app/output/disable-css-extract","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableCssExtract.\n\n * Type: boolean\n * Default: false\n * Bundler: only support webpack\n\nWhether to disable CSS extract and inline CSS files into JS files.\n\nBy default, Builder will extract CSS into a separate .css file and output it to\nthe dist directory. When this option is set to true, CSS files will be inlined\ninto JS files and inserted on the page at runtime via","frontmatter":{"sidebar_label":"disableCssExtract"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/disable-css-extract.mdx","_relativePath":"en/configure/app/output/disable-css-extract.mdx"},{"id":103,"title":"output.disableCssModuleExtension","routePath":"/en/configure/app/output/disable-css-module-extension","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":693},{"text":"Detailed","id":"detailed","depth":3,"charIndex":780},{"text":"disableCssModuleExtension is false (default)","id":"disablecssmoduleextension-is-false-(default)","depth":4,"charIndex":858},{"text":"disableCssModuleExtension is true","id":"disablecssmoduleextension-is-true","depth":4,"charIndex":1095}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableCssModuleExtension.\n\n * Type: boolean\n * Default: false\n\nWhether to treat all .css files in the source directory as CSS Modules.\n\nBy default, only the *.module.css files are treated as CSS Modules. After\nenabling this config, all *.css style files in the source directory will be\nregarded as CSS Modules.\n\n.sass, .scss and .less files are also affected by disableCssModuleExtension.\n\nTIP\n\nWe do not recommend enabling this config, because after enabling\ndisableCssModuleExtension, CSS Modules files and ordinary CSS files cannot be\nclearly distinguished, which is not conducive to long-term maintenance.\n\n\nExample#\n\nexport default {\n  output: {\n    disableCssModuleExtension: true,\n  },\n};\n\n\n\nDetailed#\n\nThe following is a detailed explanation of the CSS Modules rules:\n\ndisableCssModuleExtension is false (default)#\n\nThe following files are treated as CSS Modules:\n\n * all *.module.css files\n\nThe following files are treated as normal CSS:\n\n * all *.css files (excluding .module)\n * all *.global.css files\n\ndisableCssModuleExtension is true#\n\nThe following files are treated as CSS Modules:\n\n * *.css and *.module.css files in the source directory\n * *.module.css files under node_modules\n\nThe following files are treated as normal CSS:\n\n * all *.global.css files\n * *.css files under node_modules (without .module)\n\nTIP\n\nFor CSS Modules files inside node_modules, please always use the *.module.css\nsuffix.","frontmatter":{"sidebar_label":"disableCssModuleExtension"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/disable-css-module-extension.mdx","_relativePath":"en/configure/app/output/disable-css-module-extension.mdx"},{"id":104,"title":"output.disableFilenameHash","routePath":"/en/configure/app/output/disable-filename-hash","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":379}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableFilenameHash.\n\n * Type: boolean\n * Default: false\n\nRemove the hash from the name of static files after production build.\n\nAfter the production build, there will be a hash in the middle of the filename\nby default. You can disable this behavior through the output.disableFilenameHash\nconfig.\n\n\nExample#\n\nBy default, the filename is:\n\nFile                                     Size         Gzipped\ndist/static/css/187.7879e19d.css         126.99 KB    9.17 KB\ndist/static/js/main.18a568e5.js          2.24 KB      922 B\n\n\nAdd output.disableFilenameHash config:\n\nexport default {\n  output: {\n    disableFilenameHash: true,\n  },\n};\n\n\nAfter rebuild, the filenames become:\n\nFile                            Size         Gzipped\ndist/static/css/187.css         126.99 KB    9.17 KB\ndist/static/js/main.js          2.24 KB      922 B\n","frontmatter":{"sidebar_label":"disableFilenameHash"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/disable-filename-hash.mdx","_relativePath":"en/configure/app/output/disable-filename-hash.mdx"},{"id":105,"title":"output.disableInlineRuntimeChunk","routePath":"/en/configure/app/output/disable-inline-runtime-chunk","lang":"en","toc":[{"text":"Disable Inlining","id":"disable-inlining","depth":3,"charIndex":766},{"text":"Merge Into Page Chunk","id":"merge-into-page-chunk","depth":3,"charIndex":1041}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableInlineRuntimeChunk.\n\n * Type: boolean\n * Default: false\n\nUsed to control whether to inline the bundler's runtime code into HTML.\n\nWhat is runtimeChunk\n\nBuilder will generate a builder-runtime.js file in the dist directory, which is\nthe runtime code of webpack or Rspack.\n\nruntimeChunk is a piece of runtime code, which is provided by webpack or Rspack,\nthat contains the necessary module processing logic, such as module loading,\nmodule parsing, etc. See Runtime for details.\n\nIn the production environment, Builder will inline the runtimeChunk file into\nthe HTML file by default instead of writing it to the dist directory. This is\ndone to reduce the number of file requests.\n\n\nDisable Inlining#\n\nIf you don't want the runtimeChunk file to be inlined into the HTML file, you\ncan set disableInlineRuntimeChunk to true and a separate builder-runtime.js file\nwill be generated.\n\nexport default {\n  output: {\n    disableInlineRuntimeChunk: true,\n  },\n};\n\n\n\nMerge Into Page Chunk#\n\nIf you don't want to generate a separate runtimeChunk file, but want the\nruntimeChunk code to be bundled into the page chunk, you can set the config like\nthis:\n\nexport default {\n  tools: {\n    webpack: {\n      optimization: {\n        runtimeChunk: false,\n      },\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"disableInlineRuntimeChunk"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/disable-inline-runtime-chunk.mdx","_relativePath":"en/configure/app/output/disable-inline-runtime-chunk.mdx"},{"id":106,"title":"output.disableMinimize","routePath":"/en/configure/app/output/disable-minimize","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableMinimize.\n\n * Type: boolean\n * Default: false\n\nWhether to disable code minification on production builds.\n\nBy default, JS and CSS code is minified during the production build to improve\nthe page performance. If you do not want to the code to be minified, you can set\ndisableMinimize to true.\n\nexport default {\n  output: {\n    disableMinimize: true,\n  },\n};\n\n\nTIP\n\nThis configuration is usually used for debugging and troubleshooting. It is not\nrecommended to disable code minification in production environments, as it will\nsignificantly degrade the page performance.","frontmatter":{"sidebar_label":"disableMinimize"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/disable-minimize.mdx","_relativePath":"en/configure/app/output/disable-minimize.mdx"},{"id":107,"title":"output.disableNodePolyfill","routePath":"/en/configure/app/output/disable-node-polyfill","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: boolean\n * Default: true\n\nThis config is used to control whether to inject the Polyfill of the Node module\ninto the code.\n\nBy default, we will not inject Node Polyfill into the code to avoid bundle size\nincrease. If you need to inject Node Polyfill, you can set\noutput.disableNodePolyfill to false:\n\nexport default defineConfig({\n  output: {\n    disableNodePolyfill: false,\n  },\n});\n\n\nThis config is implemented based on the Node Polyfill plugin of Modern.js\nBuilder, you can read Modern.js Builder - Node Polyfill Plugin documentation for\ndetails.","frontmatter":{"sidebar_label":"disableNodePolyfill"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/disable-node-polyfill.mdx","_relativePath":"en/configure/app/output/disable-node-polyfill.mdx"},{"id":108,"title":"output.disableSourceMap","routePath":"/en/configure/app/output/disable-source-map","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableSourceMap.\n\n * Type:\n\ntype DisableSourceMap =\n  | boolean\n  | {\n      js?: boolean;\n      css?: boolean;\n    };\n\n\n * Default:\n\nconst defaultDisableSourceMap = {\n  js: false,\n  css: process.env.NODE_ENV === 'production',\n};\n\n\nWhether to disable Source Map generation.\n\nWhat is a Source Map\n\nSource Map is an information file that saves the source code mapping\nrelationship. It records each location of the compiled code and the\ncorresponding pre-compilation location. With Source Map, you can directly view\nthe source code when debugging the compiled code.\n\nBy default, Builder's Source Map generation rules are:\n\n * In development build, SourceMap of JS files and CSS files will be generated,\n   which is convenient for debugging.\n * In production build, the Source Map of JS files will be generated for\n   debugging and troubleshooting online problems; the Source Map of CSS files\n   will not be generated.\n\nTIP\n\nWhen using Rspack as the bundler, disable css sourcemap alone is not currently\nsupported.\n\nIf the project does not need Source Map, you can turned off it to speed up the\ncompile speed.\n\nexport default {\n  output: {\n    disableSourceMap: true,\n  },\n};\n\n\nIf you want to enable Source Map in development and disable it in the\nproduction, you can set to:\n\nexport default {\n  output: {\n    disableSourceMap: process.env.NODE_ENV === 'production',\n  },\n};\n\n\nIf you need to individually control the Source Map of JS files or CSS files, you\ncan refer to the following settings:\n\nexport default {\n  output: {\n    disableSourceMap: {\n      js: false,\n      css: true,\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"disableSourceMap"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/disable-source-map.mdx","_relativePath":"en/configure/app/output/disable-source-map.mdx"},{"id":109,"title":"output.disableSvgr","routePath":"/en/configure/app/output/disable-svgr","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableSvgr.\n\n * Type: boolean\n * Default: false\n\nWhether to transform SVGs into React components. If true, will treat all .svg\nfiles as assets.\n\nBy default, when an SVG resource is referenced in a JS file, Builder will call\nSVGR to convert the SVG into a React component. If you are sure that all SVG\nresources in your project are not being used as React components, you can turn\noff this conversion by setting disableSvgr to true to improve build performance.\n\nexport default {\n  output: {\n    disableSvgr: true,\n  },\n};\n","frontmatter":{"sidebar_label":"disableSvgr"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/disable-svgr.mdx","_relativePath":"en/configure/app/output/disable-svgr.mdx"},{"id":110,"title":"output.disableTsChecker","routePath":"/en/configure/app/output/disable-ts-checker","lang":"en","toc":[{"text":"Blocking Compilation","id":"blocking-compilation","depth":3,"charIndex":475},{"text":"Example","id":"example","depth":3,"charIndex":693}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.disableTsChecker.\n\n * Type: boolean\n * Default: false\n\nWhether to disable TypeScript type checker during compilation.\n\nBy default, Builder will run the TypeScript type checker in a separate process\nduring the build process. Its checking logic is consistent with TypeScript's\nnative tsc command. You can use tsconfig.json or Builder's tools.tsChecker\nconfig to customize the checking behavior.\n\n\nBlocking Compilation#\n\n * In development build, type errors will not block the compilation process.\n * In production build, type errors will cause the build to fail to ensure the\n   stability of the production code.\n\n\nExample#\n\nDisable TypeScript type checker:\n\nexport default {\n  output: {\n    disableTsChecker: true,\n  },\n};\n\n\nDisable type checker in development:\n\nexport default {\n  output: {\n    disableTsChecker: process.env.NODE_ENV === 'development',\n  },\n};\n\n\nDisable type checker in production:\n\nexport default {\n  output: {\n    disableTsChecker: process.env.NODE_ENV === 'production',\n  },\n};\n\n\nTIP\n\nIt is not recommended to disable type checker in production, which will reduce\nthe stability of the production code, please use it with caution.","frontmatter":{"sidebar_label":"disableTsChecker"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/disable-ts-checker.mdx","_relativePath":"en/configure/app/output/disable-ts-checker.mdx"},{"id":111,"title":"output.distPath","routePath":"/en/configure/app/output/dist-path","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":1110}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.distPath.\n\n * Type:\n\ntype DistPathConfig = {\n  root?: string;\n  js?: string;\n  css?: string;\n  svg?: string;\n  font?: string;\n  html?: string;\n  image?: string;\n  media?: string;\n  server?: string;\n};\n\n\n * Default:\n\nconst defaultDistPath = {\n  root: 'dist',\n  html: 'html',\n  js: 'static/js',\n  css: 'static/css',\n  svg: 'static/svg',\n  font: 'static/font',\n  image: 'static/image',\n  media: 'static/media',\n  server: 'bundles',\n};\n\n\nSet the directory of the dist files. Builder will output files to the\ncorresponding subdirectory according to the file type.\n\nDetail:\n\n * root: The root directory of all files.\n * html: The output directory of HTML files.\n * js: The output directory of JavaScript files.\n * css: The output directory of CSS style files.\n * svg: The output directory of SVG images.\n * font: The output directory of font files.\n * image: The output directory of non-SVG images.\n * media: The output directory of media assets, such as videos.\n * server: The output directory of server bundles when target is node.\n\n\nExample#\n\nThe JavaScript files will be output to the distPath.root + distPath.js\ndirectory, which is dist/static/js.\n\nIf you need to output JavaScript files to the build/resource/js directory, you\ncan add following config:\n\nexport default {\n  output: {\n    distPath: {\n      root: 'build',\n      js: 'resource/js',\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"distPath"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/dist-path.mdx","_relativePath":"en/configure/app/output/dist-path.mdx"},{"id":112,"title":"output.enableAssetFallback","routePath":"/en/configure/app/output/enable-asset-fallback","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":269}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.enableAssetFallback.\n\n * Type: boolean\n * Default: false\n\nIf this option is enabled, all unrecognized files will be emitted to the dist\ndirectory; otherwise, an exception will be thrown.\n\n\nExample#\n\nEnable the config:\n\nexport default {\n  output: {\n    enableAssetFallback: true,\n  },\n};\n\n\nImport a module of unknown type in code:\n\nimport './foo.xxx';\n\n\nAfter compilation, foo.xxx will be output to the dist/static/media directory.\n\nYou can control the output path and filename after fallback through the\noutput.distPath.media and output.filename.media configs.\n\nTIP\n\nEnabling this config will change the rules structure in the webpack config. In\nmost cases, we do not recommend using this config.","frontmatter":{"sidebar_label":"enableAssetFallback"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/enable-asset-fallback.mdx","_relativePath":"en/configure/app/output/enable-asset-fallback.mdx"},{"id":113,"title":"output.enableAssetManifest","routePath":"/en/configure/app/output/enable-asset-manifest","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":217}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.enableAssetManifest.\n\n * Type: boolean\n * Default: false\n\nWhether to generate a manifest file that contains information of all assets.\n\n\nExample#\n\nEnable asset manifest:\n\nexport default {\n  output: {\n    enableAssetManifest: true,\n  },\n};\n\n\nAfter compiler, there will be a dist/manifest.json file:\n\n{\n  \"files\": {\n    \"main.css\": \"/static/css/main.45b01211.css\",\n    \"main.js\": \"/static/js/main.52fd298f.js\",\n    \"html/main/index.html\": \"/html/main/index.html\"\n  },\n  \"entrypoints\": [\"static/css/main.45b01211.css\", \"static/js/main.52fd298f.js\"]\n}\n","frontmatter":{"sidebar_label":"enableAssetManifest"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/enable-asset-manifest.mdx","_relativePath":"en/configure/app/output/enable-asset-manifest.mdx"},{"id":114,"title":"output.enableCssModuleTSDeclaration","routePath":"/en/configure/app/output/enable-css-module-tsdeclaration","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":249}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.enableCssModuleTSDeclaration.\n\n * Type: boolean\n * Default: false\n * Bundler: only support webpack\n\nWhether to generate a TypeScript declaration file for CSS modules.\n\n\nExample#\n\nEnable CSS module TypeScript declaration:\n\nexport default {\n  output: {\n    enableCssModuleTSDeclaration: true,\n  },\n};\n\n\nAfter building, there will be a .d.ts file for each CSS module file. For example\n\ninterface CssExports {\n  title: string;\n}\nexport const cssExports: CssExports;\nexport default cssExports;\n","frontmatter":{"sidebar_label":"enableCssModuleTSDeclaration"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/enable-css-module-tsdeclaration.mdx","_relativePath":"en/configure/app/output/enable-css-module-tsdeclaration.mdx"},{"id":115,"title":"output.enableInlineScripts","routePath":"/en/configure/app/output/enable-inline-scripts","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"Using RegExp","id":"using-regexp","depth":3,"charIndex":239}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.enableInlineScripts.\n\n * Type: boolean\n * Default: false\n * Bundler: only support webpack\n\nWhether to inline output scripts files (.js files) into HTML with\n\n\nUsing RegExp#\n\nIf you need to inline part of the JS files, you can set enableInlineScripts to a\nregular expression that matches the URL of the JS file that needs to be inlined.\n\nFor example, to inline main.js into HTML, you can add the following\nconfiguration:\n\nexport default {\n  output: {\n    enableInlineScripts: /\\/main\\.\\w+\\.js$/,\n  },\n};\n\n\nTIP\n\nThe production filename will contains a hash by default, such as\n/main.18a568e5.js.","frontmatter":{"sidebar_label":"enableInlineScripts"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/enable-inline-scripts.mdx","_relativePath":"en/configure/app/output/enable-inline-scripts.mdx"},{"id":116,"title":"output.enableInlineStyles","routePath":"/en/configure/app/output/enable-inline-styles","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"Using RegExp","id":"using-regexp","depth":3,"charIndex":-1}],"domain":"","content":"","frontmatter":{"sidebar_label":"enableInlineStyles"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/enable-inline-styles.mdx","_relativePath":"en/configure/app/output/enable-inline-styles.mdx"},{"id":117,"title":"output.enableLatestDecorators","routePath":"/en/configure/app/output/enable-latest-decorators","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.enableLatestDecorators.\n\n * Type: boolean\n * Default: false\n\nWhether to use the new decorator proposal.\n\nBy default, Builder uses the legacy decorator proposal when compiling\ndecorators.\n\nWhen output.enableLatestDecorators is set to true, the Builder will compile with\nthe new decorator proposal (version 2018-09).\n\nexport default {\n  output: {\n    enableLatestDecorators: true,\n  },\n};\n","frontmatter":{"sidebar_label":"enableLatestDecorators"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/enable-latest-decorators.mdx","_relativePath":"en/configure/app/output/enable-latest-decorators.mdx"},{"id":118,"title":"output.externals","routePath":"/en/configure/app/output/externals","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":355}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.externals.\n\n * Type: string | object | function | RegExp\n\n * Default: undefined\n\nAt build time, prevent some import dependencies from being packed into bundles\nin your code, and instead fetch them externally at runtime.\n\nFor more information, please see: webpack Externals\n\n\nExample#\n\nExclude the react-dom dependency from the build product. To get this module at\nruntime, the value of react-dom will globally retrieve the ReactDOM variable.\n\nexport default {\n  output: {\n    externals: {\n      'react-dom': 'ReactDOM',\n    },\n  },\n};\n\n\nTIP\n\nWhen the build target is Web Worker, externals will not take effect. This is\nbecause the Worker environment can not access global variables.","frontmatter":{"sidebar_label":"externals"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/externals.mdx","_relativePath":"en/configure/app/output/externals.mdx"},{"id":119,"title":"output.filename","routePath":"/en/configure/app/output/filename","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":1262},{"text":"Filename of Async Modules","id":"filename-of-async-modules","depth":3,"charIndex":1963}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.filename.\n\n * Type:\n\ntype FilenameConfig = {\n  js?: string;\n  css?: string;\n  svg?: string;\n  font?: string;\n  image?: string;\n  media?: string;\n};\n\n\n * Default:\n\n// Development\nconst devDefaultFilename = {\n  js: '[name].js',\n  css: '[name].css',\n  svg: '[name].[contenthash:8].svg',\n  font: '[name].[contenthash:8][ext]',\n  image: '[name].[contenthash:8][ext]',\n  media: '[name].[contenthash:8][ext]',\n};\n\n// Production\nconst prodDefaultFilename = {\n  js: '[name].[contenthash:8].js',\n  css: '[name].[contenthash:8].css',\n  svg: '[name].[contenthash:8].svg',\n  font: '[name].[contenthash:8][ext]',\n  image: '[name].[contenthash:8][ext]',\n  media: '[name].[contenthash:8][ext]',\n};\n\n\nSets the filename of dist files.\n\nAfter the production build, there will be a hash in the middle of the filename\nby default. This behavior can be disabled through the output.disableFilenameHash\nconfig.\n\nThe following are the details of each filename:\n\n * js: The name of the JavaScript file.\n * css: The name of the CSS style file.\n * svg: The name of the SVG image.\n * font: The name of the font file.\n * image: The name of a non-SVG image.\n * media: The name of a media asset, such as a video.\n\n\nExample#\n\nTo set the name of the JavaScript file to [name]_script.js, use the following\nconfiguration:\n\nexport default {\n  output: {\n    filename: {\n      js:\n        process.env.NODE_ENV === 'production'\n          ? '[name]_script.[contenthash:8].js'\n          : '[name]_script.js',\n    },\n  },\n};\n\n\nFilename hash\n\nUsually, we only set the filename hash in the production mode (i.e., when\nprocess.env.NODE_ENV === 'production').\n\nIf you set the filename hash in the development mode, it may cause HMR to fail\n(especially for CSS files). This is because every time the file content changes,\nthe hash value changes, preventing tools like mini-css-extract-plugin from\nreading the latest file content.\n\n\nFilename of Async Modules#\n\nWhen you import a module via dynamic import, the module will be bundled into a\nsingle file, and its default naming rules are as follows:\n\n * In the development environment, the filename will be generated based on the\n   module path, such as dist/static/js/async/src_add_ts.js.\n * In the production environment, it will be a random numeric id, such as\n   dist/static/js/async/798.27e3083e.js. This is to avoid leaking the source\n   code path in the production environment, and the number of characters is also\n   less.\n\nconst { add } = await import('./add.ts');\n\n\nIf you want to specify a fixed name for the async module, you can use the magic\ncomments provided by the bundler to achieve this, using webpackChunkName to\nspecify the module name:\n\nconst { add } = await import(\n  /* webpackChunkName: \"my-chunk-name\" */ './add.ts'\n);\n\n\nAfter specifying the module name as above, the generated file will be\ndist/static/js/async/my-chunk-name.js.","frontmatter":{"sidebar_label":"filename"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/filename.mdx","_relativePath":"en/configure/app/output/filename.mdx"},{"id":120,"title":"output.legalComments","routePath":"/en/configure/app/output/legal-comments","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":834}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.legalComments.\n\n * Type: 'linked' | 'inline' | 'none'\n * Default: 'linked'\n\nConfigure how to handle the legal comment.\n\nA \"legal comment\" is considered to be any statement-level comment in JS or\nrule-level comment in CSS that contains @license or @preserve or that starts\nwith //! or /*!. These comments are preserved in output files by default since\nthat follows the intent of the original authors of the code.\n\nThis behavior can be configured by using one of the following options:\n\n * linked: Extract all legal comments to a .LEGAL.txt file and link to them with\n   a comment.\n * inline: Preserve all legal comments in original position.\n * none: Remove all legal comments.\n\nTIP\n\nWhen using Rspack as the bundler, inline is not currently supported.\n\n\nExample#\n\nRemove all legal comments:\n\nexport default {\n  output: {\n    legalComments: 'none',\n  },\n};\n","frontmatter":{"sidebar_label":"legalComments"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/legal-comments.mdx","_relativePath":"en/configure/app/output/legal-comments.mdx"},{"id":121,"title":"output.overrideBrowserslist","routePath":"/en/configure/app/output/override-browserslist","lang":"en","toc":[{"text":"Priority","id":"priority","depth":4,"charIndex":406},{"text":"Default Value","id":"default-value","depth":4,"charIndex":806},{"text":"Example","id":"example","depth":3,"charIndex":1015},{"text":"Set according to Targets","id":"set-according-to-targets","depth":4,"charIndex":1322}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.overrideBrowserslist.\n\n * Type: string[] | Record\n * Default: undefined\n\nSpecifies the range of target browsers that the project is compatible with. This\nvalue will be used by @babel/preset-env and autoprefixer to identify the\nJavaScript syntax that need to be transformed and the CSS browser prefixes that\nneed to be added.\n\nPriority#\n\nThe overrideBrowserslist config will override the .browserslistrc config file in\nthe project and the browserslist field in package.json.\n\nIn most cases, it is recommended to use the .browserslistrc file rather than the\noverrideBrowserslist config. Because the .browserslistrc file is the official\nconfig file, it is more general and can be recognized by other libraries in the\ncommunity.\n\nDefault Value#\n\nIf there is no browserslist configs defined in the project, nor\noverrideBrowserslist defined, then Builder will set the default browserslist to:\n\n['> 0.01%', 'not dead', 'not op_mini all'];\n\n\n\nExample#\n\nAn example compatible with mobile scenarios:\n\nexport default {\n  output: {\n    overrideBrowserslist: [\n      'iOS >= 9',\n      'Android >= 4.4',\n      'last 2 versions',\n      '> 0.2%',\n      'not dead',\n    ],\n  },\n};\n\n\nCheck out the browserslist documentation to learn more about browserslist.\n\nSet according to Targets#\n\nWhen you build multiple targets at the same time, you can set different browser\nranges for different targets. At this point, you need to set\noverrideBrowserslist to an object whose key is the corresponding build target.\n\nFor example to set different ranges for web and node:\n\nexport default {\n  output: {\n    overrideBrowserslist: {\n      web: [\n        'iOS >= 9',\n        'Android >= 4.4',\n        'last 2 versions',\n        '> 0.2%',\n        'not dead',\n      ],\n      node: ['node >= 14'],\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"overrideBrowserslist"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/override-browserslist.mdx","_relativePath":"en/configure/app/output/override-browserslist.mdx"},{"id":122,"title":"output.polyfill","routePath":"/en/configure/app/output/polyfill","lang":"en","toc":[{"text":"Config","id":"config","depth":3,"charIndex":224},{"text":"entry","id":"entry","depth":4,"charIndex":233},{"text":"usage","id":"usage","depth":4,"charIndex":402},{"text":"ua","id":"ua","depth":4,"charIndex":649},{"text":"off","id":"off","depth":4,"charIndex":897}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.polyfill.\n\n * Type: 'entry' | 'usage' | 'ua' | 'off'\n * Default: 'entry'\n\nVia output.polyfill you can configure how the polyfill is injected.\n\n\nConfig#\n\nentry#\n\nPolyfill is injected in every entry file when output.polyfill is configured as\n'entry'.\n\nEquivalent to useBuiltIns: 'entry' configuration in @babel/preset-env.\n\nusage#\n\nPolyfill is injected in each file based on the API used in the code.\n\nEquivalent to useBuiltIns: 'usage' configuration in @babel/preset-env.\n\nTIP\n\nWhen using Rspack as the bundler, the usage configuration item is not currently\nsupported.\n\nua#\n\nThe Polyfill code is dynamically delivered according to the currently requested\nUA information.\n\nThe dynamic delivery feature needs to be used with the upper-level framework.\nFor more details, please refer to Modern.js - Polyfill At Runtime.\n\noff#\n\nPolyfill is not injected. When using this option, you need to ensure code\ncompatibility yourself.","frontmatter":{"sidebar_label":"polyfill"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/polyfill.mdx","_relativePath":"en/configure/app/output/polyfill.mdx"},{"id":123,"title":"output.splitRouteChunks","routePath":"/en/configure/app/output/splitRouteChunks","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: boolean\n * Default: true\n\nWhen using convention-based routing, the framework will split js and css based\non the route to load on demand. If your project does not want to split js and\ncss based on routes, you can set this option to false.\n\nExample:\n\nexport default {\n  output: {\n    splitRouteChunks: false,\n  },\n}\n","frontmatter":{"sidebar_label":"splitRouteChunks"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/splitRouteChunks.mdx","_relativePath":"en/configure/app/output/splitRouteChunks.mdx"},{"id":124,"title":"output.ssg","routePath":"/en/configure/app/output/ssg","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":175},{"text":"Single Entry","id":"single-entry","depth":3,"charIndex":186},{"text":"Multi Entries","id":"multi-entries","depth":3,"charIndex":1501},{"text":"Configure Route","id":"configure-route","depth":3,"charIndex":2357},{"text":"Prevent Default","id":"prevent-default","depth":3,"charIndex":3323},{"text":"Dynamic Params","id":"dynamic-params","depth":3,"charIndex":3931}],"domain":"","content":"#\n\n * Type: boolean | object | function\n * Default: undefined\n\nEnable the SSG for Self-controlled Routing or Conventional Routing.\n\nINFO\n\nFor more routes detail, see routes.\n\n\nExample#\n\n\nSingle Entry#\n\nWhen the configuration is set to true, the SSG of all entries will be enabled by\ndefault.\n\nFor self-controlled routing, the root route of the entry will be rendered. For\nconvention routing, every route in the entry will be rendered.\n\nFor example, the src/ directory has the following file structure that satisfies\nconventional routing:\n\n.\n├── src\n│   └── routes\n│       ├── layout.tsx\n│       ├── page.tsx\n│       └── user\n│           ├── layout.tsx\n│           ├── page.tsx\n│           └── profile\n│               └── page.tsx\n\n\nMake the following config in modern.config.[tj]s:\n\nexport default defineConfig({\n  output: {\n    ssg: true,\n  },\n});\n\n\nAfter executing pnpm build to build the application. The dist/ directory will\ngenerate three HTML for each of the three routes (only one HTML if SSG not\nenabled), and all HTML has been rendered.\n\nFor example the following self-controlled routing:\n\n\n\n\n\n\nconst Router = typeof window === 'undefined' ? StaticRouter : BrowserRouter;\n\nexport default () => {\n  const { context } = useRuntimeContext();\n  const pathname = context?.request?.pathname;\n  return (\n    \n      \n        index} />\n        about} />\n      \n    \n  );\n};\n\n\nAlso using the above configuration, after executing pnpm run build, only the\nentry route / will generate the rendered HTML.\n\n\nMulti Entries#\n\noutput.ssg can also be configured according to the entries, and the rules that\nthe configuration takes effect are also determined by the entries routing\nmethod.\n\nFor example the following directory structure:\n\n.\n├── src\n│   ├── entryA\n│   │   └── routes\n│   │       ├── layout.tsx\n│   │       ├── page.tsx\n│   │       └── user\n│   │           ├── layout.tsx\n│   │           ├── page.tsx\n│   │           └── profile\n│   │               └── page.tsx\n│   └── entryB\n│       └── App.tsx\n\n\nBy default, all entryA entrances are rendered at build time after setting\noutput.ssg to true. You can configure false to cancel the default behavior of\nthe specified entries. For example, to cancel the rendering of the entryA at\nbuild time:\n\nexport default defineConfig({\n  output: {\n    ssg: {\n      entryA: true,\n      entryB: false,\n    },\n  },\n});\n\n\n\nConfigure Route#\n\nAs mentioned above, Self-Controlled Routing only enables SSG configuration for\nentries route by default.\n\nSet specific routes in output.ssg can tell Modern.js to enable the SSG of these\nclient side routes. For example, the content of the above src/App.tsx file is:\n\nWhen set like this in modern.config.[jt]s, the /about route will also enable\nSSG:\n\nexport default defineConfig({\n  output: {\n    ssg: {\n      routes: ['/', '/about'],\n    },\n  },\n});\n\n\nModern.js will automatically concat the complete URL according to the entry and\nhand it over to the SSG plugin to complete the rendering.\n\nRequest headers can also be configured for specific entries or routes, for\nexample:\n\nexport default defineConfig({\n  output: {\n    ssg: {\n      headers: {},\n      routes: [\n        '/',\n        {\n          url: '/about',\n          headers: {},\n        },\n      ],\n    },\n  },\n});\n\n\nINFO\n\nThe headers set in the route override the headers set in the entry.\n\n\nPrevent Default#\n\nBy default, Conventional Routing all turn on SSG. Modern.js provides another\nfield to prevent the default SSG behavior.\n\nFor example, the following directory structure , /、/user and /user/profle all\nhave SSG enabled:\n\n.\n├── src\n│   └── routes\n│       ├── layout.tsx\n│       ├── page.tsx\n│       └── user\n│           ├── layout.tsx\n│           ├── page.tsx\n│           └── profile\n│               └── page.tsx\n\n\nYou can set this to disable the default behavior of a client-side route:\n\nexport default defineConfig({\n  output: {\n    ssg: {\n      preventDefault: ['/user'],\n    },\n  },\n});\n\n\n\nDynamic Params#\n\nSome routes may be dynamic, such as the /user/:id in a self-controlled route or\nthe route generated by the user/[id]/page.tsx file in a conventional route.\n\nconfigure specific parameters in output.ssg to render the route of the specified\nparameters, for example:\n\nexport default defineConfig({\n  output: {\n    ssg: {\n      routes: [\n        {\n          url: '/user/:id',\n          params: [\n            {\n              id: 'modernjs',\n            },\n          ],\n        },\n      ],\n    },\n  },\n});\n\n\nThe features of dynamic routing and SSG is useful when generating static pages\nin real time based on CMS system.","frontmatter":{"sidebar_label":"ssg"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/ssg.mdx","_relativePath":"en/configure/app/output/ssg.mdx"},{"id":125,"title":"output.svgDefaultExport","routePath":"/en/configure/app/output/svg-default-export","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\noutput.svgDefaultExport.\n\n * Type: 'url' | 'component'\n * Default: 'url'\n\noutput.svgDefaultExport is used to configure the default export type of SVG\nfiles.\n\nWhen output.svgDefaultExport is set to url , the default export of SVG files is\nthe URL of the file. For example:\n\n\n\nconsole.log(logo); // => asset url\n\n\nWhen output.svgDefaultExport is set to component , the default export of SVG\nfiles is the React component of the file. For example:\n\n\n\nconsole.log(Logo); // => React Component\n\n\nAt this time, you can also specify the ?url query to import the URL, for\nexample:\n\n\n\nconsole.log(logo); // => asset url\n","frontmatter":{"sidebar_label":"svgDefaultExport"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/svg-default-export.mdx","_relativePath":"en/configure/app/output/svg-default-export.mdx"},{"id":126,"title":"output.tempDir","routePath":"/en/configure/app/output/temp-dir","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: string\n * Default: ''\n\nWhen developing or building a project, Modern.js generates real Webpack entries\nand HTML templates, placing them in a temporary directory.\n\nIf you want to start a project with multiple configurations at the same time,\nyou can use this configuration to generate files in different temporary\ndirectories to avoid interference with each other.\n\nThe configuration can be a relative or absolute path, but paths outside the\nproject should be avoided.\n\nExample:\n\nexport default {\n  output: {\n    tempDir: path.join('node_modules', '.temp-dir'),\n  }\n}\n","frontmatter":{"sidebar_label":"tempDir"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/output/temp-dir.mdx","_relativePath":"en/configure/app/output/temp-dir.mdx"},{"id":127,"title":"performance.buildCache","routePath":"/en/configure/app/performance/build-cache","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.buildCache.\n\n * Type:\n\ntype BuildCacheConfig =\n  | {\n      /**\n       * Base directory for the filesystem cache.\n       */\n      cacheDirectory?: string;\n    }\n  | boolean;\n\n\n * Default:\n\nconst defaultBuildCacheConfig = {\n  cacheDirectory: './node_modules/.cache/webpack',\n};\n\n\n * Bundler: only support webpack\n\nControls the Builder's caching behavior during the build process.\n\nBuilder will enable build cache by default to improve the compile speed, the\ngenerated cache files are write to the ./node_modules/.cache/webpack directory\nby default.\n\nYou can configure the cache path with buildCache, e.g.\n\nexport default {\n  performance: {\n    buildCache: {\n      cacheDirectory: './node_modules/.custom_cache/webpack',\n    },\n  },\n};\n\n\nYou can also disable the build cache by setting it to false:\n\nexport default {\n  performance: {\n    buildCache: false,\n  },\n};\n","frontmatter":{"sidebar_label":"buildCache"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/performance/build-cache.mdx","_relativePath":"en/configure/app/performance/build-cache.mdx"},{"id":128,"title":"performance.bundleAnalyze","routePath":"/en/configure/app/performance/bundle-analyze","lang":"en","toc":[{"text":"Enable Bundle Analyze","id":"enable-bundle-analyze","depth":3,"charIndex":538},{"text":"Override Default Configuration","id":"override-default-configuration","depth":3,"charIndex":1289},{"text":"Size Types","id":"size-types","depth":3,"charIndex":1622},{"text":"Generate stats.json","id":"generate-statsjson","depth":3,"charIndex":2091},{"text":"Notes","id":"notes","depth":3,"charIndex":2318}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.bundleAnalyze.\n\n * Type: Object | undefined\n\nUsed to enable the webpack-bundle-analyzer plugin to analyze the size of the\noutput.\n\nBy default, Builder does not enable webpack-bundle-analyzer. When this feature\nis enabled, the default configuration is as follows:\n\nconst defaultConfig = {\n  analyzerMode: 'static',\n  openAnalyzer: false,\n  // target is the compilation target, such as `web`, `node`, etc.\n  reportFilename: `report-${target}.html`,\n};\n\n\n\nEnable Bundle Analyze#\n\nYou have two ways to enable webpack-bundle-analyzer to analyze the size of the\noutput files:\n\n * Add the environment variable BUNDLE_ANALYZE=true, for example:\n\nBUNDLE_ANALYZE=true pnpm build\n\n\n * Configure performance.bundleAnalyze to enable it permanently:\n\nexport default {\n  performance: {\n    bundleAnalyze: {},\n  },\n};\n\n\nAfter enabling it, Builder will generate an HTML file that analyzes the size of\nthe output files, and print the following log in the Terminal:\n\nWebpack Bundle Analyzer saved report to /Project/my-project/dist/report-web.html\n\n\nYou can manually open the file in the browser and view the detail of the bundle\nsize. When an area is larger, it indicates that its corresponding bundle size is\nlarger.\n\n\n\n\nOverride Default Configuration#\n\nYou can override the default configuration through performance.bundleAnalyze,\nsuch as enabling the server mode:\n\nexport default {\n  performance: {\n    bundleAnalyze: process.env.BUNDLE_ANALYZE\n      ? {\n          analyzerMode: 'server',\n          openAnalyzer: true,\n        }\n      : {},\n  },\n};\n\n\n\nSize Types#\n\nIn the webpack-bundle-analyzer panel, you can control size types in the upper\nleft corner (default is Parsed):\n\n * Stat: The size obtained from the stats object of the bundler, which reflects\n   the size of the code before minification.\n * Parsed: The size of the file on the disk, which reflects the size of the code\n   after minification.\n * Gzipped: The file size requested in the browser reflects the size of the code\n   after minification and gzip.\n\n\nGenerate stats.json#\n\nBy setting generateStatsFile to true, stats JSON file will be generated in\nbundle output directory.\n\nexport default {\n  performance: {\n    bundleAnalyze: {\n      generateStatsFile: true,\n    },\n  },\n};\n\n\n\nNotes#\n\n 1. Enabling the server mode will cause the build process to not exit normally.\n 2. Enabling bundleAnalyzer will reduce build speed. Therefore, this\n    configuration should not be enabled during daily development, and it is\n    recommended to enable it on demand through the BUNDLE_ANALYZE environment\n    variable.\n 3. Since no code minification and other optimizations are performed in the dev\n    phase, the real output size cannot be reflected, so it is recommended to\n    analyze the output size in the build phase.","frontmatter":{"sidebar_label":"bundleAnalyze"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/performance/bundle-analyze.mdx","_relativePath":"en/configure/app/performance/bundle-analyze.mdx"},{"id":129,"title":"performance.chunkSplit","routePath":"/en/configure/app/performance/chunk-split","lang":"en","toc":[{"text":"chunkSplit.strategy","id":"chunksplitstrategy","depth":3,"charIndex":860},{"text":"Default Strategy","id":"default-strategy","depth":3,"charIndex":1409},{"text":"chunkSplit.minSize","id":"chunksplitminsize","depth":3,"charIndex":2362},{"text":"chunkSplit.maxSize","id":"chunksplitmaxsize","depth":3,"charIndex":2739},{"text":"chunkSplit.forceSplitting","id":"chunksplitforcesplitting","depth":3,"charIndex":3122},{"text":"chunkSplit.splitChunks","id":"chunksplitsplitchunks","depth":3,"charIndex":3635},{"text":"chunkSplit.override","id":"chunksplitoverride","depth":3,"charIndex":4241}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.chunkSplit.\n\n * Type: Object\n * Default: { strategy: 'split-by-experience' }\n\nperformance.chunkSplit is used to configure the chunk splitting strategy. The\ntype of ChunkSplit is as follows:\n\ntype ForceSplitting = RegExp[] | Record;\n\ninterface BaseChunkSplit {\n  strategy?:\n    | 'split-by-module'\n    | 'split-by-experience'\n    | 'all-in-one'\n    | 'single-vendor';\n  override?: SplitChunks;\n  forceSplitting?: ForceSplitting;\n}\n\ninterface SplitBySize {\n  strategy?: 'split-by-size';\n  minSize?: number;\n  maxSize?: number;\n  override?: SplitChunks;\n  forceSplitting?: ForceSplitting;\n}\n\ninterface SplitCustom {\n  strategy?: 'custom';\n  splitChunks?: SplitChunks;\n  forceSplitting?: ForceSplitting;\n}\n\nexport type ChunkSplit = BaseChunkSplit | SplitBySize | SplitCustom;\n\n\n\nchunkSplit.strategy#\n\nBuilder supports the following chunk splitting strategies:\n\n * split-by-experience: an empirical splitting strategy, automatically splits\n   some commonly used npm packages into chunks of moderate size.\n\n * split-by-module: split by NPM package granularity, each NPM package\n   corresponds to a chunk.\n\n * split-by-size: automatically split according to module size.\n\n * all-in-one: bundle all codes into one chunk.\n\n * single-vendor: bundle all NPM packages into a single chunk.\n\n * custom: custom chunk splitting strategy.\n\n\nDefault Strategy#\n\nBuilder adopts the split-by-experience strategy by default, which is a strategy\nwe have developed from experience. Specifically, when the following npm packages\nare referenced in your project, they will automatically be split into separate\nchunks:\n\n * lib-polyfill.js: includes core-js, @babel/runtime, @swc/helpers.\n * lib-react.js: includes react, react-dom.\n * lib-router.js: includes react-router, react-router-dom, history,\n   @remix-run/router.\n * lib-lodash.js: includes lodash, lodash-es.\n * lib-antd.js: includes antd.\n * lib-arco.js: includes @arco-design/web-react.\n * lib-semi.js: includes @douyinfe/semi-ui.\n\nTIP\n\nIf the above npm packages are not installed or used in the project, the\ncorresponding chunk will not be generated.\n\nIf you want to use other splitting strategies, you can specify it via\nperformance.chunkSplit.strategy.\n\nTIP\n\nThe split-by-module strategy is not supported when using Rspack as the bundler.\n\n\nchunkSplit.minSize#\n\n * Type: number\n * Default: 10000\n\nWhen performance.chunkSplit.strategy is split-by-size, you can specify the\nminimum size of a chunk via performance.chunkSplit.minSize, the unit is bytes.\nThe default value is 10000. For example:\n\nexport default {\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-size',\n      minSize: 20000,\n    },\n  },\n};\n\n\n\nchunkSplit.maxSize#\n\n * Type: number\n * Default: Infinity\n\nWhen performance.chunkSplit.strategy is split-by-size, you can specify the\nmaximum size of a chunk via performance.chunkSplit.maxSize, the unit is bytes.\nThe default value is Infinity. For example:\n\nexport default {\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-size',\n      maxSize: 50000,\n    },\n  },\n};\n\n\n\nchunkSplit.forceSplitting#\n\n * Type: RegExp[] | Record\n * Default: []\n\nVia performance.chunkSplit.forceSplitting, you can specify the NPM packages that\nneed to be forced to split.\n\nFor example, split the axios library under node_modules into axios.js:\n\nexport default {\n   performance: {\n     chunkSplit: {\n       strategy: 'split-by-experience',\n       forceSplitting: {\n         axios: /node_modules\\/axios/,\n       },\n     },\n   },\n};\n\n\nThis is an easier way than configuring webpack's splitChunks directly.\n\n\nchunkSplit.splitChunks#\n\nWhen performance.chunkSplit.strategy is custom, you can specify the custom\nwebpack chunk splitting config via performance.chunkSplit.splitChunks. This\nconfig will be merged with the webpack splitChunks config (the cacheGroups\nconfig will also be merged). For example:\n\nexport default {\n  performance: {\n    chunkSplit: {\n      strategy: 'custom',\n      splitChunks: {\n        cacheGroups: {\n          react: {\n            test: /[\\\\/]node_modules[\\\\/](react|react-dom)[\\\\/]/,\n            name: 'react',\n            chunks: 'all',\n          },\n        },\n      },\n    },\n  },\n};\n\n\n\nchunkSplit.override#\n\nWhen performance.chunkSplit.strategy is split-by-experience, split-by-module,\nsplit-by-size or single-vendor, you can specify the custom webpack chunk\nsplitting config via performance.chunkSplit.override. This config will be merged\nwith the webpack splitChunks config (the cacheGroups config will also be\nmerged). For example:\n\nexport default {\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-experience',\n      override: {\n        cacheGroups: {\n          react: {\n            test: /[\\\\/]node_modules[\\\\/](react|react-dom)[\\\\/]/,\n            name: 'react',\n            chunks: 'all',\n          },\n        },\n      },\n    },\n  },\n};\n\n\n> When the Builder target is \"node\", since Node Bundles do not need to be\n> splitted to optimize loading performance, the chunkSplit rule will not take\n> effect.","frontmatter":{"sidebar_label":"chunkSplit"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/performance/chunk-split.mdx","_relativePath":"en/configure/app/performance/chunk-split.mdx"},{"id":130,"title":"performance.printFileSize","routePath":"/en/configure/app/performance/print-file-size","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":622}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.printFileSize.\n\n * Type: boolean\n * Default: true\n\nWhether to print the file sizes after production build.\n\ninfo    File sizes after production build:\n\n  File                                     Size         Gzipped\n  dist/static/js/lib-corejs.1c836fe7.js    212.89 kB    66.57 kB\n  dist/static/js/lib-react.fcafbc5c.js     134.65 kB    43.45 kB\n  dist/static/js/main.6ff06f70.js          8.93 kB      3.73 kB\n  dist/static/css/main.9f48031b.css        2.64 kB      927 B\n  dist/html/main/index.html                1.64 kB      874 B\n\n\n\nExample#\n\nDisable the logs:\n\nexport default {\n  performance: {\n    printFileSize: false,\n  },\n};\n","frontmatter":{"sidebar_label":"printFileSize"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/performance/print-file-size.mdx","_relativePath":"en/configure/app/performance/print-file-size.mdx"},{"id":131,"title":"performance.profile","routePath":"/en/configure/app/performance/profile","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":257}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.profile.\n\n * Type: boolean\n * Default: false\n * Bundler: only support webpack\n\nWhether capture timing information for each module, same as the profile config\nof webpack.\n\n\nExample#\n\nexport default {\n  performance: {\n    profile: true,\n  },\n};\n\n\nWhen turned on, webpack generates a JSON file with some statistics about the\nmodule that includes information about timing information for each module.","frontmatter":{"sidebar_label":"profile"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/performance/profile.mdx","_relativePath":"en/configure/app/performance/profile.mdx"},{"id":132,"title":"performance.removeConsole","routePath":"/en/configure/app/performance/remove-console","lang":"en","toc":[{"text":"Remove all consoles","id":"remove-all-consoles","depth":4,"charIndex":204},{"text":"Remove specific console","id":"remove-specific-console","depth":4,"charIndex":368}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.removeConsole.\n\n * Type: boolean | ConsoleType[]\n * Default: false\n\nWhether to remove console.xx in production build.\n\nRemove all consoles#\n\nWhen removeConsole is set to true, all types of console.xx are removed:\n\nexport default {\n  performance: {\n    removeConsole: true,\n  },\n};\n\n\nRemove specific console#\n\nYou can also specify to remove only certain types of console.xx, such as\nconsole.log and console.warn:\n\nexport default {\n  performance: {\n    removeConsole: ['log', 'warn'],\n  },\n};\n\n\nThe following types of console are currently supported:\n\ntype ConsoleType = 'log' | 'info' | 'warn' | 'error' | 'table' | 'group';\n","frontmatter":{"sidebar_label":"removeConsole"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/performance/remove-console.mdx","_relativePath":"en/configure/app/performance/remove-console.mdx"},{"id":133,"title":"performance.removeMomentLocale","routePath":"/en/configure/app/performance/remove-moment-locale","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nperformance.removeMomentLocale.\n\n * Type: boolean\n * Default: false\n * Bundler: only support webpack\n\nWhether to remove the locales of moment.js.\n\nmoment.js contains a lot of locales by default, which will increase the bundle\nsize.\n\nWhen moment.js is used in the project, it is recommended to enable this option\nto automatically exclude all locales:\n\nexport default {\n  performance: {\n    removeMomentLocale: true,\n  },\n};\n\n\nOnce enabled, you can load a specific locale via:\n\n\nimport 'moment/locale/zh-cn';\n\nmoment.locale('zh-cn');\n","frontmatter":{"sidebar_label":"removeMomentLocale"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/performance/remove-moment-locale.mdx","_relativePath":"en/configure/app/performance/remove-moment-locale.mdx"},{"id":134,"title":"plugins","routePath":"/en/configure/app/plugins","lang":"en","toc":[{"text":"Note","id":"note","depth":2,"charIndex":161},{"text":"Plugin types","id":"plugin-types","depth":2,"charIndex":548},{"text":"Plugin execution order","id":"plugin-execution-order","depth":2,"charIndex":1012},{"text":"Example","id":"example","depth":2,"charIndex":1410},{"text":"Use plugins on npm","id":"use-plugins-on-npm","depth":3,"charIndex":1472},{"text":"Use local plugins","id":"use-local-plugins","depth":3,"charIndex":1669},{"text":"Plugin configuration","id":"plugin-configuration","depth":3,"charIndex":1820}],"domain":"","content":"#\n\n * Type: CliPlugin[]\n * Default: []\n\nUsed to configure custom Modern.js framework plugins.\n\nRefer to How to Develop Plugins for how to write custom plugins.\n\n\nNote#\n\nThis option is used to configure framework plugins. If you need to configure\nother types of plugins, please choose the corresponding configuration method:\n\n * To configure Modern.js Builder plugins, use the builderPlugins option.\n * To configure webpack plugins, use the tools.webpack or tools.webpackChain\n   options.\n * To configure Babel plugins, use the tools.babel option.\n\n\nPlugin types#\n\nModern.js has three types of plugins:\n\n * CLI plugins, applicable to local development, compilation and construction\n   stages, can extend various capabilities in the command line and compilation\n   stages.\n * Server plugins, applicable to the server.\n * Runtime plugins, applicable to the front-end runtime.\n\nCurrently, Modern.js has opened up the ability to customize CLI plugins, and\nServer plugins and Runtime plugins will be opened up later.\n\n\nPlugin execution order#\n\nBy default, custom plugins are executed in the order of the plugins array, and\nthe execution time of built-in Modern.js plugins is earlier than that of custom\nplugins.\n\nWhen the plugin sets options that control the order, such as pre and post, the\nexecution order will be adjusted based on the declared fields. Refer to\nRelationship between plugins for more information.\n\n\nExample#\n\nThe following is an example of using CLI plugins.\n\n\nUse plugins on npm#\n\nTo use plugins from npm registry, you need to first install the plugins , and\nimport them in modern.config.ts.\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin()],\n});\n\n\n\nUse local plugins#\n\nTo use local plugins, import them directly using a relative path.\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin()],\n});\n\n\n\nPlugin configuration#\n\nIf the plugin provides some custom configuration options, they can be passed in\nas parameters to the plugin function.\n\n\n\nexport default defineConfig({\n  plugins: [\n    myPlugin({\n      foo: 1,\n      bar: 2,\n    }),\n  ],\n});\n","frontmatter":{"title":"plugins","sidebar_position":9},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/plugins.mdx","_relativePath":"en/configure/app/plugins.mdx"},{"id":135,"title":"Overview","routePath":"/en/configure/app/runtime/intro","lang":"en","toc":[{"text":"Configuration","id":"configuration","depth":2,"charIndex":68},{"text":"runtime","id":"runtime","depth":3,"charIndex":85},{"text":"Base","id":"base","depth":4,"charIndex":151},{"text":"DefineConfig","id":"defineconfig","depth":4,"charIndex":281},{"text":"runtimeByEntries","id":"runtimebyentries","depth":3,"charIndex":1101},{"text":"Introduction","id":"introduction","depth":4,"charIndex":1137}],"domain":"","content":"#\n\nThis section describes the configuration of the Runtime plugin.\n\n\nConfiguration#\n\n\nruntime#\n\n * Type: Object\n\nThe runtime is configured as follows:\n\nBase#\n\nConfigure in modern.config.ts:\n\n\n\nexport default defineConfig({\n  runtime: {\n    state: true,\n    router: true,\n  },\n});\n\n\nDefineConfig#\n\nConfigure use defineConfig API:\n\nINFO\n\nWhen there is a function in the runtime configuration, it can only be configured\nin this way.\n\n\n\nconst App = () => {\n  /** */\n};\n\ndefineConfig(App, {\n  router: {\n    supportHtml5History: false,\n  },\n});\n\nexport default App;\n\n\nINFO\n\nUsing runtime configuration, you can solve the problem that runtime plugin\nconfiguration needs to be at runtime to get specific content.\n\nRuntime plugin runtime configuration and configuration directly in\nmodern.config.ts are merged by default, and runtime configuration takes\nprecedence.\n\nWARNING\n\ndefineConfig can only define the specific configuration content of the Runtime\nplugin. To confirm whether to enable the plugin, it needs to be determined\nthrough the configuration in modernConfig in package.json or modern.config.ts.\n\n\nruntimeByEntries#\n\n * Type: Object\n\nIntroduction#\n\nAdd the runtime configuration according to the entry. The option attribute is\nconsistent with the runtime. The specified value will be replaced and merged\nwith the content of the runtime attribute.\n\n\n\nexport default defineConfig({\n  runtime: {\n    state: false,\n  },\n  runtimeByEntries: {\n    entry1: {\n      state: true, // { state: true }\n    },\n    entry2: {\n      // { state: false, router: true }\n      router: true,\n    },\n  },\n});\n","frontmatter":{"sidebar_label":"Overview","sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/runtime/intro.mdx","_relativePath":"en/configure/app/runtime/intro.mdx"},{"id":136,"title":"runtime.masterApp","routePath":"/en/configure/app/runtime/master-app","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":101},{"text":"manifest","id":"manifest","depth":2,"charIndex":267},{"text":"getAppList?","id":"getapplist?","depth":3,"charIndex":332},{"text":"apps","id":"apps","depth":3,"charIndex":468},{"text":"Other Config","id":"other-config","depth":3,"charIndex":734}],"domain":"","content":"#\n\n * Type: Object\n\nINFO\n\nFirst you need to enable the \"micro frontend\" function using new command.\n\n\nExample#\n\n\n\n\nexport default defineConfig({\n  runtime: {\n    router: true,\n    state: true,\n    masterApp: true,\n  },\n  plugins: [appTools(), garfishPlugin()],\n});\n\n\n\nmanifest#\n\ninterface Manifest {\n  getAppList?: () => Array;\n}\n\n\n\ngetAppList?#\n\nThrough the getAppList configuration, you can customize how to get remote list\ndata\n\ntype GetAppList = () => Promise>;\n\n\n\napps#\n\nWhen apps is an object, it represents the information of the child application\nmodule Array.\n\ninterface AppInfo {\n  name: string;\n  entry: string;\n  activeWhen?: string | ()=> boolean;\n}\n\n\n * name: The name of the module.\n * entry: The entry of the module.\n\n\nOther Config#\n\nUnder the masterApp configuration, developers can pass through the configuration\nitems of Garfish.\n\nAll supported configuration items see here.","frontmatter":{"sidebar_label":"masterApp"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/runtime/master-app.mdx","_relativePath":"en/configure/app/runtime/master-app.mdx"},{"id":137,"title":"runtime.router","routePath":"/en/configure/app/runtime/router","lang":"en","toc":[{"text":"basename","id":"basename","depth":2,"charIndex":176},{"text":"supportHtml5History","id":"supporthtml5history","depth":2,"charIndex":331}],"domain":"","content":"#\n\n * Type: boolean | Object\n * Default: false\n\nWhen router is enabled, routing management of conventional routes provided by\nModern.js is supported. Based on React Router 6.\n\n\nbasename#\n\n * Type: string\n * Default: ``\n\nThe basename of the app for situations where you can't deploy to the root of the\ndomain, but a sub directory.\n\n\nsupportHtml5History#\n\n * Type: boolean\n * Default: true\n\nIf the value of supportHtml5History is true, BrowserRouter would be used,\notherwise HashRouter would be used. BrowserRouter is recommended.\n\nWARNING\n\nWhen SSR is enabled, supportHtml5History is not supported.","frontmatter":{"sidebar_label":"router"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/runtime/router.mdx","_relativePath":"en/configure/app/runtime/router.mdx"},{"id":138,"title":"runtime.state","routePath":"/en/configure/app/runtime/state","lang":"en","toc":[{"text":"models","id":"models","depth":2,"charIndex":162},{"text":"initialState","id":"initialstate","depth":2,"charIndex":385},{"text":"immer","id":"immer","depth":2,"charIndex":555},{"text":"effects","id":"effects","depth":2,"charIndex":722},{"text":"autoActions","id":"autoactions","depth":2,"charIndex":893},{"text":"devtools","id":"devtools","depth":2,"charIndex":1068}],"domain":"","content":"#\n\n * Type: boolean | object\n * Default: false\n\nOnce state is enabled, you can use Model for state management.\n\nThe specific configuration items are as follows:\n\n\nmodels#\n\n * Type: Array\n * Default: []\n\nRegister model objects that are mounted in advance, and these models will be\nmounted immediately after the Reduck store is created. Generally, there is no\nneed to mount in advance.\n\n\ninitialState#\n\n * Type: Object\n * Default: {}\n\nUsed to set the initial state of the global store. Generally used for SSR to\ninitialize data during the hydration phase.\n\n\nimmer#\n\n * Type: boolean\n * Default: true\n\nWhether to enable to update the state with mutable, it is enabled by default,\nand set to false if you want to disable it.\n\n\neffects#\n\n * Type: boolean\n * Default: true\n\nWhether to enable the side effect management feature, it is enabled by default,\nand set to false if you want to disable it.\n\n\nautoActions#\n\n * Type: boolean\n * Default: true\n\nWhether to enable the auto-generated actions feature, it is enabled by default,\nand set to false if you want to disable it.\n\n\ndevtools#\n\n * Type: boolean | EnhancerOptions\n * Default: true\n\nWhether to enable devtools, it is enabled by default, and all parameters of\nredux-devtools-extension are supported at the same time. If you want to disable\nit, set it to false.","frontmatter":{"sidebar_label":"state"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/runtime/state.mdx","_relativePath":"en/configure/app/runtime/state.mdx"},{"id":139,"title":"security.checkSyntax","routePath":"/en/configure/app/security/check-syntax","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":409},{"text":"Error Log","id":"error-log","depth":3,"charIndex":882},{"text":"Solution","id":"solution","depth":3,"charIndex":1286}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsecurity.checkSyntax.\n\n * Type:\n\ntype CheckSyntax =\n  | boolean\n  | {\n      targets: string[];\n      exclude?: RegExp | Array;\n    };\n\n\n * Default: false\n\nAnalyzes the build output files for the presence of high-level syntax that is\nincompatible with the current browserslist. If present, the details will be\nprinted in the terminal.\n\n\nExample#\n\nexport default {\n  security: {\n    checkSyntax: true,\n    exclude: /node_modules\\/foo/,\n  },\n};\n\n\nIf security.checkSyntax is specified as true, targets will be recognized as the\nbrowserslist set by the project. For details, please refer to Browserslist.\n\nWhen enabled, it will be detected in the production environment, and when an\nincompatible advanced syntax is detected, it will not only print the error logs\non the terminal but also exit the build process.\n\n\nError Log#\n\nThe format of the error log is as follows, including the source file, output\nlocation, error reason and source code:\n\nerror [Syntax Checker] Find some syntax errors after production build:\n\n   ERROR#1:\n   source - /node_modules/foo/index.js:1:0\n   output - /Project/dist/static/js/main.3f7a4d7e.js:2:39400\n   reason - The keyword 'const' is reserved (2:39400)\n   code - const foo = 'bar';\n\n\n\nSolution#\n\nIf a syntax error is detected, you can handle it in the following ways:\n\n * If you want to downgrade this syntax to ensure good code compatibility, you\n   can compile the corresponding module through the source.include config.\n * If you don't want to downgrade the syntax, you can adjust the project's\n   browserslist to match the syntax.\n * If you do not want to check the syntax of certain products, you can use the\n   checkSyntax.exclude configuration to exclude the files to be checked.","frontmatter":{"sidebar_label":"checkSyntax"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/security/check-syntax.mdx","_relativePath":"en/configure/app/security/check-syntax.mdx"},{"id":140,"title":"security.nonce","routePath":"/en/configure/app/security/nonce","lang":"en","toc":[{"text":"Introduce nonce","id":"introduce-nonce","depth":4,"charIndex":363},{"text":"Example","id":"example","depth":3,"charIndex":-1}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsecurity.nonce.\n\n * Type:\n\ntype Nonce = string;\n\n\n * Default: undefined\n\nAdd a random attribute value --- nonce, to the scripts resources introduced for\nHTML. This allows the browser to determine whether the script can be executed\nwhen it parses inline scripts with matching nonce values.\n\nIntroduce nonce#\n\nThe nonce mechanism plays a crucial role in Content Security Policy (CSP),\nenhancing webpage security. It allows developers to define a unique and random\nstring value, i.e., nonce, for inline","frontmatter":{"sidebar_label":"nonce"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/security/nonce.mdx","_relativePath":"en/configure/app/security/nonce.mdx"},{"id":141,"title":"security.sri","routePath":"/en/configure/app/security/sri","lang":"en","toc":[{"text":"Introduce SRI","id":"introduce-sri","depth":4,"charIndex":611},{"text":"Example","id":"example","depth":4,"charIndex":1087}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see security.sri.\n\n * Type:\n\ntype SRIOptions =\n  | {\n      hashFuncNames?: string[];\n      enabled?: 'auto' | boolean;\n      hashLoading?: 'eager' | 'lazy';\n    }\n  | boolean;\n\n\n * Default: undefined\n * Bundler: only support webpack\n\nAdding an integrity attribute (integrity) to sub-resources introduced by HTML\nallows the browser to verify the integrity of the introduced resource, thus\npreventing tampering with the downloaded resource.\n\nEnabling this option will set the webpack output.crossOriginLoading\nconfiguration item to anonymous.\n\nIntroduce SRI#\n\nSubresource Integrity (SRI) is a security feature that enables browsers to\nverify that resources they fetch (for example, from a CDN) are delivered without\nunexpected manipulation. It works by allowing you to provide a cryptographic\nhash that a fetched resource must match.\n\nFor script tags, the result is to refuse to execute the code; for CSS links, the\nresult is not to load the styles.\n\nFor more on subresource integrity, see Subresource Integrity - MDN.\n\nExample#\n\nBy default, SRI is not turned on, and when it is, its default configuration is\nas follows:\n\n{\n  hashFuncNames: ['sha384'];\n  enabled: \"auto\",\n  hashLoading: \"eager\",\n}\n\n\nYou can customize the configuration items according to your own needs:\n\nexport default {\n  security: {\n    sri: {\n      hashFuncNames: ['sha-256'],\n      enabled: true,\n      hashLoading: 'lazy',\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"sri"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/security/sri.mdx","_relativePath":"en/configure/app/security/sri.mdx"},{"id":142,"title":"server.baseUrl","routePath":"/en/configure/app/server/base-url","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: string | string[]\n * Default: undefined\n\nUniformly set the prefix of server-side routes (commonly used in situations\nwhere multiple applications share the same domain name to distinguish traffic).\n\nexport default defineConfig({\n  server: {\n    // All generated routes will automatically have the prefix `/base`\n    // Generated server-side route file path: dist/route.json\n    baseUrl: '/base'\n\n    // Multiple baseUrl\n    baseUrl: ['/base-new', '/base-old']\n  }\n})\n\n\nAfter running dev, you will see that the route access will have the\ncorresponding prefix added:\n\nApp running at:\n\n  > Local:    http://localhost:8080/base/\n  > Network:  http://192.168.0.1:8080/base/\n","frontmatter":{"sidebar_label":"baseUrl"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/server/base-url.mdx","_relativePath":"en/configure/app/server/base-url.mdx"},{"id":143,"title":"server.enableFrameworkExt","routePath":"/en/configure/app/server/enable-framework-ext","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":325}],"domain":"","content":"#\n\n * Type: boolean\n * Default: false\n\nBy default, when the custom Web Server feature is enabled, the Middleware will\nuse the Modern.js's syntax.\n\nEnabling server.enableFrameworkExt allows the use of syntax extensions from\nother frameworks.\n\nexport default defineConfig({\n  server: {\n    enableFrameworkExt: true,\n  },\n});\n\n\n\nExample#\n\nDefault usage:\n\n\n\nexport const middleware: Middleware = (ctx, next) => {\n  console.log(ctx.request.url);\n  next();\n};\n\n\nAfter enabling it, the Middleware type will be exported from other namespaces,\nand syntax extensions from frameworks can be used:\n\n\n\nexport const middleware: SomeType = (...args) => {\n  console.log(args[0].url);\n  next();\n};\n\n\nNOTE\n\nThe above code is pseudocode, and the specific usage needs to refer to the\ncorresponding framework extension.","frontmatter":{"sidebar_label":"enableFrameworkExt"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/server/enable-framework-ext.mdx","_relativePath":"en/configure/app/server/enable-framework-ext.mdx"},{"id":144,"title":"server.port","routePath":"/en/configure/app/server/port","lang":"en","toc":[{"text":"Difference between server.port and dev.port","id":"difference-between-serverport-and-devport","depth":3,"charIndex":363}],"domain":"","content":"#\n\n * Type: number\n * Default: 8080\n\nWhen running the dev, start, and serve commands, Modern.js will start with 8080\nas the default port and automatically increase the port number when the port is\noccupied. You can use this configuration to modify the port number that the\nServer starts with:\n\nexport default defineConfig({\n  server: {\n    port: 3000,\n  },\n});\n\n\n\nDifference between server.port and dev.port#\n\nIn most cases, we recommend using server.port instead of dev.port to set the\nport number, and the differences between them are as follows:\n\n * dev.port only works in the development environment, while server.port works\n   in both the development and production environments.\n * In the development environment, dev.port has a higher priority than\n   server.port.\n\nWhen you set both dev.port and server.port, dev.port will take effect in the\ndevelopment environment, and server.port will take effect in the production\nenvironment. For example, in the following example, the port number listened to\nin the development environment is 3001, and the port number listened to in the\nproduction environment is 3002.\n\nexport default defineConfig({\n  dev: {\n    port: 3001,\n  },\n  server: {\n    port: 3002,\n  },\n});\n","frontmatter":{"sidebar_label":"port"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/server/port.mdx","_relativePath":"en/configure/app/server/port.mdx"},{"id":145,"title":"server.publicRoutes","routePath":"/en/configure/app/server/public-routes","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: Object\n * Default: Server-side routing rules generated based on file conventions, with\n   one route rule generated for each file.\n\nThis configuration option only applies to server-side routing and can customize\nthe access route of resources under config/public/.\n\nThe key of the object is the relative file path of the config/public/ (without\nusing ./), and the value can be a string.\n\nexport default defineConfig({\n  server: {\n    publicRoutes: {\n      // Set a long route\n      'index.json': '/user-config/card-info/extra/help.json',\n\n      // Set a route without a suffix\n      'robot.txt': '/app/authentication',\n    },\n  },\n});\n","frontmatter":{"sidebar_label":"publicRoutes"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/server/public-routes.mdx","_relativePath":"en/configure/app/server/public-routes.mdx"},{"id":146,"title":"server.routes","routePath":"/en/configure/app/server/routes","lang":"en","toc":[{"text":"Custom access routes","id":"custom-access-routes","depth":2,"charIndex":316},{"text":"Custom response headers","id":"custom-response-headers","depth":2,"charIndex":1493}],"domain":"","content":"#\n\n * Type: Object\n * Default: Server-side routing rules generated based on file conventions, with\n   one route rule generated for each entry, and the entry name is equal to the\n   route path.\n\nThis configuration option only applies to server-side routing and can customize\nthe access route of application entries.\n\n\nCustom access routes#\n\nThe key of the object is the name of the current application entry, and the\nvalue can be a string | Array.\n\nWhen the value type is string, the current value represents the route path for\naccessing the entry.\n\nexport default defineConfig({\n  server: {\n    routes: {\n      // Default route is /entryName1, customized to /p/test1\n      entryName1: '/p/test1'\n      // Supports dynamic server-side routing configuration\n      entryName2: '/detail/:id'\n    }\n  }\n});\n\n\nMultiple access routes can also be set for the entry through Array:\n\nexport default defineConfig({\n  server: {\n    routes: {\n      'page-a': [`/a`, '/b'],\n    },\n  },\n});\n\n\nAt this time, the page-a entry can be accessed through both the /a and /b\nroutes.\n\nAfter executing the dev command, you can view two route records for the page-a\nentry in dist/route.json:\n\n{\n  \"routes\": [\n    {\n      \"urlPath\": \"/a\",\n      \"entryName\": \"page-a\",\n      \"entryPath\": \"html/page-a/index.html\",\n      \"isSPA\": true,\n      \"isSSR\": false\n    },\n    {\n      \"urlPath\": \"/b\",\n      \"entryName\": \"page-a\",\n      \"entryPath\": \"html/page-a/index.html\",\n      \"isSPA\": true,\n      \"isSSR\": false\n    }\n  ]\n}\n\n\n\nCustom response headers#\n\nResponse headers can be set by configuring the resHeaders of the entry:\n\nexport default defineConfig({\n  server: {\n    routes: {\n      'page-a': {\n        route: ['/a', '/b'],\n        resHeaders: {\n          'x-modern-test': '1',\n        },\n      },\n    },\n  },\n});\n\n\nNOTE\n\nThis configuration takes effect in both the production and development\nenvironments, and different response headers can be set according to the\nNODE_ENV to distinguish between environments. However, if you only need to set\nresponse headers in the development environment, it is recommended to use\ntools.devServer.headers.","frontmatter":{"sidebar_label":"routes"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/server/routes.mdx","_relativePath":"en/configure/app/server/routes.mdx"},{"id":147,"title":"server.ssrByEntries","routePath":"/en/configure/app/server/ssr-by-entries","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: Object\n * Default: undefined\n\nSet SSR options by entry, and the properties inside the option are the same as\nssr. The specified value will be replaced and merged with the content of the SSR\nattribute, for example:\n\nINFO\n\nThe \"entry name\" defaults to the directory name. In a few cases, when defining\nan entry through source.entries, the entry name is the key of the source.entries\nobject.\n\nexport default defineConfig({\n  server: {\n    ssr: true,\n    ssrByEntries: {\n      // page-a does not enable SSR\n      'page-a': false,\n    },\n  },\n});\n\n\nIn the above configuration, the project enables SSR as a whole, but the SSR\nrendering ability is disabled for the page-a entry.","frontmatter":{"sidebar_label":"ssrByEntries"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/server/ssr-by-entries.mdx","_relativePath":"en/configure/app/server/ssr-by-entries.mdx"},{"id":148,"title":"server.ssr","routePath":"/en/configure/app/server/ssr","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":66},{"text":"Object Type","id":"object-type","depth":3,"charIndex":271}],"domain":"","content":"#\n\n * Type: boolean\n * Default: false\n\nEnalbe SSR configuration.\n\n\nBoolean Type#\n\nWhen the value type is boolean, it indicates whether to enable SSR deployment\nmode. The default is false to disable it.\n\nexport default defineConfig({\n  server: {\n    ssr: true,\n  },\n});\n\n\n\nObject Type#\n\nWhen the value type is Object, the following properties can be configured:\n\n * mode: string = 'string', which defaults to using renderToString for\n   rendering. Configure stream to enable streaming rendering.\n * forceCSR: boolean = false, which is off by default for forcing CSR rendering.\n   Configure true to force CSR by adding ?csr=true when accessing the page.\n * inlineScript: boolean = true, by default, SSR data is injected into HTML as\n   inline scripts and assigned directly to global variables. Configure false to\n   distribute JSON instead of assigning to global variables.\n\nexport default defineConfig({\n  server: {\n    forceCSR: true,\n    mode: 'stream',\n    inlineScript: false,\n  },\n});\n","frontmatter":{"sidebar_label":"ssr"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/server/ssr.mdx","_relativePath":"en/configure/app/server/ssr.mdx"},{"id":149,"title":"source.alias","routePath":"/en/configure/app/source/alias","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":4,"charIndex":438},{"text":"Function Type","id":"function-type","depth":4,"charIndex":765}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see source.alias.\n\n * Type: Record | Function\n * Default: undefined\n\nCreate aliases to import or require certain modules, same as the resolve.alias\nconfig of webpack.\n\nTIP\n\nFor TypeScript projects, you only need to configure compilerOptions.paths in\ntsconfig.json, Builder will automatically recognize the aliases in\ntsconfig.json, so the alias config is unnecessary.\n\nObject Type#\n\nThe alias can be an Object, and the relative path will be automatically\nconverted to absolute path.\n\nexport default {\n  source: {\n    alias: {\n      '@common': './src/common',\n    },\n  },\n};\n\n\nWith above configuration, if @common/Foo.tsx is import in the code, it will be\nmapped to the /src/common/Foo.tsx path.\n\nFunction Type#\n\nThe alias can be a function, it will accept the previous alias object, and you\ncan modify it.\n\nexport default {\n  source: {\n    alias: alias => {\n      alias['@common'] = './src/common';\n    },\n  },\n};\n\n\nYou can also return a new object as the final result in the function, which will\nreplace the previous alias object.\n\nexport default {\n  source: {\n    alias: alias => {\n      return {\n        '@common': './src/common',\n      };\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"alias"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/alias.mdx","_relativePath":"en/configure/app/source/alias.mdx"},{"id":150,"title":"source.compileJsDataURI","routePath":"/en/configure/app/source/compile-js-data-uri","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":419}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.compileJsDataURI.\n\n * Type: boolean\n * Default: true\n\nThis option is used to control whether to compile JavaScript code inside data\nURIs.\n\nBy default, Builder uses Babel or SWC to compile the code inside data URIs. For\nexample, the following code:\n\n\n\nimport 'data:text/javascript;charset=utf-8;base64,Y29uc29sZS5sb2coJ2lubGluZSAxJyk7';\n\n\n\nExample#\n\nAdd the following config to disable:\n\nexport default {\n  source: {\n    compileJsDataURI: false,\n  },\n};\n","frontmatter":{"sidebar_label":"compileJsDataURI"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/compile-js-data-uri.mdx","_relativePath":"en/configure/app/source/compile-js-data-uri.mdx"},{"id":151,"title":"source.configDir","routePath":"/en/configure/app/source/config-dir","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: string\n * Default: ./config\n\nModern.js supports placing some files in the ./config folder to customize HTML\ntemplates, icons, static resources, etc. For details, please refer to File\nConvention.\n\nThis option allows you to customize the directory of the configuration files.\n\nFor example, adjust the resource file directory to the resources directory:\n\n\n\nexport default defineConfig({\n  source: {\n    configDir: './resources',\n  },\n});\n","frontmatter":{"sidebar_label":"configDir"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/config-dir.mdx","_relativePath":"en/configure/app/source/config-dir.mdx"},{"id":152,"title":"source.define","routePath":"/en/configure/app/source/define","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":853}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see source.define.\n\n * Type: Record\n * Default: {}\n\nReplaces variables in your code with other values or expressions at compile\ntime. This can be useful for allowing different behavior between development\nbuilds and production builds.\n\nEach key passed into options is an identifier or multiple identifiers joined\nwith ..\n\n * If the value is a string it will be used as a code fragment.\n * If the value isn't a string, it will be stringified (including functions).\n * If the value is an object all keys are defined the same way.\n * If you prefix typeof to the key, it's only defined for typeof calls.\n\nFor more information please visit https://webpack.js.org/plugins/define-plugin/.\n\nTIP\n\nWhen using Rspack as the bundler, the supported types can be found in\nRspack.builtins.define.\n\n\nExample#\n\nexport default {\n  source: {\n    define: {\n      PRODUCTION: JSON.stringify(true),\n      VERSION: JSON.stringify('5fa3b9'),\n      BROWSER_SUPPORTS_HTML5: true,\n      TWO: '1 + 1',\n      'typeof window': JSON.stringify('object'),\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n      'import.meta': { test: undefined },\n    },\n  },\n};\n\n\nExpressions will be replaced with the corresponding code fragments:\n\nconst foo = TWO;\n\n// ⬇️ Turn into being...\nconst foo = 1 + 1;\n","frontmatter":{"sidebar_label":"define"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/define.mdx","_relativePath":"en/configure/app/source/define.mdx"},{"id":153,"title":"source.designSystem","routePath":"/en/configure/app/source/design-system","lang":"en","toc":[{"text":"Structure","id":"structure","depth":3,"charIndex":537},{"text":"Screens","id":"screens","depth":4,"charIndex":659},{"text":"Colors","id":"colors","depth":4,"charIndex":5015},{"text":"Spacing","id":"spacing","depth":4,"charIndex":5467},{"text":"Core Plugins","id":"core-plugins","depth":4,"charIndex":6085},{"text":"Customizing the Default Configuration","id":"customizing-the-default-configuration","depth":3,"charIndex":7193},{"text":"Overriding Default Configuration","id":"overriding-default-configuration","depth":4,"charIndex":7424},{"text":"Extending Default Configuration","id":"extending-default-configuration","depth":4,"charIndex":8179},{"text":"Referencing Other Values","id":"referencing-other-values","depth":4,"charIndex":9097},{"text":"Disabling Entire Core Plugins","id":"disabling-entire-core-plugins","depth":4,"charIndex":10544},{"text":"Adding Your Own Keys","id":"adding-your-own-keys","depth":4,"charIndex":11195},{"text":"Configuration Reference","id":"configuration-reference","depth":3,"charIndex":12492},{"text":"Additional Configuration","id":"additional-configuration","depth":3,"charIndex":13003},{"text":"source.designSystem.supportStyledComponents","id":"sourcedesignsystemsupportstyledcomponents","depth":4,"charIndex":13161}],"domain":"","content":"#\n\n * Type: Object\n * Default: See configuration details below.\n\nCAUTION\n\nTailwind CSS feature needs to be enabled first by running pnpm run new.\n\nTIP\n\nFor more information on TailwindCSS configuration, please refer to here.\n\nThe designSystem is used to define the project's color palette, typographic\nscales, font list, breakpoints, border radius values, and more. As Modern.js\nuses the design approach of Tailwind Theme and also integrates Tailwind CSS\ninternally, the usage of designSystem is the same as that of Tailwind CSS Theme.\n\n\nStructure#\n\nThe designSystem object contains properties for screens, colors, spacing, and\neach customizable core plugin.\n\nScreens#\n\nUse screens to customize the responsive breakpoints in your project:\n\nconst designSystem = {\n  screens: {\n    sm: '640px',\n    md: '768px',\n    lg: '1024px',\n    xl: '1280px',\n  },\n};\n\n\nThe property names in the screens object are screen names (used as prefixes for\nthe responsive utility variants generated by TailwindCSS, such as\nmd:text-center), and the values are the min-width at which the breakpoint should\nstart.\n\nThe default breakpoints are inspired by common device resolutions:\n\nconst designSystem = {\n  screens: {\n    sm: '640px',\n    // => @media (min-width: 640px) { ... }\n\n    md: '768px',\n    // => @media (min-width: 768px) { ... }\n\n    lg: '1024px',\n    // => @media (min-width: 1024px) { ... }\n\n    xl: '1280px',\n    // => @media (min-width: 1280px) { ... }\n  },\n};\n\n\nYou can use any names you like as properties for your breakpoints in your\nproject:\n\nconst designSystem = {\n  screens: {\n    tablet: '640px',\n    // => @media (min-width: 640px) { ... }\n\n    laptop: '1024px',\n    // => @media (min-width: 1024px) { ... }\n\n    desktop: '1280px',\n    // => @media (min-width: 1280px) { ... }\n  },\n};\n\n\nThese screen names are reflected in utilities, so text-center would now look\nlike this:\n\n.text-center {\n  text-align: center;\n}\n\n@media (min-width: 640px) {\n  .tablet\\:text-center {\n    text-align: center;\n  }\n}\n\n@media (min-width: 1024px) {\n  .laptop\\:text-center {\n    text-align: center;\n  }\n}\n\n@media (min-width: 1280px) {\n  .desktop\\:text-center {\n    text-align: center;\n  }\n}\n\n\nMax-width Breakpoint#\n\nIf you want to use max-width breakpoints instead of min-width, you can specify\nthe screen as an object with a max property:\n\nconst designSystem = {\n  screens: {\n    xl: { max: '1279px' },\n    // => @media (max-width: 1279px) { ... }\n\n    lg: { max: '1023px' },\n    // => @media (max-width: 1023px) { ... }\n\n    md: { max: '767px' },\n    // => @media (max-width: 767px) { ... }\n\n    sm: { max: '639px' },\n    // => @media (max-width: 639px) { ... }\n  },\n};\n\n\nIf necessary, you can create breakpoints with both min-width and max-width\ndefinitions, like so:\n\nconst designSystem = {\n  screens: {\n    sm: { min: '640px', max: '767px' },\n    md: { min: '768px', max: '1023px' },\n    lg: { min: '1024px', max: '1279px' },\n    xl: { min: '1280px' },\n  },\n};\n\n\nBreakpoints with Multiple Ranges#\n\nSometimes it can be useful to apply a single breakpoint definition to multiple\nranges.\n\nFor example, suppose you have a sidebar and want to base the breakpoints on the\nwidth of the content area rather than the entire viewport. You can simulate this\nby using a smaller breakpoint style when the sidebar is visible and the content\narea is reduced:\n\nconst designSystem = {\n  screens: {\n    sm: '500px',\n    md: [\n      // Sidebar appears at 768px, so revert to `sm:` styles between 768px\n      // and 868px, after which the main content area is wide enough again to\n      // apply the `md:` styles.\n      { min: '668px', max: '767px' },\n      { min: '868px' },\n    ],\n    lg: '1100px',\n    xl: '1400px',\n  },\n};\n\n\nCustom Media Queries#\n\nIf you need to provide fully custom media queries for your breakpoints, you can\nuse an object with a raw property:\n\nconst designSystem = {\n  extend: {\n    screens: {\n      portrait: { raw: '(orientation: portrait)' },\n      // => @media (orientation: portrait) { ... }\n    },\n  },\n};\n\n\nPrint Style#\n\nThe raw option may be especially useful if you need to apply different styles\nfor printing.\n\nAll you need to do is add a print under designSystem.extend.screens:\n\nconst designSystem = {\n  extend: {\n    screens: {\n      print: { raw: 'print' },\n      // => @media print { ... }\n    },\n  },\n};\n\n\nThen, you can use classes like print:text-black to specify styles that should\nonly be applied when someone tries to print the page:\n\n\n  {/* ...  */}\n\n\n\nDark Mode#\n\nThe raw option can be used to implement \"dark mode\" screens:\n\nconst designSystem = {\n  extend: {\n    screens: {\n      dark: { raw: '(prefers-color-scheme: dark)' },\n      // => @media (prefers-color-scheme: dark) { ... }\n    },\n  },\n};\n\n\nThen, you can use the dark: prefix to set different styles for elements in dark\nmode:\n\n\n  {/* ...  */}\n\n\n\nPlease note that since these screen variants are implemented in TailwindCSS, it\nis not possible to use this method to combine breakpoints with dark mode, e.g.\nmd:dark:text-gray-300 will not work.\n\nColors#\n\nThe colors property allows you to customize the global color palette for your\nproject.\n\nconst designSystem = {\n  colors: {\n    transparent: 'transparent',\n    black: '#000',\n    white: '#fff',\n    gray: {\n      100: '#f7fafc',\n      // ...\n      900: '#1a202c',\n    },\n\n    // ...\n  },\n};\n\n\nBy default, these colors are inherited by the backgroundColor, textColor, and\nborderColor core plugins.\n\nFor more information, see Customizing Colors.\n\nSpacing#\n\nUse the space property to customize the global spacing and scale ratios for your\nproject:\n\nconst designSystem = {\n  spacing: {\n    px: '1px',\n    0: '0',\n    1: '0.25rem',\n    2: '0.5rem',\n    3: '0.75rem',\n    4: '1rem',\n    5: '1.25rem',\n    6: '1.5rem',\n    8: '2rem',\n    10: '2.5rem',\n    12: '3rem',\n    16: '4rem',\n    20: '5rem',\n    24: '6rem',\n    32: '8rem',\n    40: '10rem',\n    48: '12rem',\n    56: '14rem',\n    64: '16rem',\n  },\n};\n\n\nBy default, these values are inherited by the padding, margin, negativeMargin,\nwidth, and height core plugins.\n\nFor more information, see Customizing Spacing.\n\nCore Plugins#\n\nThe rest of the theme section is used to configure the values available for each\ncore plugin.\n\nFor example, the borderRadius property allows you to customize the utilities for\nthe generated border radius:\n\nconst designSystem = {\n  borderRadius: {\n    none: '0',\n    sm: '.125rem',\n    default: '.25rem',\n    lg: '.5rem',\n    full: '9999px',\n  },\n};\n\n\nThe property name determines the suffix of the generated classes, and the value\ndetermines the value of the actual CSS declaration. The borderRadius\nconfiguration example above will generate the following CSS classes:\n\n.rounded-none {\n  border-radius: 0;\n}\n.rounded-sm {\n  border-radius: 0.125rem;\n}\n.rounded {\n  border-radius: 0.25rem;\n}\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n.rounded-full {\n  border-radius: 9999px;\n}\n\n\nYou may notice that the rounded class without a suffix is created using the\ndefault property in the theme configuration. This is a common convention in\nTailwind CSS that many (although not all) core plugins support.\n\nFor more information on customizing specific core plugins, see the documentation\nfor that plugin.\n\n\nCustomizing the Default Configuration#\n\nOut of the box, your project will inherit values from the default theme\nconfiguration. If you want to customize the default theme, there are a few\ndifferent options depending on your goals.\n\nOverriding Default Configuration#\n\nTo override an option in the default configuration, add the property you want to\noverride to designSystem:\n\nconst designSystem = {\n  // Replaces all of the default `opacity` values\n  opacity: {\n    0: '0',\n    20: '0.2',\n    40: '0.4',\n    60: '0.6',\n    80: '0.8',\n    100: '1',\n  },\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n\n\nThis will completely replace the default property configuration, so in the\nexample above, the default opacity utilities will not be generated.\n\nAny properties you don't provide will still inherit from the default theme, so\nin the example above, the default theme configuration for colors, spacing,\nborder radius, background positions, etc. will be preserved.\n\nExtending Default Configuration#\n\nIf you want to keep the default values for a theme option but add new values,\nadd the extension under the designSystem.extend property.\n\nFor example, if you want to add an additional breakpoint but keep the existing\nones, you can extend the screens property:\n\nconst designSystem = {\n  extend: {\n    // Adds a new breakpoint in addition to the default breakpoints\n    screens: {\n      '2xl': '1440px',\n    },\n  },\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n\n\nOf course, you can override some parts of the default theme and extend other\nparts of the default theme in the same configuration:\n\nconst designSystem = {\n  opacity: {\n    0: '0',\n    20: '0.2',\n    40: '0.4',\n    60: '0.6',\n    80: '0.8',\n    100: '1',\n  },\n  extend: {\n    screens: {\n      '2xl': '1440px',\n    },\n  },\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n\n\nReferencing Other Values#\n\nIf you need to reference another value in your configuration, you can do so by\nproviding a closure function instead of a static value. The function will\nreceive the theme() function as an argument, which you can use to look up other\nvalues in the configuration using dot notation.\n\nFor example, you can generate fill utilities for each color in your palette by\nreferencing theme('colors') on the fill configuration:\n\nconst designSystem = {\n  colors: {\n    // ...\n  },\n  fill: theme => theme('colors'),\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n\n\nThe theme() function attempts to find the value you're looking for from the\nfully merged configuration object, so it can reference your own custom settings\nas well as default theme values. It also works recursively, so as long as\nthere's a static value at the end of the chain, it can resolve the value you're\nlooking for.\n\nReferencing Default Configuration\n\nIf you want to reference a value from the default configuration for any reason,\nyou can import it from tailwindcss/defaultTheme. A useful example is if you want\nto add a font from the fonts provided by the default configuration:\n\nconst defaultTheme = require('tailwindcss/defaultTheme');\n\nconst designSystem = {\n  extend: {\n    fontFamily: {\n      sans: ['Lato', ...defaultTheme.fontFamily.sans],\n    },\n  },\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n});\n\n\nDisabling Entire Core Plugins#\n\nIf you don't want to generate any classes for a particular core plugin, it's\nbest to set that plugin to false in the corePlugins configuration rather than\nproviding an empty object for that property in the configuration:\n\n// Don't assign an empty object in your theme configuration\n\nconst designSystem = {\n  opacity: {},\n};\n\n// Do disable the plugin in your corePlugins configuration\nconst designSyttem = {\n  corePlugins: {\n    opacity: false,\n  },\n};\n\n\nThe end result is the same, but since many core plugins don't expose any\nconfiguration, they can only be disabled using corePlugins, so it's best to be\nconsistent.\n\nAdding Your Own Keys#\n\nIn many cases, adding your own properties to the configuration object can be\nuseful.\n\nOne example of this is adding a new property for reuse between multiple core\nplugins. For example, you could extract a positions object that both the\nbackgroundPosition and objectPosition plugins could reference:\n\nconst designSystem = {\n  positions: {\n    bottom: 'bottom',\n    center: 'center',\n    left: 'left',\n    'left-bottom': 'left bottom',\n    'left-top': 'left top',\n    right: 'right',\n    'right-bottom': 'right bottom',\n    'right-top': 'right top',\n    top: 'top',\n  },\n  backgroundPosition: theme => theme('positions'),\n  objectPosition: theme => theme('positions'),\n};\n\n\nAnother example is adding new properties for reference in custom plugins. For\nexample, if you've written a gradient plugin for your project, you could add a\ngradients property to the theme object that the plugin references:\n\nconst designSystem = {\n  gradients: theme => ({\n    'blue-green': [theme('colors.blue.500'), theme('colors.green.500')],\n    'purple-blue': [theme('colors.purple.500'), theme('colors.blue.500')],\n    // ...\n  }),\n};\n\nexport default defineConfig({\n  source: {\n    designSystem,\n  },\n  tools: {\n    tailwind: {\n      plugins: [require('./plugins/gradients')],\n    },\n  },\n});\n\n\n\nConfiguration Reference#\n\nIn addition to screens, colors, and spacing, all properties in the configuration\nobject map to core plugins in TailwindCSS. Because many plugins are responsible\nfor CSS properties that only accept a set of static values (e.g. float), not\nevery plugin has a corresponding property in the theme object.\n\nAll of these properties can also be extended from the default theme under the\ndesignSystem.extend property.\n\nFor a complete list of all properties and their effects, see this link.\n\n\nAdditional Configuration#\n\nIn addition to the configuration that is the same as Tailwind CSS Theme, there\nis additional configuration provided by Modern.js.\n\nsource.designSystem.supportStyledComponents#\n\nThis configuration is of type boolean and defaults to false.\n\nWhen this configuration value is true, a styled-components ThemeProvider\ncomponent is provided at the outermost layer of the application at runtime, and\nthe Theme Token object generated through designSystem is injected.","frontmatter":{"sidebar_label":"designSystem"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/design-system.mdx","_relativePath":"en/configure/app/source/design-system.mdx"},{"id":154,"title":"source.disableDefaultEntries","routePath":"/en/configure/app/source/disable-default-entries","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: boolean\n * Default: false\n\nUsed to disable the functionality of automatically identifying page entry points\nbased on directory structure.\n\nINFO\n\nBy default, Modern.js automatically determines the entry points of pages based\non directory conventions, as described in Entries.\n\nTo disable this default behavior, set the following:\n\nexport default defineConfig({\n  source: {\n    disableDefaultEntries: true,\n  },\n});\n\n\nAfter disabling the default behavior, you will need to use the source.entries\nconfiguration to define custom entry points.\n\nWARNING\n\nWe recommend organizing your code using the directory conventions provided by\nModern.js to make better use of the framework's functionality and to avoid some\nredundant configurations.","frontmatter":{"sidebar_label":"disableDefaultEntries"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/disable-default-entries.mdx","_relativePath":"en/configure/app/source/disable-default-entries.mdx"},{"id":155,"title":"source.disableEntryDirs","routePath":"/en/configure/app/source/disable-entry-dirs","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: string[]\n * Default: []\n\nBy default, Modern.js identifies the application entry point based on the src\ndirectory. You can use this option to prevent some directories from being\nrecognized as application entry points.\n\nFor example, with the following configuration and directory structure:\n\nexport default defineConfig({\n  source: {\n    disableEntryDirs: ['./src/one'],\n  },\n});\n\n\n└── src/\n    ├── one/\n    |    └── App.tsx\n    ├── two/\n    |    └── routes/\n    └── env.d.ts\n\n\nWithout setting this configuration option, Modern.js will produce two entries\nbased on the project directory:\n\n * one\n * two\n\nAfter setting this configuration option, the src/one directory will not be\nrecognized as an entry directory.\n\nA common use case is to configure the src/common and src/components directories\nin this option to prevent them from being recognized as application entry\npoints.","frontmatter":{"sidebar_label":"disableEntryDirs"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/disable-entry-dirs.mdx","_relativePath":"en/configure/app/source/disable-entry-dirs.mdx"},{"id":156,"title":"source.enableAsyncEntry","routePath":"/en/configure/app/source/enable-async-entry","lang":"en","toc":[{"text":"Background","id":"background","depth":2,"charIndex":315},{"text":"Example","id":"example","depth":2,"charIndex":435}],"domain":"","content":"#\n\n * Type: boolean\n * Default: false\n\nThis option is used for webpack Module Federation scenario.\n\nWhen this option is enabled, Modern.js will wrap the automatically generated\nentry files with Dynamic Imports (Asynchronous Boundaries), allowing page code\nto consume remote modules generated by Module Federation.\n\n\nBackground#\n\nIf you are not familiar with webpack Module Federation, please read the Module\nFederation documentation.\n\n\nExample#\n\nFirst, enable this option in the configuration file:\n\nexport default defineConfig({\n  source: {\n    enableAsyncEntry: true,\n  },\n});\n\n\nThen run the dev or build command, and you will see that the files automatically\ngenerated by Modern.js have the following structure:\n\nnode_modules\n  └─ .modern-js\n     └─ main\n        ├─ bootstrap.jsx  #  real entry code\n        ├─ index.js      # asynchronous entry file\n        └─ index.html\n\n\nThe contents of index.js are as follows:\n\nimport('./bootstrap.jsx');\n\n\nAt this point, you can consume any remote module in the current page.\n\nINFO\n\nModern.js does not have webpack's ModuleFederationPlugin plugin built in. Please\nconfigure the ModuleFederationPlugin yourself via tools.webpackChain.","frontmatter":{"sidebar_label":"enableAsyncEntry"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/enable-async-entry.mdx","_relativePath":"en/configure/app/source/enable-async-entry.mdx"},{"id":157,"title":"source.entriesDir","routePath":"/en/configure/app/source/entries-dir","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: string\n * Default: ./src\n\nBy default, Modern.js scans the src directory to identify page entries. You can\ncustomize the directory used for identifying page entries with this option.\n\nFor example, with the following configuration and directory structure:\n\nexport default defineConfig({\n  source: {\n    entriesDir: './src/pages',\n  },\n});\n\n\n.\n└── src\n    └── pages\n        ├── a\n        │   └── App.tsx\n        └── b\n            └── App.tsx\n\n\nModern.js will generate the build entries a and b based on the ./src/pages\ndirectory structure. The result is as follows:\n\nconst entry = {\n  a: './src/pages/a/App.tsx',\n  b: './src/pages/b/App.tsx',\n};\n","frontmatter":{"sidebar_label":"entriesDir"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/entries-dir.mdx","_relativePath":"en/configure/app/source/entries-dir.mdx"},{"id":158,"title":"source.entries","routePath":"/en/configure/app/source/entries","lang":"en","toc":[{"text":"String","id":"string","depth":2,"charIndex":553},{"text":"Object","id":"object","depth":2,"charIndex":1671},{"text":"Disable entry file generation","id":"disable-entry-file-generation","depth":3,"charIndex":2225},{"text":"Conventional Routing","id":"conventional-routing","depth":3,"charIndex":2800},{"text":"Entry Merge Rules","id":"entry-merge-rules","depth":2,"charIndex":3247}],"domain":"","content":"#\n\n * Type:\n\ntype Entries = Record<\n  string,\n  | string\n  | {\n      entry: string;\n      disableMount?: boolean;\n      customBootstrap?: string;\n    }\n>;\n\n\n * Default: The entry object calculated based on the directory structure of the\n   current project.\n\nUsed to configure custom page entries.\n\nWhen to use\n\nFor most scenarios, the entry automatically generated by Modern.js based on the\ndirectory structure can meet the requirements. For details, please refer to\nEntry.\n\nIf you need to customize page entries, you can set them through this option.\n\n\nString#\n\nWhen the value of the entries object is of type string, it represents the file\npath of the entry module:\n\n\n\nexport default defineConfig({\n  source: {\n    entries: {\n      // Specify a new entry named entry_customize\n      entry_customize: './src/home/test/index.ts',\n    },\n    disableDefaultEntries: true,\n  },\n});\n\n\nBy default, the configured entry is equivalent to App.[jt]sx, which means that\nthe specified entry file only needs to export the root component of the\napplication.\n\nFor example, the following directory structure:\n\n.\n├── src\n│   └── entry\n│       ├── chat.tsx\n│       └── home.tsx\n└── package.json\n\n\nThe above directory does not conform to the directory structure convention of\nModern.js, so Modern.js will not get any default entries when analyzing the\ndirectory structure.\n\nIf you do not want to change the directory structure (such as project\nmigration), you can customize the entry through source.entries:\n\nexport default defineConfig({\n  source: {\n    entries: {\n      home: './src/entry/home.tsx',\n      chat: './src/entry/chat.tsx',\n    },\n    disableDefaultEntries: true,\n  },\n});\n\n\n\nObject#\n\nWhen the value is Object, the following attributes can be configured:\n\n * entry: string, the entry file path.\n * disableMount: boolean = false, disable Modern.js's behavior of automatically\n   generating entry code.\n * customBootstrap: string = '', specify the file path of custom Bootstrap.\n\n\n\nexport default defineConfig({\n  source: {\n    entries: {\n      entry_customize: {\n        // entry file path\n        entry: './src/home/test/App.tsx',\n      },\n    },\n    // Disable default entry scanning\n    disableDefaultEntries: true,\n  },\n});\n\n\n\nDisable entry file generation#\n\nBy default, the configured entry is equivalent to App.[jt]sx, and Modern.js will\nautomatically generate an entry file to reference the entry you configured.\n\nIf you want to disable the logic of Modern.js automatically generating entry\nfiles, you can set the disableMount property to true.\n\nexport default defineConfig({\n  source: {\n    entries: {\n      entry_customize: {\n        entry: './src/home/test/index.tsx',\n        disableMount: true,\n      },\n    },\n    // Disable default entry scanning\n    disableDefaultEntries: true,\n  },\n});\n\n\n\nConventional Routing#\n\nIf you need to enable conventional routing for a custom entry, you can set entry\nto a directory path:\n\n\n\nexport default defineConfig({\n  source: {\n    entries: {\n      // enable conventional routing\n      entry_spa: {\n        // The entry path of conventional routing must be set to a directory\n        entry: './src/about',\n      },\n    },\n    // Disable default entry scanning\n    disableDefaultEntries: true,\n  },\n});\n\n\n\nEntry Merge Rules#\n\nAfter setting source.entries, if disableDefaultEntries: true is not set,\nModern.js will merge the custom entry with the entry obtained by analyzing the\ndirectory structure.\n\nThe merge rule is:\n\n * Compare the entry paths set by the custom entry setting and the default entry\n   path. When the entry paths are the same, the custom entry will override the\n   default entry.\n\nFor example, the following directory structure:\n\n.\n├── src\n│   ├── chat\n│   │   └── App.tsx\n│   └── home\n│       └── index.ts\n└── package.json\n\n\nModern.js will analyze the src/ directory and get the default entries chat and\nhome. When the user configures as follows in the modern.config.ts file:\n\n\n\nexport default defineConfig({\n  source: {\n    entries: {\n      index: './src/home/index.ts',\n    },\n  },\n};\n\n\nIt can be seen that the path of the custom entry index is the same as the path\nof the default entry home. During the merge process, index will override home,\nand the final entry is as follows:\n\n * chat -> ./src/chat/App.tsx\n * index -> ./src/home/index.ts","frontmatter":{"sidebar_label":"entries"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/entries.mdx","_relativePath":"en/configure/app/source/entries.mdx"},{"id":159,"title":"source.exclude","routePath":"/en/configure/app/source/exclude","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.exclude.\n\n * Type: Array\n * Default: []\n * Bundler: only support webpack\n\nSpecifies JavaScript/TypeScript files that do not need to be compiled. The usage\nis consistent with Rule.exclude in webpack, which supports passing in strings or\nregular expressions to match the module path.\n\nTIP\n\nWhen using Rspack as the bundler, all files will be compiled by default, and at\nthe same time, exclusion through source.exclude is not supported.\n\nFor example:\n\n\n\nexport default {\n  source: {\n    exclude: [path.resolve(__dirname, 'src/module-a'), /src\\/module-b/],\n  },\n};\n","frontmatter":{"sidebar_label":"exclude"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/exclude.mdx","_relativePath":"en/configure/app/source/exclude.mdx"},{"id":160,"title":"source.globalVars","routePath":"/en/configure/app/source/global-vars","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":566},{"text":"Function Usage","id":"function-usage","depth":3,"charIndex":909},{"text":"Difference with define","id":"difference-with-define","depth":3,"charIndex":1349},{"text":"Precautions","id":"precautions","depth":3,"charIndex":2037}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.globalVars.\n\n * Type: Record | Function\n * Default:\n\nconst defaultGlobalVars = {\n  // The environment variable `process.env.NODE_ENV` will be added by default,\n  // so you don't need to set it in manually.\n  'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n};\n\n\nUsed to define global variables. It can replace expressions like process.env.FOO\nin your code after compile. Such as:\n\nconsole.log(process.env.NODE_ENV);\n\n// ⬇️ Turn into being...\nconsole.log('development');\n\n\n\nExample#\n\nIn the following example, the ENABLE_VCONSOLE and APP_CONTEXT are injected into\nthe code:\n\nexport default {\n  source: {\n    globalVars: {\n      ENABLE_VCONSOLE: true,\n      APP_CONTEXT: { answer: 42 },\n    },\n  },\n};\n\n\nYou can use them directly in your code:\n\nif (ENABLE_VCONSOLE) {\n  // do something\n}\n\nconsole.log(APP_CONTEXT);\n\n\n\nFunction Usage#\n\n * Type:\n\ntype GlobalVarsFn = (\n  obj: Record,\n  utils: { env: NodeEnv; target: BuilderTarget },\n) => Record | void;\n\n\nYou can set source.globalVars to a function to dynamically setting some\nenvironment variables.\n\nFor example, dynamically set according to the build target:\n\nexport default {\n  source: {\n    globalVars(obj, { target }) {\n      obj['MY_TARGET'] = target === 'node' ? 'server' : 'client';\n    },\n  },\n};\n\n\n\nDifference with define#\n\nYou can take source.globalVars as the syntax sugar of source.define, the only\ndifference is that source.globalVars will automatically stringify the value,\nwhich makes it easier to set the value of global variables. The values of\nglobalVars should be JSON-safe to ensure it can be serialized.\n\nexport default {\n  source: {\n    globalVars: {\n      'process.env.BUILD_VERSION': '0.0.1',\n      'import.meta.foo': { bar: 42 },\n      'import.meta.baz': false,\n    },\n    define: {\n      'process.env.BUILD_VERSION': JSON.stringify('0.0.1'),\n      'import.meta': {\n        foo: JSON.stringify({ bar: 42 }),\n        baz: JSON.stringify(false),\n      },\n    },\n  },\n};\n\n\n\nPrecautions#\n\nsource.globalVars injects environment variables through string replacement, so\nit cannot take effect on dynamic syntaxes such as destructuring.\n\nWhen using destructuring assignment, Builder will not be able to determine\nwhether the variable NODE_ENV is associated with the expression\nprocess.env.NODE_ENV to be replaced, so the following usage is invalid:\n\nconst { NODE_ENV } = process.env;\nconsole.log(NODE_ENV);\n// ❌ Won't get a string.\n","frontmatter":{"sidebar_label":"globalVars"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/global-vars.mdx","_relativePath":"en/configure/app/source/global-vars.mdx"},{"id":161,"title":"source.include","routePath":"/en/configure/app/source/include","lang":"en","toc":[{"text":"Compile Npm Packages","id":"compile-npm-packages","depth":3,"charIndex":933},{"text":"Compile Sub Dependencies","id":"compile-sub-dependencies","depth":3,"charIndex":1975},{"text":"Compile Libraries in Monorepo","id":"compile-libraries-in-monorepo","depth":3,"charIndex":2441},{"text":"Compile CommonJS Module","id":"compile-commonjs-module","depth":3,"charIndex":3095},{"text":"Matching Symlink","id":"matching-symlink","depth":3,"charIndex":3614},{"text":"Precautions","id":"precautions","depth":3,"charIndex":4035}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.include.\n\n * Type: Array\n * Default: []\n * Bundler: only support webpack\n\nIn order to maintain faster compilation speed, Builder will not compile\nJavaScript/TypeScript files under node_modules through babel-loader or ts-loader\nby default, as will as the JavaScript/TypeScript files outside the current\nproject directory.\n\nThrough the source.include config, you can specify directories or modules that\nneed to be compiled by Builder. The usage of source.include is consistent with\nRule.include in webpack, which supports passing in strings or regular\nexpressions to match the module path.\n\nFor example:\n\n\n\nexport default {\n  source: {\n    include: [path.resolve(__dirname, '../other-dir')],\n  },\n};\n\n\nTIP\n\nWhen using Rspack as the bundler, all files will be compiled by default, and at\nthe same time, exclusion through source.exclude is not supported.\n\n\nCompile Npm Packages#\n\nA typical usage scenario is to compile npm packages under node_modules, because\nsome third-party dependencies have ES6+ syntax, which may cause them to fail to\nrun on low-version browsers. You can solve the problem by using this config to\nspecify the dependencies that need to be compiled.\n\nTake query-string as an example, you can add the following config:\n\n\n\nexport default {\n  source: {\n    include: [\n      // Method 1:\n      // First get the path of the module by require.resolve\n      // Then pass path.dirname to point to the corresponding directory\n      path.dirname(require.resolve('query-string')),\n      // Method 2:\n      // Match by regular expression\n      // All paths containing `/query-string/` will be matched\n      /\\/query-string\\//,\n    ],\n  },\n};\n\n\n> Note that this config will only compile the code of query-string itself, not\n> the sub-dependencies of query-string. If you need to compile a sub-dependency\n> of query-string, you need to add the corresponding npm package to\n> source.include.\n\n\nCompile Sub Dependencies#\n\nWhen you compile an npm package via source.include, Builder will only compile\nthe matching module by default, not the Sub Dependencies of the module.\n\nTake query-string for example, it depends on the decode-uri-component package,\nwhich also has ES6+ code, so you need to add the decode-uri-component package to\nsource.include as well.\n\nexport default {\n  source: {\n    include: [/\\/query-string\\//, /\\/decode-uri-component\\//],\n  },\n};\n\n\n\nCompile Libraries in Monorepo#\n\nWhen developing in Monorepo, if you need to refer to the source code of other\nlibraries in Monorepo, you can add the corresponding library to source.include:\n\n\n\nexport default {\n  source: {\n    include: [\n      // Method 1:\n      // Compile all files in Monorepo's package directory\n      path.resolve(__dirname, '../../packages'),\n\n      // Method 2:\n      // Compile the source code of a package in Monorepo's package directory\n      // This way of writing matches the range more accurately and has less impact on the overall build performance.\n      path.resolve(__dirname, '../../packages/xxx/src'),\n    ],\n  },\n};\n\n\n\nCompile CommonJS Module#\n\nBabel cannot compile CommonJS modules by default, and if you compile a CommonJS\nmodule, you may get a runtime error message exports is not defined.\n\nWhen you need to compile a CommonJS module using source.include, you can set\nBabel's sourceType configuration to unambiguous.\n\nexport default {\n  tools: {\n    babel(config) {\n      config.sourceType = 'unambiguous';\n    },\n  },\n};\n\n\nSetting sourceType to unambiguous may have some other effects, please refer to\nBabel official documentation.\n\n\nMatching Symlink#\n\nIf you match a module that is symlinked to the current project, then you need to\nmatch the real path of the module, not the symlinked path.\n\nFor example, if you symlink the packages/foo path in Monorepo to the\nnode_modules/foo path of the current project, you need to match the packages/foo\npath, not the node_modules/foo path.\n\nThis behavior can be controlled via webpack's resolve.symlinks config.\n\n\nPrecautions#\n\nNote that source.include should not be used to compile the entire node_modules\ndirectory. For example, the following usage is wrong:\n\nexport default {\n  source: {\n    include: [/\\/node_modules\\//],\n  },\n};\n\n\nIf you compile the entire node_modules, not only will the build time be greatly\nincreased, but also unexpected errors may occur. Because most of the npm\npackages in node_modules are already compiled, there is usually no need for a\nsecond compilation. In addition, exceptions may occur after npm packages such as\ncore-js are compiled.","frontmatter":{"sidebar_label":"include"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/include.mdx","_relativePath":"en/configure/app/source/include.mdx"},{"id":162,"title":"source.moduleScopes","routePath":"/en/configure/app/source/module-scopes","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":348},{"text":"Array Type","id":"array-type","depth":4,"charIndex":792},{"text":"Function Type","id":"function-type","depth":4,"charIndex":943}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.moduleScopes.\n\n * Type: Array | Function\n * Default: undefined\n * Bundler: only support webpack\n\nRestrict importing paths. After configuring this option, all source files can\nonly import code from the specific paths, and import code from other paths is\nnot allowed.\n\n\nExample#\n\nFirst, we configure moduleScopes to only include the src directory:\n\nexport default {\n  source: {\n    moduleScopes: ['./src'],\n  },\n};\n\n\nThen we import the utils/a module outside the src directory in src/App.tsx:\n\n\n\n\nAfter compiling, there will be a reference path error:\n\n\n\nIf we configure the utils directory in moduleScopes, the error will disappear.\n\nexport default {\n  source: {\n    moduleScopes: ['./src', './utils'],\n  },\n};\n\n\nArray Type#\n\nYou can directly set several paths like this:\n\nexport default {\n  source: {\n    moduleScopes: ['./src', './shared', './utils'],\n  },\n};\n\n\nFunction Type#\n\nmoduleScopes also supports setting as a function, which can be modified instead\nof overriding the default value:\n\nexport default {\n  source: {\n    moduleScopes: scopes => {\n      scopes.push('./shared');\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"moduleScopes"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/module-scopes.mdx","_relativePath":"en/configure/app/source/module-scopes.mdx"},{"id":163,"title":"source.preEntry","routePath":"/en/configure/app/source/pre-entry","lang":"en","toc":[{"text":"Add a single script","id":"add-a-single-script","depth":4,"charIndex":340},{"text":"Add global style","id":"add-global-style","depth":4,"charIndex":718},{"text":"Add multiple scripts","id":"add-multiple-scripts","depth":4,"charIndex":978}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.preEntry.\n\n * Type: string | string[]\n * Default: undefined\n\nAdd a script before the entry file of each page. This script will be executed\nbefore the page code. It can be used to execute global logics, such as injecting\npolyfills, setting global styles, etc.\n\nAdd a single script#\n\nFirst create a src/polyfill.ts file:\n\nconsole.log('I am a polyfill');\n\n\nThen configure src/polyfill.ts to source.preEntry:\n\nexport default {\n  source: {\n    preEntry: './src/polyfill.ts',\n  },\n};\n\n\nRe-run the compilation and visit any page, you can see that the code in\nsrc/polyfill.ts has been executed, and the I am a polyfill is logged in the\nconsole.\n\nAdd global style#\n\nYou can also configure the global style through source.preEntry, this CSS code\nwill be loaded earlier than the page code, such as introducing a normalize.css\nfile:\n\nexport default {\n  source: {\n    preEntry: './src/normalize.css',\n  },\n};\n\n\nAdd multiple scripts#\n\nYou can add multiple scripts by setting preEntry to an array, and they will be\nexecuted in array order:\n\nexport default {\n  source: {\n    preEntry: ['./src/polyfill-a.ts', './src/polyfill-b.ts'],\n  },\n};\n","frontmatter":{"sidebar_label":"preEntry"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/pre-entry.mdx","_relativePath":"en/configure/app/source/pre-entry.mdx"},{"id":164,"title":"source.resolveExtensionPrefix","routePath":"/en/configure/app/source/resolve-extension-prefix","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":354},{"text":"Set according to Targets","id":"set-according-to-targets","depth":4,"charIndex":729}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.resolveExtensionPrefix.\n\n * Type: string | Record\n * Default: undefined\n\nAdd a prefix to resolve.extensions.\n\nIf multiple files share the same name but have different extensions, Builder\nwill resolve the one with the extension listed first in the array and skip the\nrest.\n\n\nExample#\n\nexport default {\n  source: {\n    resolveExtensionPrefix: '.web',\n  },\n};\n\n\nWith the configuration above, the extensions array will become:\n\n// before\nconst extensions = ['.js', '.ts', ...];\n\n// after\nconst extensions = ['.web.js', '.js', '.web.ts' , '.ts', ...];\n\n\nWhen import './foo' in the code, the foo.web.js file will be resolved first,\nthen the foo.js file.\n\nSet according to Targets#\n\nWhen you build multiple targets at the same time, you can set different\nextension prefix for different targets. At this point, you need to set\nresolveExtensionPrefix to an object whose key is the corresponding build target.\n\nFor example to set different extension prefix for web and node:\n\nexport default {\n  output: {\n    source: {\n      resolveExtensionPrefix: {\n        web: '.web',\n        node: '.node',\n      },\n    },\n  },\n};\n\n\nWhen import './foo' in the code, the foo.node.js file will be resolved for node\ntarget, and the foo.web.js file will be resolved for web target.","frontmatter":{"sidebar_label":"resolveExtensionPrefix"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/resolve-extension-prefix.mdx","_relativePath":"en/configure/app/source/resolve-extension-prefix.mdx"},{"id":165,"title":"source.resolveMainFields","routePath":"/en/configure/app/source/resolve-main-fields","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":356},{"text":"Set according to Targets","id":"set-according-to-targets","depth":4,"charIndex":460}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.resolveMainFields.\n\n * Type:\n\ntype Fields = (string | string[])[];\n\ntype ResolveMainFields = Fields | Record;\n\n\n * Default: undefined\n\nThis config will determine which field of package.json you use to import the npm\nmodule. Same as the resolve.mainFields config of webpack.\n\n\nExample#\n\nexport default {\n  source: {\n    resolveMainFields: ['main', 'browser', 'exports'],\n  },\n};\n\n\nSet according to Targets#\n\nWhen you build multiple targets at the same time, you can set different\nmainFields for different targets. At this point, you need to set\nresolveMainFields to an object whose key is the corresponding build target.\n\nFor example to set different mainFields for web and node:\n\nexport default {\n  output: {\n    source: {\n      resolveMainFields: {\n        web: ['main', 'browser', 'exports'],\n        node: ['main', 'node', 'exports'],\n      },\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"resolveMainFields"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/resolve-main-fields.mdx","_relativePath":"en/configure/app/source/resolve-main-fields.mdx"},{"id":166,"title":"source.transformImport","routePath":"/en/configure/app/source/transform-import","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":1804},{"text":"Disable Default Config","id":"disable-default-config","depth":3,"charIndex":2132},{"text":"Configuration","id":"configuration","depth":3,"charIndex":2564},{"text":"libraryName","id":"libraryname","depth":4,"charIndex":2580},{"text":"libraryDirectory","id":"librarydirectory","depth":4,"charIndex":2667},{"text":"style","id":"style","depth":4,"charIndex":2885},{"text":"styleLibraryDirectory","id":"stylelibrarydirectory","depth":4,"charIndex":3201},{"text":"camelToDashComponentName","id":"cameltodashcomponentname","depth":4,"charIndex":3568},{"text":"transformToDefaultImport","id":"transformtodefaultimport","depth":4,"charIndex":3739},{"text":"customName","id":"customname","depth":4,"charIndex":3915},{"text":"customStyleName","id":"customstylename","depth":4,"charIndex":4788}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\nsource.transformImport.\n\nUsed to import the code and style of the component library on demand, which is\nequivalent to babel-plugin-import.\n\nThe difference between it and babel-plugin-import is that source.transformImport\nis not coupled with Babel. Builder will automatically identify whether the\ncurrently used tools is Babel, SWC or Rspack, and apply the corresponding\non-demand import configuration.\n\n * Type:\n\ntype Config =\n  | false\n  | Array<{\n      libraryName: string;\n      libraryDirectory?: string;\n      style?: string | boolean;\n      styleLibraryDirectory?: string;\n      camelToDashComponentName?: boolean;\n      transformToDefaultImport?: boolean;\n      customName?: ((member: string) => string | undefined) | string;\n      customStyleName?: ((member: string) => string | undefined) | string;\n    }>;\n\n\n * Default:\n\nWhen the Ant Design component library <= 4.x version is installed in the\nproject, Builder will automatically add the following default configurations:\n\nconst defaultAntdConfig = {\n  libraryName: 'antd',\n  libraryDirectory: isServer ? 'lib' : 'es',\n  style: true,\n};\n\n\nWhen the Arco Design component library is installed in the project, Builder will\nautomatically add the following default configurations:\n\nconst defaultArcoConfig = [\n  {\n    libraryName: '@arco-design/web-react',\n    libraryDirectory: isServer ? 'lib' : 'es',\n    camelToDashComponentName: false,\n    style: true,\n  },\n  {\n    libraryName: '@arco-design/web-react/icon',\n    libraryDirectory: isServer ? 'react-icon-cjs' : 'react-icon',\n    camelToDashComponentName: false,\n  },\n];\n\n\nTIP\n\nWhen you add configurations for antd or @arco-design/web-react, the priority\nwill be higher than the default configurations mentioned above.\n\n\nExample#\n\nWhen using the above antd default configuration:\n\nexport default {\n  source: {\n    transformImport: [\n      {\n        libraryName: 'antd',\n        libraryDirectory: 'es',\n        style: true,\n      },\n    ],\n  },\n};\n\n\nThe source code is as follows:\n\n\n\n\nIt will be transformed into:\n\n\nimport 'antd/es/button/style';\n\n\n\nDisable Default Config#\n\nYou can manually set transformImport: false to disable the default config.\n\nexport default {\n  source: {\n    transformImport: false,\n  },\n};\n\n\nFor example, if you use externals to avoid bundling antd, because\ntransformImport will convert the imported path of antd by default, the matching\npath changes and externals cannot take effect. At this time, you can disable\ntransformImport to avoid this problem.\n\n\nConfiguration#\n\nlibraryName#\n\n * Type: string\n\nThe original import path that needs to be transformed.\n\nlibraryDirectory#\n\n * Type: string\n * Default: 'lib'\n\nUsed to splice the transformed path, the splicing rule is\n${libraryName}/${libraryDirectory}/${member}, where member is the imported\nmember.\n\nExample:\n\n\n\n\nOut:\n\n\n\n\nstyle#\n\n * Type: boolean\n * Default: undefined\n\nDetermines whether to import related styles. If it is true, the path\n${libraryName}/${libraryDirectory}/${member}/style will be imported. If it is\nfalse or undefined, the style will not be imported.\n\nWhen it is set to true:\n\n\n\n\nOut:\n\n\nimport 'foo/lib/button/style';\n\n\nstyleLibraryDirectory#\n\n * Type: string\n * Default: undefined\n\nThis configuration is used to splice the import path when importing styles. If\nthis configuration is specified, the style configuration item will be ignored.\nThe spliced import path is ${libraryName}/${styleLibraryDirectory}/${member}.\n\nWhen it is set to styles:\n\n\n\n\nOut:\n\n\nimport 'foo/styles/button';\n\n\ncamelToDashComponentName#\n\n * Type: boolean\n * Default: true\n\nWhether to convert camelCase imports to kebab-case.\n\nExample:\n\n\n\n\nOut:\n\n// set to true:\n\n// set to false:\n\n\n\ntransformToDefaultImport#\n\n * Type: boolean\n * Default: true\n\nWhether to convert import statements to default imports.\n\nExample:\n\n\n\n\nOut:\n\n// set to true:\n\n// set to false:\n\n\n\ncustomName#\n\n * Type: ((member: string) => string | undefined) | string\n * Default: undefined\n\nNote\n * Function-type configurations can only be used in Webpack builds.\n * Template-type configurations can only be used in Rspack builds or Webpack\n   builds that use SWC.\n\nCustomize the imported path after conversion. The input is the imported member.\nFor example, configure it as (member) => `my-lib/${member}` , which will convert\nto .\n\nWhen using Rspack to build, function configurations cannot be used, but you can\nuse handlebars template strings. For the above function configuration, you can\nuse the following template instead of my-lib/{{ member }}, or use some built-in\nhelper methods, such as my-lib/{{ kebabCase member }} to convert it to\nkebab-case format. In addition to kebabCase, there are also camelCase,\nsnakeCase, upperCase, and lowerCase that can be used.\n\ncustomStyleName#\n\n * Type: ((member: string) => string | undefined) | string\n * Default: undefined\n\nNote\n * Function-type configurations can only be used in Webpack builds.\n * Template-type configurations can only be used in Rspack builds or Webpack\n   builds that use SWC.\n\nCustomize the imported style path after conversion. The input is the imported\nmember. For example, configure it as (member) => `my-lib/${member}` , which will\nconvert to .\n\nWhen using Rspack to build, function configurations cannot be used, but you can\nuse handlebars template strings. For the above function configuration, you can\nuse the following template instead of my-lib/{{ member }}, or use some built-in\nhelper methods, such as my-lib/{{ kebabCase member }} to convert it to\nkebab-case format. In addition to kebabCase, there are also camelCase,\nsnakeCase, upperCase, and lowerCase that can be used.","frontmatter":{"sidebar_label":"transformImport"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/source/transform-import.mdx","_relativePath":"en/configure/app/source/transform-import.mdx"},{"id":167,"title":"testing.transformer","routePath":"/en/configure/app/testing/transformer","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: 'babel-jest' | 'ts-jest'\n * Default: babel-jest\n\nCaution\n\nFirst you need to enable the \"Unit Test\" function using new command.\n\nConfigure the compiler for source code when executing tests: babel-jest or\nts-jest. babel-jest is used by default.\n\nAdditional information\n\nBabel-jest can also compile TS files, but there is no type error. If you need to\ncheck the TS type when running tests, then use ts-jest.","frontmatter":{"title":"testing.transformer","sidebar_label":"transformer","sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/testing/transformer.mdx","_relativePath":"en/configure/app/testing/transformer.mdx"},{"id":168,"title":"tools.autoprefixer","routePath":"/en/configure/app/tools/autoprefixer","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":390},{"text":"Function Type","id":"function-type","depth":3,"charIndex":624}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.autoprefixer.\n\n * Type: Object | Function\n * Default:\n\n{\n  flexbox: 'no-2009',\n  // Depends on the browserslist config in the project\n  // and the `output.overrideBrowserslist` (higher priority) config\n  overrideBrowserslist: browserslist,\n}\n\n\nYou can modify the config of autoprefixer by tools.autoprefixer.\n\n\nObject Type#\n\nWhen tools.autoprefixer is configured as Object type, it is merged with the\ndefault config through Object.assign. For example:\n\nexport default {\n  tools: {\n    autoprefixer: {\n      flexbox: 'no-2009',\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.autoprefixer is a Function, the default config is passed as the first\nparameter and can be directly modified or returned as the final result. For\nexample:\n\nexport default {\n  tools: {\n    autoprefixer(config) {\n      // modify flexbox config\n      config.flexbox = 'no-2009';\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"autoprefixer"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/autoprefixer.mdx","_relativePath":"en/configure/app/tools/autoprefixer.mdx"},{"id":169,"title":"tools.babel","routePath":"/en/configure/app/tools/babel","lang":"en","toc":[{"text":"Usage Scenarios","id":"usage-scenarios","depth":3,"charIndex":200},{"text":"Function Type","id":"function-type","depth":3,"charIndex":787},{"text":"Object Type","id":"object-type","depth":3,"charIndex":1751},{"text":"Util Functions","id":"util-functions","depth":3,"charIndex":2290},{"text":"addPlugins","id":"addplugins","depth":4,"charIndex":2410},{"text":"addPresets","id":"addpresets","depth":4,"charIndex":2797},{"text":"removePlugins","id":"removeplugins","depth":4,"charIndex":3047},{"text":"removePresets","id":"removepresets","depth":4,"charIndex":3374},{"text":"addIncludes","id":"addincludes","depth":4,"charIndex":3708},{"text":"addExcludes","id":"addexcludes","depth":4,"charIndex":4329},{"text":"modifyPresetEnvOptions","id":"modifypresetenvoptions","depth":4,"charIndex":4934},{"text":"modifyPresetReactOptions","id":"modifypresetreactoptions","depth":4,"charIndex":5347},{"text":"Debugging Babel Configuration","id":"debugging-babel-configuration","depth":3,"charIndex":5739}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.babel.\n\n * Type: Object | Function\n * Default: undefined\n\nWith tools.babel you can modify the options of babel-loader.\n\n\nUsage Scenarios#\n\nPlease note the limitations of tools.babel in the following usage scenarios:\n\n * Rspack scenario: When using Rspack as the bundler, using the tools.babel\n   option will significantly slow down the Rspack's build speed. This is because\n   Rspack defaults to using SWC for compilation, and configuring Babel will\n   cause the code to be compiled twice, resulting in additional compilation\n   overhead.\n * webpack + SWC scenario: When using webpack as the bundler, if you use\n   Builder's SWC plugin for code compilation, the tools.babel option will not\n   take effect.\n\n\nFunction Type#\n\nWhen tools.babel is of type Function, the default Babel configuration will be\npassed as the first parameter. You can directly modify the configuration object\nor return an object as the final babel-loader configuration.\n\nexport default {\n  tools: {\n    babel(config) {\n      // Add a Babel plugin\n      // note: the plugin have been added to the default config to support antd load on demand\n      config.plugins.push([\n        'babel-plugin-import',\n        {\n          libraryName: 'xxx-components',\n          libraryDirectory: 'es',\n          style: true,\n        },\n      ]);\n    },\n  },\n};\n\n\nThe second parameter of the tools.babel function provides some more convenient\nutility functions. Please continue reading the documentation below.\n\nTIP\n\nThe above example is just for reference, usually you don't need to manually\nconfigure babel-plugin-import, because the Builder already provides a more\ngeneral source.transformImport configuration.\n\n\nObject Type#\n\nWhen tools.babel's type is Object, the config will be shallow merged with\ndefault config by Object.assign.\n\nCAUTION\n\nNote that Object.assign is a shallow copy and will completely overwrite the\nbuilt-in presets or plugins array, please use it with caution.\n\nexport default {\n  tools: {\n    babel: {\n      plugins: [\n        [\n          'babel-plugin-import',\n          {\n            libraryName: 'xxx-components',\n            libraryDirectory: 'es',\n            style: true,\n          },\n        ],\n      ],\n    },\n  },\n};\n\n\n\nUtil Functions#\n\nWhen tools.babel is a Function, the tool functions available for the second\nparameter are as follows:\n\naddPlugins#\n\n * Type: (plugins: BabelPlugin[]) => void\n\nAdd some Babel plugins. For example:\n\nexport default {\n  tools: {\n    babel(config, { addPlugins }) {\n      addPlugins([\n        [\n          'babel-plugin-import',\n          {\n            libraryName: 'xxx-components',\n            libraryDirectory: 'es',\n            style: true,\n          },\n        ],\n      ]);\n    },\n  },\n};\n\n\naddPresets#\n\n * Type: (presets: BabelPlugin[]) => void\n\nAdd Babel preset configuration. (No need to add presets in most cases)\n\nexport default {\n  tools: {\n    babel(config, { addPresets }) {\n      addPresets(['@babel/preset-env']);\n    },\n  },\n};\n\n\nremovePlugins#\n\n * Type: (plugins: string | string[]) => void\n\nTo remove the Babel plugin, just pass in the name of the plugin to be removed,\nyou can pass in a single string or an array of strings.\n\nexport default {\n  tools: {\n    babel(config, { removePlugins }) {\n      removePlugins('babel-plugin-import');\n    },\n  },\n};\n\n\nremovePresets#\n\n * Type: (presets: string | string[]) => void\n\nTo remove the Babel preset configuration, pass in the name of the preset to be\nremoved, you can pass in a single string or an array of strings.\n\nexport default {\n  tools: {\n    babel(config, { removePresets }) {\n      removePresets('@babel/preset-env');\n    },\n  },\n};\n\n\naddIncludes#\n\n * Type: (includes: string | RegExp | (string | RegExp)[]) => void\n\nBy default, Babel will only compile the application code in the src directory.\nWith addIncludes you can specify that Babel compile some files in node_modules.\nFor example:\n\nexport default {\n  tools: {\n    babel(config, { addIncludes }) {\n      addIncludes(/\\/query-string\\//);\n    },\n  },\n};\n\n\nTIP\n\nThe usage of the addIncludes function is basically the same as the\nsource.include config, please see the source.include documentation for a more\ndetailed usage. You can also use source.include directly instead of the\naddIncludes function.\n\naddExcludes#\n\n * Type: (excludes: string | RegExp | (string | RegExp)[]) => void\n\nContrary to addIncludes, specifies that certain files are excluded from Babel's\ncompilation.\n\nFor example, without compiling files in the src/example directory:\n\nexport default {\n  tools: {\n    babel(config, { addExcludes }) {\n      addExcludes('src/example');\n    },\n  },\n};\n\n\nTIP\n\nThe usage of the addExcludes function is basically the same as the\nsource.exclude config, please see the source.exclude documentation for a more\ndetailed usage. You can also use source.exclude directly instead of the\naddExcludes function.\n\nmodifyPresetEnvOptions#\n\n * Type: (options: PresetEnvOptions) => void\n\nModify the configuration of @babel/preset-env, the configuration you pass in\nwill be shallowly merged with default config. For example:\n\nexport default {\n  tools: {\n    babel(config, { modifyPresetEnvOptions }) {\n      modifyPresetEnvOptions({\n        targets: {\n          browsers: ['last 2 versions'],\n        },\n      });\n    },\n  },\n};\n\n\nmodifyPresetReactOptions#\n\n * Type: (options: PresetReactOptions) => void\n\nModify the configuration of @babel/preset-react, the configuration you pass in\nwill be shallowly merged with default config. For example:\n\nexport default {\n  tools: {\n    babel(config, { modifyPresetReactOptions }) {\n      modifyPresetReactOptions({\n        pragma: 'React.createElement',\n      });\n    },\n  },\n};\n\n\n\nDebugging Babel Configuration#\n\nAfter modifying the babel-loader configuration through tools.babel, you can view\nthe final generated configuration in Builder debug mode.\n\nFirst, enable debug mode by using the DEBUG=builder parameter:\n\n# Debug development mode\nDEBUG=builder pnpm dev\n\n# Debug production mode\nDEBUG=builder pnpm build\n\n\nThen open the generated (webpack|rspack).config.web.js file and search for the\nbabel-loader keyword to see the complete babel-loader configuration.","frontmatter":{"sidebar_label":"babel"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/babel.mdx","_relativePath":"en/configure/app/tools/babel.mdx"},{"id":170,"title":"tools.bundlerChain","routePath":"/en/configure/app/tools/bundler-chain","lang":"en","toc":[{"text":"Utils","id":"utils","depth":3,"charIndex":1104},{"text":"env","id":"env","depth":4,"charIndex":1112},{"text":"isProd","id":"isprod","depth":4,"charIndex":1474},{"text":"target","id":"target","depth":4,"charIndex":1761},{"text":"isServer","id":"isserver","depth":4,"charIndex":2052},{"text":"isWebWorker","id":"iswebworker","depth":4,"charIndex":2301},{"text":"HtmlPlugin","id":"htmlplugin","depth":3,"charIndex":2572},{"text":"CHAIN_ID","id":"chain_id","depth":4,"charIndex":2834},{"text":"CHAIN_ID.ONE_OF","id":"chain_idone_of","depth":3,"charIndex":3160},{"text":"CHAIN_ID.USE","id":"chain_iduse","depth":3,"charIndex":3620},{"text":"CHAIN_ID.PLUGIN","id":"chain_idplugin","depth":3,"charIndex":3945},{"text":"Examples","id":"examples","depth":3,"charIndex":4577}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.bundlerChain.\n\n * Type: Function | undefined\n * Default: undefined\n\nYou can modify the webpack and Rspack configuration by configuring\ntools.bundlerChain which is type of Function. The function receives two\nparameters, the first is the original bundler chain object, and the second is an\nobject containing some utils.\n\nWhat is BundlerChain\n\nBundler chain is a subset of webpack chain, which contains part of the webpack\nchain API that you can use to modify both webpack and Rspack configuration.\n\nConfigurations modified via bundler chain will work on both webpack and Rspack\nbuilds. Note that the bundler chain only supports modifying the configuration of\nthe non-differentiated parts of webpack and Rspack. For example, modifying the\ndevtool configuration item (webpack and Rspack have the same devtool property\nvalue type), or adding an Rspack-compatible webpack plugin.\n\n> tools.bundlerChain is executed earlier than tools.webpackChain / tools.webpack\n> / tools.rspack and thus will be overridden by changes in others.\n\n\nUtils#\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\nexport default {\n  tools: {\n    bundlerChain: (chain, { env }) => {\n      if (env === 'development') {\n        chain.devtool('cheap-module-eval-source-map');\n      }\n    },\n  },\n};\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\nexport default {\n  tools: {\n    bundlerChain: (chain, { isProd }) => {\n      if (isProd) {\n        chain.devtool('source-map');\n      }\n    },\n  },\n};\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current environment. For\nexample:\n\nexport default {\n  tools: {\n    bundlerChain: (chain, { target }) => {\n      if (target === 'node') {\n        // ...\n      }\n    },\n  },\n};\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\nexport default {\n  tools: {\n    bundlerChain: (chain, { isServer }) => {\n      if (isServer) {\n        // ...\n      }\n    },\n  },\n};\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\nexport default {\n  tools: {\n    bundlerChain: (chain, { isWebWorker }) => {\n      if (isWebWorker) {\n        // ...\n      }\n    },\n  },\n};\n\n\n\nHtmlPlugin#\n\n * Type: typeof import('html-webpack-plugin') | import('@rspack/plugin-html')\n\nThe HtmlPlugin instance in webpack or Rspack:\n\nexport default {\n  tools: {\n    bundlerChain: (chain, { HtmlPlugin }) => {\n      console.log(HtmlPlugin);\n    },\n  },\n};\n\n\nCHAIN_ID#\n\nSome common Chain IDs are predefined in the Builder, and you can use these IDs\nto locate the built-in Rule or Plugin.\n\nCHAIN_ID.RULE#\n\nID          DESCRIPTION\nRULE.MJS    Rule for mjs\nRULE.CSS    Rule for css\nRULE.LESS   Rule for less\nRULE.SASS   Rule for sass\nRULE.TOML   Rule for toml\nRULE.YAML   Rule for yaml\n\n\nCHAIN_ID.ONE_OF#\n\nONE_OF.XXX can match a certain type of rule in the rule array.\n\nID                  DESCRIPTION\nONE_OF.SVG          Rules for SVG, automatic choice between data URI and\n                    separate file\nONE_OF.SVG_URL      Rules for SVG, output as a separate file\nONE_OF.SVG_INLINE   Rules for SVG, inlined into bundles as data URIs\nONE_OF.SVG_ASSETS   Rules for SVG, automatic choice between data URI and\n                    separate file\n\n\nCHAIN_ID.USE#\n\nUSE.XXX can match a certain loader.\n\nID            DESCRIPTION\nUSE.LESS      correspond to less-loader\nUSE.SASS      correspond to sass-loader\nUSE.TOML      correspond to toml-loader\nUSE.YAML      correspond to yaml-loader\nUSE.SVGR      correspond to @svgr/webpack\nUSE.POSTCSS   correspond to postcss-loader\n\n\nCHAIN_ID.PLUGIN#\n\nPLUGIN.XXX can match a certain webpack plugin.\n\nID                          DESCRIPTION\nPLUGIN.HTML                 correspond to HtmlPlugin, you need to splice the entry name\n                            when using: ${PLUGIN.HTML}-${entryName}\nPLUGIN.APP_ICON             correspond to AppIconPlugin\nPLUGIN.INLINE_HTML          correspond to InlineChunkHtmlPlugin\nPLUGIN.BUNDLE_ANALYZER      correspond to WebpackBundleAnalyzer\nPLUGIN.BOTTOM_TEMPLATE      correspond to BottomTemplatePlugin\nPLUGIN.AUTO_SET_ROOT_SIZE   correspond to automatically set root font size plugin in\n                            Builder\n\n\nExamples#\n\nThe usage of BundlerChain can reference: WebpackChain Examples.","frontmatter":{"sidebar_label":"bundlerChain"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/bundler-chain.mdx","_relativePath":"en/configure/app/tools/bundler-chain.mdx"},{"id":171,"title":"tools.cssExtract","routePath":"/en/configure/app/tools/css-extract","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":621},{"text":"Function Type","id":"function-type","depth":3,"charIndex":890}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.cssExtract.\n\n * Type: Object | Function\n * Default:\n\nconst defaultOptions = {\n  // The loader options\n  loaderOptions: {},\n  // The plugin options\n  pluginOptions: {\n    // The default value of cssPath is `static/css`\n    // while the default value of cssFilename is `[name].[contenthash:8].css`\n    filename: `${cssPath}/${cssFilename}`,\n    chunkFilename: `${cssPath}/async/${cssFilename}`,\n    ignoreOrder: true,\n  },\n};\n\n\n * Bundler: only support webpack\n\nThe config of mini-css-extract-plugin can be modified through tools.cssExtract.\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via\nObject.assign. For example:\n\nexport default {\n  tools: {\n    cssExtract: {\n      pluginOptions: {\n        filename: 'static/css/[name].[contenthash:8].css',\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen the value a Function, the default config is passed in as the first\nparameter. You can modify the config object directly, or return an object as the\nfinal config. For example:\n\nexport default {\n  tools: {\n    cssExtract: config => {\n      config.pluginOptions.filename = 'static/css/[name].[contenthash:8].css';\n      return config;\n    },\n  },\n};\n\n\nFor more config details, please refer to mini-css-extract-plugin.","frontmatter":{"sidebar_label":"cssExtract"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/css-extract.mdx","_relativePath":"en/configure/app/tools/css-extract.mdx"},{"id":172,"title":"tools.cssLoader","routePath":"/en/configure/app/tools/css-loader","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":757},{"text":"Function Type","id":"function-type","depth":3,"charIndex":989}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.cssLoader.\n\n * Type: Object | Function\n * Default: undefined\n * Bundler: only support webpack\n\nThe config of css-loader can be modified through tools.cssLoader. The default\nconfig is as follows:\n\n{\n  modules: {\n    auto: true,\n    exportLocalsConvention: 'camelCase',\n    localIdentName: config.output.cssModuleLocalIdentName,\n    // isServer indicates node (SSR) build\n    // isWebWorker indicates web worker build\n    exportOnlyLocals: isServer || isWebWorker,\n  },\n  // CSS Source Map enabled by default in development environment\n  sourceMap: isDev,\n  // importLoaders is `1` when compiling css files, and is `2` when compiling sass/less files\n  importLoaders: 1 || 2,\n}\n\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via deep\nmerge. For example:\n\nexport default {\n  tools: {\n    cssLoader: {\n      modules: {\n        exportOnlyLocals: true,\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen the value is a Function, the default config is passed in as the first\nparameter. You can modify the config object directly, or return an object as the\nfinal config. For example:\n\nexport default {\n  tools: {\n    cssLoader: config => {\n      config.modules.exportOnlyLocals = true;\n      return config;\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"cssLoader"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/css-loader.mdx","_relativePath":"en/configure/app/tools/css-loader.mdx"},{"id":173,"title":"tools.devServer","routePath":"/en/configure/app/tools/dev-server","lang":"en","toc":[{"text":"Options","id":"options","depth":3,"charIndex":190},{"text":"after","id":"after","depth":4,"charIndex":200},{"text":"before","id":"before","depth":4,"charIndex":1125},{"text":"client","id":"client","depth":4,"charIndex":1476},{"text":"compress","id":"compress","depth":4,"charIndex":2161},{"text":"devMiddleware","id":"devmiddleware","depth":4,"charIndex":2434},{"text":"headers","id":"headers","depth":4,"charIndex":2695},{"text":"historyApiFallback","id":"historyapifallback","depth":4,"charIndex":2895},{"text":"hot","id":"hot","depth":4,"charIndex":3309},{"text":"https","id":"https","depth":4,"charIndex":3390},{"text":"liveReload","id":"livereload","depth":4,"charIndex":3933},{"text":"setupMiddlewares","id":"setupmiddlewares","depth":4,"charIndex":4201},{"text":"proxy","id":"proxy","depth":4,"charIndex":5668},{"text":"watch","id":"watch","depth":4,"charIndex":7859}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.devServer.\n\n * Type: Object\n * Default: {}\n\nThe config of DevServer can be modified through tools.devServer.\n\n\nOptions#\n\nafter#\n\n * Type: Array\n * Default: []\n\nProvides the ability to execute custom middleware after all other middleware\ninternally within the server.\n\nexport default {\n  tools: {\n    devServer: {\n      after: [\n        async (req, res, next) => {\n          console.log('after dev middleware');\n          next();\n        },\n      ],\n    },\n  },\n};\n\n\nwebpack-dev-server uses Express as the server-side framework. Modern.js does not\nuse any framework, and the req and res in the above middleware are all native\nNode objects. Therefore, the Express middleware used in webpack-dev-server may\nnot be directly usable in Modern.js.\n\nIf you want to migrate the Express middleware used in webpack-dev-server, you\ncan use the following method to pass the Express app as middleware:\n\n\n\n\n// init Express app\nconst app = express();\napp.use(expressMiddleware);\n\nexport default {\n  tools: {\n    devServer: {\n      after: [app],\n    },\n  },\n};\n\n\nbefore#\n\n * Type: Array\n * Default: []\n\nProvides the ability to execute custom middleware prior to all other middleware\ninternally within the server.\n\nexport default {\n  tools: {\n    devServer: {\n      before: [\n        async (req, res, next) => {\n          console.log('before dev middleware');\n          next();\n        },\n      ],\n    },\n  },\n};\n\n\nclient#\n\n * Type:\n\n{\n    /** Specify a protocol to use */\n    protocol?: string;\n    /** The path which the middleware is serving the event stream on */\n    path?: string;\n    /** Specify a port number to listen for requests on */\n    port?: string;\n    /** Specify a host to use */\n    host?: string;\n}\n\n\n * Default:\n\nconst defaultConfig = {\n  path: '/webpack-hmr',\n  // By default it is set to the port number of the dev server\n  port: '',\n  // By default it is set to \"location.hostname\"\n  host: '',\n  // By default it is set to \"location.protocol === 'https:' ? 'wss' : 'ws'\"\"\n  protocol: '',\n};\n\n\nThe config of HMR client, which are usually used to set the WebSocket URL of\nHMR.\n\ncompress#\n\n * Type: boolean\n * Default: true\n\nWhether to enable gzip compression for served static resources.\n\nIf you want to disable the gzip compression, you can set compress to false:\n\nexport default {\n  tools: {\n    devServer: {\n      compress: false,\n    },\n  },\n};\n\n\ndevMiddleware#\n\n * Type:\n\n{\n  writeToDisk: boolean | ((filename: string) => boolean);\n}\n\n\n * Default:\n\n{\n  writeToDisk: (file: string) => !file.includes('.hot-update.'),\n}\n\n\nThe config of devMiddleware. Current options is the subset of\nwebpack-dev-middleware.\n\nheaders#\n\n * Type: Record\n * Default: undefined\n\nAdds headers to all responses.\n\nexport default {\n  tools: {\n    devServer: {\n      headers: {\n        'X-Custom-Foo': 'bar',\n      },\n    },\n  },\n};\n\n\nhistoryApiFallback#\n\n * Type: boolean | ConnectHistoryApiFallbackOptions\n * Default: false\n\nThe index.html page will likely have to be served in place of any 404 responses.\nEnable devServer.historyApiFallback by setting it to true:\n\nexport default {\n  tools: {\n    devServer: {\n      historyApiFallback: true,\n    },\n  },\n};\n\n\nFor more options and information, see the connect-history-api-fallback\ndocumentation.\n\nhot#\n\n * Type: boolean\n * Default: true\n\nEnable Hot Module Replacement feature.\n\nhttps#\n\n * Type: boolean | { key: string; cert: string }\n * Default: false\n\nBy default, DevServer will be served over HTTP. It can optionally be served over\nHTTPS by setting devServer.https to true, and will disable the HTTP server.\n\nYou can also manually pass in the certificate and corresponding private key\nrequired by the HTTPS server:\n\nexport default {\n  tools: {\n    devServer: {\n      https: {\n        key: fs.readFileSync('certificates/private.pem'),\n        cert: fs.readFileSync('certificates/public.pem'),\n      },\n    },\n  },\n};\n\n\nliveReload#\n\n * Type: boolean\n * Default: true\n\nBy default, the DevServer will reload/refresh the page when file changes are\ndetected (devServer.hot option must be disabled in order for liveReload to take\neffect). Disable devServer.liveReload by setting it to false.\n\nsetupMiddlewares#\n\n * Type:\n\nArray<\n  (\n    middlewares: {\n      unshift: (...handlers: RequestHandler[]) => void;\n      push: (...handlers: RequestHandler[]) => void;\n    },\n    server: {\n      sockWrite: (\n        type: string,\n        data?: string | boolean | Record,\n      ) => void;\n    },\n  ) => void\n>;\n\n\n * Default: undefined\n\nProvides the ability to execute a custom function and apply custom middlewares.\n\nThe order among several different types of middleware is: devServer.before =>\nunshift => internal middlewares => push => devServer.after.\n\nexport default {\n  tools: {\n    devServer: {\n      setupMiddlewares: [\n        (middlewares, server) => {\n          middlewares.unshift((req, res, next) => {\n            next();\n          });\n\n          middlewares.push((req, res, next) => {\n            next();\n          });\n        },\n      ],\n    },\n  },\n};\n\n\nIt is possible to use some server api to meet special scenario requirements:\n\n * sockWrite. Allow send some message to hmr client, and then the hmr client\n   will take different actions depending on the message type. If you send a\n   \"content changed\" message, the page will reload.\n\nexport default {\n  tools: {\n    devServer: {\n      setupMiddlewares: [\n        (middlewares, server) => {\n          // add custom watch & trigger page reload when change\n          watcher.on('change', changed => {\n            server.sockWrite('content-changed');\n          });\n        },\n      ],\n    },\n  },\n};\n\n\nproxy#\n\n * Type: Record | Record\n * Default: undefined\n\nProxying some URLs.\n\nexport default {\n  tools: {\n    devServer: {\n      proxy: {\n        '/api': 'http://localhost:3000',\n      },\n    },\n  },\n};\n\n\nA request to /api/users will now proxy the request to\nhttp://localhost:3000/api/users.\n\nIf you don't want /api to be passed along, we need to rewrite the path:\n\nexport default {\n  tools: {\n    devServer: {\n      proxy: {\n        '/api': {\n          target: 'http://localhost:3000',\n          pathRewrite: { '^/api': '' },\n        },\n      },\n    },\n  },\n};\n\n\nThe DevServer Proxy makes use of the http-proxy-middleware package. Check out\nits documentation for more advanced usages.\n\nThe full type definition of DevServer Proxy is:\n\n\n\ntype ProxyDetail = HttpProxyOptions & {\n  bypass?: (\n    req: IncomingMessage,\n    res: ServerResponse,\n    proxyOptions: ProxyOptions,\n  ) => string | undefined | null | false;\n  context?: string | string[];\n};\n\ntype ProxyOptions =\n  | Record\n  | Record\n  | ProxyDetail[]\n  | ProxyDetail;\n\n\nIn addition to the http-proxy-middleware option, we also support the bypass and\ncontext configuration:\n\n * bypass: bypass the proxy based on the return value of a function.\n   * Return null or undefined to continue processing the request with proxy.\n   * Return false to produce a 404 error for the request.\n   * Return a path to serve from, instead of continuing to proxy the request.\n * context: If you want to proxy multiple, specific paths to the same target,\n   you can use an array of one or more objects with a context property.\n\n// custom bypass\nexport default {\n  tools: {\n    devServer: {\n      proxy: {\n        '/api': {\n          target: 'http://localhost:3000',\n          bypass: function (req, res, proxyOptions) {\n            if (req.headers.accept.indexOf('html') !== -1) {\n              console.log('Skipping proxy for browser request.');\n              return '/index.html';\n            }\n          },\n        },\n      },\n    },\n  },\n};\n\n\n// proxy multiple\nexport default {\n  tools: {\n    devServer: {\n      proxy: [\n        {\n          context: ['/auth', '/api'],\n          target: 'http://localhost:3000',\n        },\n      ],\n    },\n  },\n};\n\n\nwatch#\n\n * Type: boolean\n * Default: true\n\nWhether to watch files change in directories such as mock/, server/, api/.","frontmatter":{"sidebar_label":"devServer"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/dev-server.mdx","_relativePath":"en/configure/app/tools/dev-server.mdx"},{"id":174,"title":"tools.esbuild","routePath":"/en/configure/app/tools/esbuild","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":42},{"text":"Configuration","id":"configuration","depth":2,"charIndex":1041}],"domain":"","content":"#\n\n * Type: Object\n * Default: undefined\n\n\nIntroduction#\n\nesbuild is a front-end build tool based on Golang. It has the functions of\nbundling, compiling and minimizing JavaScript code. Compared with traditional\ntools, the performance is significantly improved. When minimizing code, compared\nto webpack's built-in terser minimizer, esbuild has dozens of times better\nperformance.\n\nModern.js Builder provides esbuild plugin that allow you to use esbuild instead\nof babel-loader, ts-loader and terser for transformation and minification\nprocess. When you enable esbuild in a large project, it can greatly reduce the\ntime required for code compilation and compression, while effectively avoiding\nOOM (heap out of memory) problems.\n\nRecommend using SWC\n\nWe recommend using SWC to transform and minify code rather than esbuild, because\nSWC supports more syntaxes, provides better code compression, and the compiled\ncode has better compatibility.\n\nTherefore, we recommend that you use SWC instead of esbuild, please refer to\ntools.swc for usage.\n\n\nConfiguration#\n\nYou can set the esbuild compilation behavior through the tools.esbuild config.\n\n\n\nexport default defineConfig({\n  tools: {\n    esbuild: {\n      loader: {\n        target: 'chrome61',\n      },\n      minimize: {\n        target: 'chrome61',\n      },\n    },\n  },\n});\n\n\nFor config details, please refer to Modern.js Builder - Esbuild Plugin\nConfiguration.","frontmatter":{"sidebar_label":"esbuild"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/esbuild.mdx","_relativePath":"en/configure/app/tools/esbuild.mdx"},{"id":175,"title":"tools.htmlPlugin","routePath":"/en/configure/app/tools/html-plugin","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":854},{"text":"Function Type","id":"function-type","depth":3,"charIndex":1072},{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":1542}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.htmlPlugin.\n\n * Type: false | Object | Function\n * Default:\n\nconst defaultHtmlPluginOptions = {\n  inject, // corresponding to the html.inject config\n  favicon, // corresponding to html.favicon config\n  filename, // generated based on output.distPath and entryName\n  template, // defaults to the built-in HTML template path\n  templateParameters, // corresponding to the html.templateParameters config\n  chunks: [entryName],\n  minify: {\n    removeComments: false,\n    useShortDoctype: true,\n    keepClosingSlash: true,\n    collapseWhitespace: true,\n    removeRedundantAttributes: true,\n    removeScriptTypeAttributes: true,\n    removeStyleLinkTypeAttributes: true,\n  },\n};\n\n\nThe configs of html-webpack-plugin or @rspack/plugin-html can be modified\nthrough tools.htmlPlugin.\n\n\nObject Type#\n\nWhen tools.htmlPlugin is Object type, the value will be merged with the default\nconfig via Object.assign.\n\nexport default {\n  tools: {\n    htmlPlugin: {\n      scriptLoading: 'blocking',\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.htmlPlugin is a Function:\n\n * The first parameter is the default config, which can be modified directly.\n * The second parameter is also an object, containing the entry name and the\n   entry value.\n * The Function can return a new object as the final config.\n\nexport default {\n  tools: {\n    htmlPlugin(config, { entryName, entryValue }) {\n      if (entryName === 'main') {\n        config.scriptLoading = 'blocking';\n      }\n    },\n  },\n};\n\n\n\nBoolean Type#\n\nThe built-in html-webpack-plugin plugins can be disabled by set tools.htmlPlugin\nto false.\n\nexport default {\n  tools: {\n    htmlPlugin: false,\n  },\n};\n","frontmatter":{"sidebar_label":"htmlPlugin"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/html-plugin.mdx","_relativePath":"en/configure/app/tools/html-plugin.mdx"},{"id":176,"title":"tools.inspector","routePath":"/en/configure/app/tools/inspector","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":408},{"text":"Function Type","id":"function-type","depth":3,"charIndex":667}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.inspector.\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\nYou can enable or configure the webpack inspector through tools.inspector.\n\nWhen the configuration is not undefined, it means that webpack-inspector is\nenabled, and the type of tools.inspector can be Object or Function.\n\n\nObject Type#\n\nWhen tools.inspector is configured with type Object, it is merged with the\ndefault configuration via Object.assign. For example:\n\nexport default {\n  tools: {\n    inspector: {\n      // The default port is 3333\n      port: 3334,\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.inspector is a Function, the default configuration is passed as the\nfirst parameter and can be directly modified or returned as the final result.\nFor example:\n\nexport default {\n  tools: {\n    inspector(config) {\n      config.port = 3334;\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"inspector"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/inspector.mdx","_relativePath":"en/configure/app/tools/inspector.mdx"},{"id":177,"title":"tools.jest","routePath":"/en/configure/app/tools/jest","lang":"en","toc":[],"domain":"","content":"#\n\n * Type: Object | Function\n * Default: {}\n\nCaution\n\nFirst you need to enable the \"Unit Test\" function using new command.\n\nCorresponding to the configuration of Jest, when of type Object, all underlying\nconfigurations supported by Jest can be configured.\n\nexport default defineConfig({\n  tools: {\n    jest: {\n      testTimeout: 10000,\n    },\n  },\n});\n\n\nWhen the value is of type Function, the default configuration is passed in as\nthe first parameter and a new Jest configuration object needs to be returned.\n\nexport default defineConfig({\n  tools: {\n    jest: options => {\n      return {\n        ...options,\n        testTimeout: 10000,\n      };\n    },\n  },\n});\n","frontmatter":{"sidebar_label":"jest"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/jest.mdx","_relativePath":"en/configure/app/tools/jest.mdx"},{"id":178,"title":"tools.less","routePath":"/en/configure/app/tools/less","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":352},{"text":"Function Type","id":"function-type","depth":3,"charIndex":704},{"text":"Util Function","id":"util-function","depth":3,"charIndex":1143},{"text":"addExcludes","id":"addexcludes","depth":4,"charIndex":1159}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.less.\n\n * Type: Object | Function\n * Default:\n\nconst defaultOptions = {\n  lessOptions: {\n    javascriptEnabled: true,\n  },\n  // CSS Source Map enabled by default in development environment\n  sourceMap: isDev,\n};\n\n\nYou can modify the config of less-loader via tools.less.\n\n\nObject Type#\n\nWhen tools.less is configured as Object type, it is merged with the default\nconfig through Object.assign in a shallow way. It should be noted that\nlessOptions is merged through deepMerge in a deep way. For example:\n\nexport default {\n  tools: {\n    less: {\n      lessOptions: {\n        javascriptEnabled: false,\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.less is a Function, the default config is passed as the first\nparameter, which can be directly modified or returned as the final result. The\nsecond parameter provides some utility functions that can be called directly.\nFor example:\n\nexport default {\n  tools: {\n    less(config) {\n      // Modify the config of lessOptions\n      config.lessOptions = {\n        javascriptEnabled: false,\n      };\n    },\n  },\n};\n\n\n\nUtil Function#\n\naddExcludes#\n\n * Type: (excludes: RegExp | RegExp[]) => void\n\nUsed to specify which files less-loader does not compile, You can pass in one or\nmore regular expressions to match the path of less files, for example:\n\nexport default {\n  tools: {\n    less(config, { addExcludes }) {\n      addExcludes(/node_modules/);\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"less"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/less.mdx","_relativePath":"en/configure/app/tools/less.mdx"},{"id":179,"title":"tools.minifyCss","routePath":"/en/configure/app/tools/minify-css","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":504},{"text":"Function Type","id":"function-type","depth":3,"charIndex":824}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.minifyCss.\n\n * Type: Object | Function | undefined\n * Default:\n\nconst defaultOptions = {\n  minimizerOptions: {\n    preset: [\n      'default',\n      {\n        mergeLonghand: false,\n      },\n    ],\n  },\n};\n\n\n * Bundler: only support webpack\n\nWhen building for production, Builder will minimize the CSS code through\ncss-minimizer-webpack-plugin. The config of css-minimizer-webpack-plugin can be\nmodified via tools.minifyCss.\n\n\nObject Type#\n\nWhen tools.minifyCss is Object type, it will be merged with the default config\nvia Object.assign.\n\nFor example, modify the preset config of cssnano:\n\nexport default {\n  tools: {\n    minifyCss: {\n      minimizerOptions: {\n        preset: require.resolve('cssnano-preset-simple'),\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.minifyCss is Function type, the default config is passed in as the\nfirst parameter, the config object can be modified directly, or a value can be\nreturned as the final result.\n\nexport default {\n   tools: {\n    minifyCss: options => {\n      options.minimizerOptions = {\n        preset: require.resolve('cssnano-preset-simple'),\n      },\n    }\n  }\n};\n","frontmatter":{"sidebar_label":"minifyCss"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/minify-css.mdx","_relativePath":"en/configure/app/tools/minify-css.mdx"},{"id":180,"title":"tools.postcss","routePath":"/en/configure/app/tools/postcss","lang":"en","toc":[{"text":"Function Type","id":"function-type","depth":3,"charIndex":731},{"text":"Object Type","id":"object-type","depth":3,"charIndex":1929},{"text":"Util Functions","id":"util-functions","depth":3,"charIndex":2407},{"text":"addPlugins","id":"addplugins","depth":4,"charIndex":2424}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.postcss.\n\n * Type: Object | Function\n * Default:\n\nconst defaultOptions = {\n  postcssOptions: {\n    plugins: [\n      require('postcss-flexbugs-fixes'),\n      require('postcss-custom-properties'),\n      require('postcss-initial'),\n      require('postcss-page-break'),\n      require('postcss-font-variant'),\n      require('postcss-media-minmax'),\n      require('postcss-nesting'),\n      require('autoprefixer')({\n        flexbox: 'no-2009',\n      }),\n    ],\n    // CSS Source Map enabled by default in development environment\n    sourceMap: isDev,\n  },\n};\n\n\nBuilder integrates PostCSS by default, you can configure postcss-loader through\ntools.postcss.\n\n\nFunction Type#\n\nWhen the value is a Function, the internal default config is passed as the first\nparameter, and the config object can be modified directly without returning, or\nan object can be returned as the final result; the second parameter is a set of\ntool functions for modifying the postcss-loader config.\n\nFor example, you need to add a PostCSS plugin on the basis of the original\nplugin, and push a new plugin to the postcssOptions.plugins array:\n\nexport default {\n  tools: {\n    postcss: opts => {\n      opts.postcssOptions.plugins.push(require('postcss-px-to-viewport'));\n    },\n  },\n};\n\n\nWhen you need to pass parameters to the PostCSS plugin, you can pass them in by\nfunction parameters:\n\nexport default {\n  tools: {\n    postcss: opts => {\n      const viewportPlugin = require('postcss-px-to-viewport')({\n        viewportWidth: 375,\n      });\n      opts.postcssOptions.plugins.push(viewportPlugin);\n    },\n  },\n};\n\n\ntools.postcss can return a config object and completely replace the default\nconfig:\n\nexport default {\n  tools: {\n    postcss: () => {\n      return {\n        postcssOptions: {\n          plugins: [require('postcss-px-to-viewport')],\n        },\n      };\n    },\n  },\n};\n\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via\nObject.assign. Note that Object.assign is a shallow copy and will completely\noverwrite the built-in presets or plugins array, please use it with caution.\n\nexport default {\n  tools: {\n    postcss: {\n      // Because `Object.assign` is used, the default postcssOptions will be overwritten.\n      postcssOptions: {\n        plugins: [require('postcss-px-to-viewport')],\n      },\n    },\n  },\n};\n\n\n\nUtil Functions#\n\naddPlugins#\n\n * Type: (plugins: PostCSSPlugin | PostCSSPlugin[]) => void\n\nFor adding additional PostCSS plugins, You can pass in a single PostCSS plugin,\nor an array of PostCSS plugins.\n\nexport default {\n  tools: {\n    postcss: (config, { addPlugins }) => {\n      // Add a PostCSS Plugin\n      addPlugins(require('postcss-preset-env'));\n      // Add multiple PostCSS Plugins\n      addPlugins([require('postcss-preset-env'), require('postcss-import')]);\n    },\n  },\n};\n\n\nTIP\n\nBuilder uses the PostCSS v8 version. When you use third-party PostCSS plugins,\nplease pay attention to whether the PostCSS version is compatible. Some legacy\nplugins may not work in PostCSS v8.","frontmatter":{"sidebar_label":"postcss"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/postcss.mdx","_relativePath":"en/configure/app/tools/postcss.mdx"},{"id":181,"title":"tools.pug","routePath":"/en/configure/app/tools/pug","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":187},{"text":"Object Type","id":"object-type","depth":3,"charIndex":435},{"text":"Function Type","id":"function-type","depth":3,"charIndex":654}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.pug.\n\n * Type: true | Object | Function | undefined\n * Default: false\n\nConfigure the Pug template engine.\n\n\nBoolean Type#\n\nPug template engine is not enabled by default, you can enable it by setting\ntools.pug to true.\n\nexport default {\n  tools: {\n    pug: true,\n  },\n};\n\n\nWhen enabled, you can use index.pug as the template file in html.template\nconfig.\n\n\nObject Type#\n\nWhen tools.terser is Object type, you can passing the Pug options:\n\nexport default {\n  tools: {\n    pug: {\n      doctype: 'xml',\n    },\n  },\n};\n\n\nFor detailed options, please refer to Pug API Reference.\n\n\nFunction Type#\n\nWhen tools.pug is Function type, the default configuration is passed in as the\nfirst parameter, the configuration object can be modified directly, or a value\ncan be returned as the final result.\n\nexport default {\n  tools: {\n    pug(config) {\n      config.doctype = 'xml';\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"pug"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/pug.mdx","_relativePath":"en/configure/app/tools/pug.mdx"},{"id":182,"title":"tools.rspack","routePath":"/en/configure/app/tools/rspack","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":226},{"text":"Function Type","id":"function-type","depth":3,"charIndex":557},{"text":"Utils","id":"utils","depth":3,"charIndex":1187},{"text":"env","id":"env","depth":4,"charIndex":1195},{"text":"isProd","id":"isprod","depth":4,"charIndex":1575},{"text":"target","id":"target","depth":4,"charIndex":1880},{"text":"isServer","id":"isserver","depth":4,"charIndex":2182},{"text":"isWebWorker","id":"iswebworker","depth":4,"charIndex":2447},{"text":"addRules","id":"addrules","depth":4,"charIndex":2733},{"text":"prependPlugins","id":"prependplugins","depth":4,"charIndex":3310},{"text":"appendPlugins","id":"appendplugins","depth":4,"charIndex":3757},{"text":"removePlugin","id":"removeplugin","depth":4,"charIndex":4196},{"text":"mergeConfig","id":"mergeconfig","depth":4,"charIndex":4525},{"text":"getCompiledPath","id":"getcompiledpath","depth":4,"charIndex":4815}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.rspack.\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support Rspack\n\ntools.rspack is used to configure Rspack.\n\n\nObject Type#\n\ntools.rspack can be configured as an object to be deep merged with the built-in\nRspack configuration through webpack-merge.\n\nFor example, add resolve.alias configuration:\n\nexport default {\n  tools: {\n    rspack: {\n      resolve: {\n        alias: {\n          '@util': 'src/util',\n        },\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\ntools.rspack can be configured as a function. The first parameter of this\nfunction is the built-in Rspack configuration object, you can modify this\nobject, and then return it. For example:\n\nexport default {\n  tools: {\n    rspack: config => {\n      config.resolve.alias['@util'] = 'src/util';\n      return config;\n    },\n  },\n};\n\n\nTIP\n\nThe object returned by the tools.rspack function is used directly as the final\nRspack configuration and is not merged with the built-in Rspack configuration.\n\nThe second parameter of this function is an object, which contains some utility\nfunctions and properties, as follows:\n\n\nUtils#\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\nexport default {\n  tools: {\n    rspack: (config, { env }) => {\n      if (env === 'development') {\n        config.devtool = 'cheap-module-eval-source-map';\n      }\n      return config;\n    },\n  },\n};\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\nexport default {\n  tools: {\n    rspack: (config, { isProd }) => {\n      if (isProd) {\n        config.devtool = 'source-map';\n      }\n      return config;\n    },\n  },\n};\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current target. For example:\n\nexport default {\n  tools: {\n    rspack: (config, { target }) => {\n      if (target === 'node') {\n        // ...\n      }\n      return config;\n    },\n  },\n};\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\nexport default {\n  tools: {\n    rspack: (config, { isServer }) => {\n      if (isServer) {\n        // ...\n      }\n      return config;\n    },\n  },\n};\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\nexport default {\n  tools: {\n    rspack: (config, { isWebWorker }) => {\n      if (isWebWorker) {\n        // ...\n      }\n      return config;\n    },\n  },\n};\n\n\naddRules#\n\n * Type: (rules: RuleSetRule | RuleSetRule[]) => void\n\nAdd additional Rspack rules.\n\nFor example:\n\nexport default {\n  tools: {\n    rspack: (config, { addRules }) => {\n      // add a single rule\n      addRules({\n        test: /\\.foo/,\n        loader: require.resolve('foo-loader'),\n      });\n\n      // Add multiple rules as an array\n      addRules([\n        {\n          test: /\\.foo/,\n          loader: require.resolve('foo-loader'),\n        },\n        {\n          test: /\\.bar/,\n          loader: require.resolve('bar-loader'),\n        },\n      ]);\n    },\n  },\n};\n\n\nprependPlugins#\n\n * Type: (plugins: RspackPluginInstance | RspackPluginInstance[]) => void\n\nAdd additional plugins to the head of the internal Rspack plugins array, and the\nplugin will be executed first.\n\nexport default {\n  tools: {\n    rspack: (config, { prependPlugins }) => {\n      // add a single plugin\n      prependPlugins(new PluginA());\n\n      // Add multiple plugins\n      prependPlugins([new PluginA(), new PluginB()]);\n    },\n  },\n};\n\n\nappendPlugins#\n\n * Type: (plugins: RspackPluginInstance | RspackPluginInstance[]) => void\n\nAdd additional plugins at the end of the internal Rspack plugins array, the\nplugin will be executed last.\n\nexport default {\n  tools: {\n    rspack: (config, { appendPlugins }) => {\n      // add a single plugin\n      appendPlugins([new PluginA()]);\n\n      // Add multiple plugins\n      appendPlugins([new PluginA(), new PluginB()]);\n    },\n  },\n};\n\n\nremovePlugin#\n\n * Type: (name: string) => void\n\nRemove the internal Rspack plugin, the parameter is the constructor.name of the\nplugin.\n\nFor example, remove the internal webpack-bundle-analyzer:\n\nexport default {\n  tools: {\n    rspack: (config, { removePlugin }) => {\n      removePlugin('BundleAnalyzerPlugin');\n    },\n  },\n};\n\n\nmergeConfig#\n\n * Type: (...configs: RspackConfig[]) => RspackConfig\n\nUsed to merge multiple Rspack configs, same as webpack-merge.\n\nexport default {\n  tools: {\n    rspack: (config, { mergeConfig }) => {\n      return mergeConfig(config, {\n        devtool: 'eval',\n      });\n    },\n  },\n};\n\n\ngetCompiledPath#\n\n * Type: (name: string) => string\n\nGet the path to the builder built-in dependencies, such as:\n\n * sass\n * sass-loader\n * less\n * less-loader\n * babel-loader\n * url-loader\n * file-loader\n * ...\n\nThis method is usually used when you need to reuse the same dependency with the\nbuilder.\n\nTIP\n\nBuilder built-in dependencies are subject to change with version iterations,\ne.g. generate large version break changes. Please avoid using this API if it is\nnot necessary.\n\nexport default {\n  tools: {\n    rspack: (config, { getCompiledPath }) => {\n      const loaderPath = getCompiledPath('less-loader');\n      // ...\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"rspack"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/rspack.mdx","_relativePath":"en/configure/app/tools/rspack.mdx"},{"id":183,"title":"tools.sass","routePath":"/en/configure/app/tools/sass","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":301},{"text":"Function Type","id":"function-type","depth":3,"charIndex":582},{"text":"Utility Function","id":"utility-function","depth":3,"charIndex":1030},{"text":"addExcludes","id":"addexcludes","depth":4,"charIndex":1049}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.sass.\n\n * Type: Object | Function\n * Default:\n\nconst defaultOptions = {\n  // CSS Source Map enabled by default in development environment\n  sourceMap: isDev,\n};\n\n\nYou can modify the config of sass-loader via tools.sass.\n\n\nObject Type#\n\nWhen tools.sass is Object type, it is merged with the default config through\nObject.assign. It should be noted that sassOptions is merged through deepMerge\nin a deep way.\n\nFor example:\n\nexport default {\n  tools: {\n    sass: {\n      sourceMap: true,\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.sass is a Function, the default config is passed as the first\nparameter, which can be directly modified or returned as the final result. The\nsecond parameter provides some utility functions that can be called directly.\nFor Example:\n\nexport default {\n  tools: {\n    sass(config) {\n      // Modify sourceMap config\n      config.additionalData = async (content, loaderContext) => {\n        // ...\n      };\n    },\n  },\n};\n\n\n\nUtility Function#\n\naddExcludes#\n\n * Type: (excludes: RegExp | RegExp[]) => void\n\nUsed to specify which files sass-loader does not compile, You can pass in one or\nmore regular expressions to match the path of sass files, for example:\n\nexport default {\n  tools: {\n    sass(config, { addExcludes }) {\n      addExcludes(/node_modules/);\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"sass"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/sass.mdx","_relativePath":"en/configure/app/tools/sass.mdx"},{"id":184,"title":"tools.styleLoader","routePath":"/en/configure/app/tools/style-loader","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":368},{"text":"Function Type","id":"function-type","depth":3,"charIndex":603}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.styleLoader.\n\n * Type: Object | Function\n * Default: {}\n * Bundler: only support webpack\n\nThe config of style-loader can be set through tools.styleLoader.\n\nIt is worth noting that Builder does not enable style-loader by default. You can\nuse output.disableCssExtract config to enable it.\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via\nObject.assign. For example:\n\nexport default {\n  tools: {\n    styleLoader: {\n      loaderOptions: {\n        insert: 'head',\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen the value is a Function, the default config is passed in as the first\nparameter. You can modify the config object directly, or return an object as the\nfinal config. For example:\n\nexport default {\n  tools: {\n    styleLoader: config => {\n      config.loaderOptions.insert = 'head';\n      return config;\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"styleLoader"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/style-loader.mdx","_relativePath":"en/configure/app/tools/style-loader.mdx"},{"id":185,"title":"tools.styledComponents","routePath":"/en/configure/app/tools/styled-components","lang":"en","toc":[],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.styledComponents.\n\n * Type: Object | Function\n * Default:\n\n{\n  displayName: true,\n  // `isSSR` is true in SSR build\n  ssr: isSSR,\n  // `pure` is enabled in production to reduce bundle size\n  pure: isProd,\n  transpileTemplateLiterals: true,\n}\n\n\n * Bundler: only support webpack\n\ntools.styledComponents config is corresponding to\nbabel-plugin-styled-components.\n\nWhen the value is an Object, use the Object.assign function to merge with the\ndefault config. For example:\n\nexport default {\n  tools: {\n    styledComponents: {\n      pure: false,\n    },\n  },\n};\n\n\nWhen the config is a Function, the first parameter is the default configuration,\nand the second parameter provides some utility functions that can be called\ndirectly:\n\nexport default {\n  tools: {\n    styledComponents(config) {\n      config.pure = false;\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"styledComponents"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/styled-components.mdx","_relativePath":"en/configure/app/tools/styled-components.mdx"},{"id":186,"title":"tools.swc","routePath":"/en/configure/app/tools/swc","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":42},{"text":"Install","id":"install","depth":2,"charIndex":572},{"text":"Config","id":"config","depth":2,"charIndex":983}],"domain":"","content":"#\n\n * Type: Object\n * Default: undefined\n\n\nIntroduction#\n\nSWC (Speedy Web Compiler) is a transformer and minimizer for JavaScript and\nTypeScript based on Rust. SWC can provide the same abilities with Babel, and\nit's more than 10x faster than Babel.\n\nModern.js Builder has a out-of-box plugin for SWC, power your Web application\nwith Polyfill and minification, we also port some common used Babel plugins to\nSWC.\n\nTIP\n\nWhen using Rspack as the bundler, SWC will be used for transpiling and\ncompression by default, so you don't need to install or configure the SWC\nplugin.\n\n\nInstall#\n\nFirst, you need to execute pnpm run new to enable the SWC compile:\n\n? Please select the operation you want: Enable features\n? Please select the feature name: Enable SWC Compile\n\n\nAfter the installation, please register the SWC plugin in the modern.config.ts\nfile, then the SWC compilation and compression will be enabled.\n\n\n\n\nexport default defineConfig({\n  plugins: [appTools(), swcPlugin()],\n});\n\n\n\nConfig#\n\nYou can set the SWC compilation behavior through the tools.swc config.\n\n\n\nexport default defineConfig({\n  tools: {\n    swc: {\n      jsMinify: {\n        compress: {},\n        mangle: true,\n      },\n    },\n  },\n});\n\n\nFor config details, please refer to Modern.js Builder - SWC Plugin\nConfiguration.","frontmatter":{"sidebar_label":"swc"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/swc.mdx","_relativePath":"en/configure/app/tools/swc.mdx"},{"id":187,"title":"tools.tailwindcss","routePath":"/en/configure/app/tools/tailwindcss","lang":"en","toc":[{"text":"Function Type","id":"function-type","depth":3,"charIndex":382},{"text":"Object Type","id":"object-type","depth":3,"charIndex":736},{"text":"Limitations","id":"limitations","depth":3,"charIndex":1084}],"domain":"","content":"#\n\n * Type: Object | Function\n * Default:\n\nconst tailwind = {\n  content: [\n    './config/html/**/*.html',\n    './config/html/**/*.ejs',\n    './config/html/**/*.hbs',\n    './src/**/*.js',\n    './src/**/*.jsx',\n    './src/**/*.ts',\n    './src/**/*.tsx',\n    './storybook/**/*',\n  ],\n  // Use source.design System config as Tailwind CSS theme config\n  theme: source.designSystem,\n};\n\n\n\nFunction Type#\n\nWhen tools.tailwindcss's type is Function, the default tailwindcss config will\nbe passed in as the first parameter, the config object can be modified directly,\nor a value can be returned as the final result.\n\nexport default {\n  tools: {\n    tailwindcss(config) {\n      config.content.push('./some-folder/**/*.{js,ts}');\n    },\n  },\n};\n\n\n\nObject Type#\n\nWhen tools.tailwindcss's type is Object, the config will be shallow merged with\ndefault config by Object.assign.\n\nexport default {\n  tools: {\n    tailwindcss: {\n      plugins: [\n        require('@tailwindcss/forms'),\n        require('@tailwindcss/aspect-ratio'),\n        require('@tailwindcss/typography'),\n      ],\n    },\n  },\n};\n\n\n\nLimitations#\n\nThe theme attribute is not allowed, otherwise the build will fail. Modern.js use\nsource.designSystem as the Tailwind CSS Theme configuration.\n\nOther uses are consistent with Tailwind CSS.","frontmatter":{"sidebar_label":"tailwindcss"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/tailwindcss.mdx","_relativePath":"en/configure/app/tools/tailwindcss.mdx"},{"id":188,"title":"tools.terser","routePath":"/en/configure/app/tools/terser","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":452},{"text":"Function Type","id":"function-type","depth":3,"charIndex":706}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.terser.\n\n * Type: Object | Function | undefined\n * Default:\n\nconst defaultTerserOptions = {\n  terserOptions: {\n    mangle: {\n      safari10: true,\n    },\n  },\n};\n\n\n * Bundler: only support webpack\n\nWhen building for production, Builder will minimize the JavaScript code through\nterser-webpack-plugin. The config of terser-webpack-plugin can be modified via\ntools.terser.\n\n\nObject Type#\n\nWhen tools.terser is Object type, it will be merged with the default config via\nObject.assign.\n\nFor example, to exclude some files from minification:\n\nexport default {\n  tools: {\n    terser: {\n      exclude: /\\/excludes/,\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen tools.terser is Function type, the default config is passed in as the first\nparameter, the config object can be modified directly, or a value can be\nreturned as the final result.\n\nexport default {\n  tools: {\n    terser: opts => {\n      opts.exclude = /\\/excludes/;\n    },\n  },\n};\n\n\nDisable code minification\n\nIf you need to disable code minification, you can use the output.disableMinimize\nconfiguration.","frontmatter":{"sidebar_label":"terser"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/terser.mdx","_relativePath":"en/configure/app/tools/terser.mdx"},{"id":189,"title":"tools.tsChecker","routePath":"/en/configure/app/tools/ts-checker","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":839},{"text":"Function Type","id":"function-type","depth":3,"charIndex":941}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.tsChecker.\n\n * Type: Object | Function\n * Default:\n\nconst defaultOptions = {\n  typescript: {\n    // avoid OOM issue\n    memoryLimit: 8192,\n    // use tsconfig of user project\n    configFile: tsconfigPath,\n    // use typescript of user project\n    typescriptPath: require.resolve('typescript'),\n  },\n  issue: {\n    exclude: [\n      { file: '**/*.(spec|test).ts' },\n      { file: '**/node_modules/**/*' },\n    ],\n  },\n  logger: {\n    log() {\n      // do nothing\n      // we only want to display error messages\n    },\n    error(message: string) {\n      console.error(message.replace(/ERROR/g, 'Type Error'));\n    },\n  },\n},\n\n\nBy default, the fork-ts-checker-webpack-plugin is enabled for type checking. You\ncan use output.disableTsChecker config to disable it.\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via\nObject.assign.\n\n\nFunction Type#\n\nWhen the value is a Function, the default config is passed in as the first\nparameter. You can modify the config object directly, or return an object as the\nfinal config.","frontmatter":{"sidebar_label":"tsChecker"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/ts-checker.mdx","_relativePath":"en/configure/app/tools/ts-checker.mdx"},{"id":190,"title":"tools.tsLoader","routePath":"/en/configure/app/tools/ts-loader","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":356},{"text":"Function Type","id":"function-type","depth":3,"charIndex":824},{"text":"Util Functions","id":"util-functions","depth":3,"charIndex":1248},{"text":"addIncludes","id":"addincludes","depth":4,"charIndex":1385},{"text":"addExcludes","id":"addexcludes","depth":4,"charIndex":1757}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.tsLoader.\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\nts-loader is not enabled by default in the project. When tools.tsLoader is not\nundefined, builder will use ts-loader instead of babel-loader to compile\nTypeScript code.\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default configuration via\nObject.assign.\n\nThe default configuration is as follows:\n\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"ESNext\"\n  },\n  \"transpileOnly\": true,\n  \"allowTsInNodeModules\": true\n}\n\n\nYou can override the default configuration via the tools.tsLoader configuration\nitem:\n\nexport default {\n  tools: {\n    tsLoader: {\n      allowTsInNodeModules: false,\n    },\n  },\n};\n\n\n\nFunction Type#\n\nWhen this value is a Function, the default configuration is passed in as the\nfirst parameter, the configuration object can be modified directly, or an object\ncan be returned as the final configuration.The second parameter is the util\nfunctions to modify the ts-loader configuration. For example:\n\nexport default {\n  tools: {\n    tsLoader: opts => {\n      opts.allowTsInNodeModules = false;\n    },\n  },\n};\n\n\n\nUtil Functions#\n\nWhen the value of tools.tsLoader is a Function, the utils functions available\nfor the second parameter are as follows:\n\naddIncludes#\n\n * Type: (includes: string | RegExp | Array) => void\n\nBy default, only the application code in the src directory will be compiled. Use\naddIncludes to specify ts-loader to compile some files under node_modules. For\nexample:\n\nexport default {\n  tools: {\n    tsLoader: (config, { addIncludes }) => {\n      addIncludes([/node_modules\\/react/]);\n    },\n  },\n};\n\n\naddExcludes#\n\n * Type: (excludes: string | RegExp | Array) => void\n\nContrary to addIncludes, specify ts-loader to exclude certain files when\ncompiling.\n\nFor example, without compiling files in the src/example directory:\n\nexport default {\n  tools: {\n    tsLoader: (config, { addExcludes }) => {\n      addExcludes([/src\\/example\\//]);\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"tsLoader"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/ts-loader.mdx","_relativePath":"en/configure/app/tools/ts-loader.mdx"},{"id":191,"title":"tools.webpackChain","routePath":"/en/configure/app/tools/webpack-chain","lang":"en","toc":[{"text":"Utils","id":"utils","depth":3,"charIndex":790},{"text":"env","id":"env","depth":4,"charIndex":798},{"text":"isProd","id":"isprod","depth":4,"charIndex":1160},{"text":"target","id":"target","depth":4,"charIndex":1447},{"text":"isServer","id":"isserver","depth":4,"charIndex":1738},{"text":"isWebWorker","id":"iswebworker","depth":4,"charIndex":1987},{"text":"webpack","id":"webpack","depth":4,"charIndex":2257},{"text":"HtmlWebpackPlugin","id":"htmlwebpackplugin","depth":4,"charIndex":2490},{"text":"getCompiledPath","id":"getcompiledpath","depth":4,"charIndex":2727},{"text":"CHAIN_ID","id":"chain_id","depth":4,"charIndex":3389},{"text":"CHAIN_ID.ONE_OF","id":"chain_idone_of","depth":3,"charIndex":3881},{"text":"CHAIN_ID.USE","id":"chain_iduse","depth":3,"charIndex":4341},{"text":"CHAIN_ID.PLUGIN","id":"chain_idplugin","depth":3,"charIndex":5257},{"text":"CHAIN_ID.MINIMIZER","id":"chain_idminimizer","depth":3,"charIndex":6952},{"text":"Examples","id":"examples","depth":3,"charIndex":7266},{"text":"Add/Modify/Delete loader","id":"add/modify/delete-loader","depth":4,"charIndex":7392},{"text":"Add/Modify/Delete plugin","id":"add/modify/delete-plugin","depth":4,"charIndex":7970}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see\ntools.webpackChain.\n\n * Type: Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\nYou can modify the webpack configuration by configuring tools.webpackChain which\nis type of Function. The function receives two parameters, the first is the\noriginal webpack chain object, and the second is an object containing some\nutils.\n\nCompared with tools.webpack, webpack-chain not only supports chained calls, but\nalso can locate built-in Rule or Plugin based on aliases, so as to achieve\nprecise config modification. We recommend using tools.webpackChain instead of\ntools.webpack.\n\n> tools.webpackChain is executed earlier than tools.webpack and thus will be\n> overridden by changes in tools.webpack.\n\n\nUtils#\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\nexport default {\n  tools: {\n    webpackChain: (chain, { env }) => {\n      if (env === 'development') {\n        chain.devtool('cheap-module-eval-source-map');\n      }\n    },\n  },\n};\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\nexport default {\n  tools: {\n    webpackChain: (chain, { isProd }) => {\n      if (isProd) {\n        chain.devtool('source-map');\n      }\n    },\n  },\n};\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current environment. For\nexample:\n\nexport default {\n  tools: {\n    webpackChain: (chain, { target }) => {\n      if (target === 'node') {\n        // ...\n      }\n    },\n  },\n};\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\nexport default {\n  tools: {\n    webpackChain: (chain, { isServer }) => {\n      if (isServer) {\n        // ...\n      }\n    },\n  },\n};\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\nexport default {\n  tools: {\n    webpackChain: (chain, { isWebWorker }) => {\n      if (isWebWorker) {\n        // ...\n      }\n    },\n  },\n};\n\n\nwebpack#\n\n * Type: typeof import('webpack')\n\nThe webpack instance. For example:\n\nexport default {\n  tools: {\n    webpackChain: (chain, { webpack }) => {\n      chain.plugin('my-progress').use(webpack.ProgressPlugin);\n    },\n  },\n};\n\n\nHtmlWebpackPlugin#\n\n * Type: typeof import('html-webpack-plugin')\n\nThe HtmlWebpackPlugin instance:\n\nexport default {\n  tools: {\n    webpackChain: (chain, { HtmlWebpackPlugin }) => {\n      console.log(HtmlWebpackPlugin);\n    },\n  },\n};\n\n\ngetCompiledPath#\n\n * Type: (name: string) => string\n\nGet the path to the builder built-in dependencies, such as:\n\n * sass\n * sass-loader\n * less\n * less-loader\n * css-loader\n * babel-loader\n * url-loader\n * file-loader\n * ...\n\nThis method is usually used when you need to reuse the same dependency with the\nbuilder.\n\nTIP\n\nBuilder built-in dependencies are subject to change with version iterations,\ne.g. generate large version break changes. Please avoid using this API if it is\nnot necessary.\n\nexport default {\n  tools: {\n    webpackChain: (chain, { getCompiledPath }) => {\n      const loaderPath = getCompiledPath('less-loader');\n      // ...\n    },\n  },\n};\n\n\nCHAIN_ID#\n\nSome common Chain IDs are predefined in the Builder, and you can use these IDs\nto locate the built-in Rule or Plugin.\n\nCHAIN_ID.RULE#\n\nID           DESCRIPTION\nRULE.MJS     Rule for mjs\nRULE.JS      Rule for js\nRULE.TS      Rule for ts\nRULE.CSS     Rule for css\nRULE.LESS    Rule for less\nRULE.SASS    Rule for sass\nRULE.PUG     Rule for pug\nRULE.TOML    Rule for toml\nRULE.YAML    Rule for yaml\nRULE.FONT    Rule for font\nRULE.IMAGE   Rule for image\nRULE.MEDIA   Rule for media\n\n\nCHAIN_ID.ONE_OF#\n\nONE_OF.XXX can match a certain type of rule in the rule array.\n\nID                  DESCRIPTION\nONE_OF.SVG          Rules for SVG, automatic choice between data URI and\n                    separate file\nONE_OF.SVG_URL      Rules for SVG, output as a separate file\nONE_OF.SVG_INLINE   Rules for SVG, inlined into bundles as data URIs\nONE_OF.SVG_ASSETS   Rules for SVG, automatic choice between data URI and\n                    separate file\n\n\nCHAIN_ID.USE#\n\nUSE.XXX can match a certain loader.\n\nID                     DESCRIPTION\nUSE.TS                 correspond to ts-loader\nUSE.CSS                correspond to css-loader\nUSE.LESS               correspond to less-loader\nUSE.SASS               correspond to sass-loader\nUSE.PUG                correspond to pug-loader\nUSE.TOML               correspond to toml-loader\nUSE.YAML               correspond to yaml-loader\nUSE.FILE               correspond to file-loader\nUSE.URL                correspond to url-loader\nUSE.SVGR               correspond to @svgr/webpack\nUSE.BABEL              correspond to babel-loader\nUSE.STYLE              correspond to style-loader\nUSE.POSTCSS            correspond to postcss-loader\nUSE.MARKDOWN           correspond to markdown-loader\nUSE.CSS_MODULES_TS     correspond to css-modules-typescript-loader\nUSE.MINI_CSS_EXTRACT   correspond to mini-css-extract-plugin.loader\n\n\nCHAIN_ID.PLUGIN#\n\nPLUGIN.XXX can match a certain webpack plugin.\n\nID                             DESCRIPTION\nPLUGIN.HMR                     correspond to HotModuleReplacementPlugin\nPLUGIN.COPY                    correspond to CopyWebpackPlugin\nPLUGIN.HTML                    correspond to HtmlWebpackPlugin, you need to splice the\n                               entry name when using: ${PLUGIN.HTML}-${entryName}\nPLUGIN.DEFINE                  correspond to DefinePlugin\nPLUGIN.IGNORE                  correspond to IgnorePlugin\nPLUGIN.BANNER                  correspond to BannerPlugin\nPLUGIN.PROGRESS                correspond to Webpackbar\nPLUGIN.APP_ICON                correspond to AppIconPlugin\nPLUGIN.LOADABLE                correspond to LoadableWebpackPlugin\nPLUGIN.MANIFEST                correspond to WebpackManifestPlugin\nPLUGIN.TS_CHECKER              correspond to ForkTsCheckerWebpackPlugin\nPLUGIN.INLINE_HTML             correspond to InlineChunkHtmlPlugin\nPLUGIN.BUNDLE_ANALYZER         correspond to WebpackBundleAnalyzer\nPLUGIN.BOTTOM_TEMPLATE         correspond to BottomTemplatePlugin\nPLUGIN.MINI_CSS_EXTRACT        correspond to MiniCssExtractPlugin\nPLUGIN.REACT_FAST_REFRESH      correspond to ReactFastRefreshPlugin\nPLUGIN.NODE_POLYFILL_PROVIDE   correspond to ProvidePlugin for node polyfills\nPLUGIN.INSPECTOR               correspond to @modern-js/inspector-webpack-plugin\nPLUGIN.SUBRESOURCE_INTEGRITY   correspond to webpack-subresource-integrity\nPLUGIN.ASSETS_RETRY            correspond to webpack static asset retry plugin in Builder\nPLUGIN.AUTO_SET_ROOT_SIZE      correspond to automatically set root font size plugin in\n                               Builder\n\n\nCHAIN_ID.MINIMIZER#\n\nMINIMIZER.XXX can match a certain minimizer.\n\nID                  DESCRIPTION\nMINIMIZER.JS        correspond to TerserWebpackPlugin\nMINIMIZER.CSS       correspond to CssMinimizerWebpackPlugin\nMINIMIZER.ESBUILD   correspond to ESBuildPlugin\nMINIMIZER.SWC       correspond to SwcWebpackPlugin\n\n\nExamples#\n\nThe following are some common configuration examples, see the full webpack-chain\nAPI webpack-chain documentation.\n\nAdd/Modify/Delete loader#\n\nexport default {\n  tools: {\n    webpackChain: (chain, { CHAIN_ID }) => {\n      // Add loader\n      chain.module\n        .rule('md')\n        .test(/\\.md$/)\n        .use('md-loader')\n        .loader('md-loader');\n\n      // Modify loader\n      chain.module\n        .rule(CHAIN_ID.RULE.JS)\n        .use(CHAIN_ID.USE.BABEL)\n        .tap(options => {\n          options.plugins.push('babel-plugin-xxx');\n          return options;\n        });\n\n      // Delete loader\n      chain.module.rule(CHAIN_ID.RULE.JS).uses.delete(CHAIN_ID.USE.BABEL);\n    },\n  },\n};\n\n\nAdd/Modify/Delete plugin#\n\nexport default {\n  tools: {\n    webpackChain: (chain, { webpack, CHAIN_ID }) => {\n      // Add plugin\n      chain.plugin('custom-define').use(webpack.DefinePlugin, [\n        {\n          'process.env': {\n            NODE_ENV: JSON.stringify(process.env.NODE_ENV),\n          },\n        },\n      ]);\n\n      // Modify plugin\n      chain.plugin(CHAIN_ID.PLUGIN.HMR).tap(options => {\n        options[0].fullBuildTimeout = 200;\n        return options;\n      });\n\n      // Delete plugin\n      chain.plugins.delete(CHAIN_ID.PLUGIN.HMR);\n    },\n  },\n};\n","frontmatter":{"sidebar_label":"webpackChain"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/webpack-chain.mdx","_relativePath":"en/configure/app/tools/webpack-chain.mdx"},{"id":192,"title":"tools.webpack","routePath":"/en/configure/app/tools/webpack","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":390},{"text":"Function Type","id":"function-type","depth":3,"charIndex":724},{"text":"Utils","id":"utils","depth":3,"charIndex":1241},{"text":"env","id":"env","depth":4,"charIndex":1368},{"text":"isProd","id":"isprod","depth":4,"charIndex":1749},{"text":"target","id":"target","depth":4,"charIndex":2055},{"text":"isServer","id":"isserver","depth":4,"charIndex":2358},{"text":"isWebWorker","id":"iswebworker","depth":4,"charIndex":2624},{"text":"webpack","id":"webpack","depth":4,"charIndex":2911},{"text":"HtmlWebpackPlugin","id":"htmlwebpackplugin","depth":4,"charIndex":3155},{"text":"addRules","id":"addrules","depth":4,"charIndex":3392},{"text":"prependPlugins","id":"prependplugins","depth":4,"charIndex":3971},{"text":"appendPlugins","id":"appendplugins","depth":4,"charIndex":4506},{"text":"removePlugin","id":"removeplugin","depth":4,"charIndex":5033},{"text":"mergeConfig","id":"mergeconfig","depth":4,"charIndex":5377},{"text":"getCompiledPath","id":"getcompiledpath","depth":4,"charIndex":5671}],"domain":"","content":"#\n\nTIP\n\nThis config is provided by Modern.js Builder, more detail can see tools.webpack.\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\ntools.webpack is used to configure webpack.\n\n> tools.webpackChain is also used to modify the webpack configuration, and the\n> function is more powerful. It is recommended to use tools.webpackChain first.\n\n\nObject Type#\n\ntools.webpack can be configured as an object to be deep merged with the built-in\nwebpack configuration through webpack-merge.\n\nFor example, add resolve.alias configuration:\n\nexport default {\n  tools: {\n    webpack: {\n      resolve: {\n        alias: {\n          '@util': 'src/util',\n        },\n      },\n    },\n  },\n};\n\n\n\nFunction Type#\n\ntools.webpack can be configured as a function. The first parameter of this\nfunction is the built-in webpack configuration object, you can modify this\nobject, and then return it. For example:\n\nexport default {\n  tools: {\n    webpack: config => {\n      config.resolve.alias['@util'] = 'src/util';\n      return config;\n    },\n  },\n};\n\n\nTIP\n\nThe object returned by the tools.webpack function is used directly as the final\nwebpack configuration and is not merged with the built-in webpack configuration.\n\n\nUtils#\n\nThe second parameter of this function is an object, which contains some utility\nfunctions and properties, as follows:\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\nexport default {\n  tools: {\n    webpack: (config, { env }) => {\n      if (env === 'development') {\n        config.devtool = 'cheap-module-eval-source-map';\n      }\n      return config;\n    },\n  },\n};\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\nexport default {\n  tools: {\n    webpack: (config, { isProd }) => {\n      if (isProd) {\n        config.devtool = 'source-map';\n      }\n      return config;\n    },\n  },\n};\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current target. For example:\n\nexport default {\n  tools: {\n    webpack: (config, { target }) => {\n      if (target === 'node') {\n        // ...\n      }\n      return config;\n    },\n  },\n};\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\nexport default {\n  tools: {\n    webpack: (config, { isServer }) => {\n      if (isServer) {\n        // ...\n      }\n      return config;\n    },\n  },\n};\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\nexport default {\n  tools: {\n    webpack: (config, { isWebWorker }) => {\n      if (isWebWorker) {\n        // ...\n      }\n      return config;\n    },\n  },\n};\n\n\nwebpack#\n\n * Type: typeof import('webpack')\n\nThe webpack instance. For example:\n\nexport default {\n  tools: {\n    webpack: (config, { webpack }) => {\n      config.plugins.push(new webpack.ProgressPlugin());\n      return config;\n    },\n  },\n};\n\n\nHtmlWebpackPlugin#\n\n * Type: typeof import('html-webpack-plugin')\n\nThe HtmlWebpackPlugin instance:\n\nexport default {\n  tools: {\n    webpackChain: (chain, { HtmlWebpackPlugin }) => {\n      console.log(HtmlWebpackPlugin);\n    },\n  },\n};\n\n\naddRules#\n\n * Type: (rules: RuleSetRule | RuleSetRule[]) => void\n\nAdd additional webpack rules.\n\nFor example:\n\nexport default {\n  tools: {\n    webpack: (config, { addRules }) => {\n      // add a single rule\n      addRules({\n        test: /\\.foo/,\n        loader: require.resolve('foo-loader'),\n      });\n\n      // Add multiple rules as an array\n      addRules([\n        {\n          test: /\\.foo/,\n          loader: require.resolve('foo-loader'),\n        },\n        {\n          test: /\\.bar/,\n          loader: require.resolve('bar-loader'),\n        },\n      ]);\n    },\n  },\n};\n\n\nprependPlugins#\n\n * Type: (plugins: WebpackPluginInstance | WebpackPluginInstance[]) => void\n\nAdd additional plugins to the head of the internal webpack plugins array, and\nthe plugin will be executed first.\n\nexport default {\n  tools: {\n    webpack: (config, { prependPlugins, webpack }) => {\n      // add a single plugin\n      prependPlugins(\n        new webpack.BannerPlugin({\n          banner: 'hello world!',\n        }),\n      );\n\n      // Add multiple plugins\n      prependPlugins([new PluginA(), new PluginB()]);\n    },\n  },\n};\n\n\nappendPlugins#\n\n * Type: (plugins: WebpackPluginInstance | WebpackPluginInstance[]) => void\n\nAdd additional plugins at the end of the internal webpack plugins array, the\nplugin will be executed last.\n\nexport default {\n  tools: {\n    webpack: (config, { appendPlugins, webpack }) => {\n      // add a single plugin\n      appendPlugins([\n        new webpack.BannerPlugin({\n          banner: 'hello world!',\n        }),\n      ]);\n\n      // Add multiple plugins\n      appendPlugins([new PluginA(), new PluginB()]);\n    },\n  },\n};\n\n\nremovePlugin#\n\n * Type: (name: string) => void\n\nRemove the internal webpack plugin, the parameter is the constructor.name of the\nplugin.\n\nFor example, remove the internal fork-ts-checker-webpack-plugin:\n\nexport default {\n  tools: {\n    webpack: (config, { removePlugin }) => {\n      removePlugin('ForkTsCheckerWebpackPlugin');\n    },\n  },\n};\n\n\nmergeConfig#\n\n * Type: (...configs: WebpackConfig[]) => WebpackConfig\n\nUsed to merge multiple webpack configs, same as webpack-merge.\n\nexport default {\n  tools: {\n    webpack: (config, { mergeConfig }) => {\n      return mergeConfig(config, {\n        devtool: 'eval',\n      });\n    },\n  },\n};\n\n\ngetCompiledPath#\n\n * Type: (name: string) => string\n\nGet the path to the builder built-in dependencies, same as\nwebpackChain#getCompiledPath.","frontmatter":{"sidebar_label":"webpack"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/tools/webpack.mdx","_relativePath":"en/configure/app/tools/webpack.mdx"},{"id":193,"title":"Configuring Modern.js","routePath":"/en/configure/app/usage","lang":"en","toc":[{"text":"Configure in the configuration file","id":"configure-in-the-configuration-file","depth":2,"charIndex":528},{"text":"modern.config.ts (recommended)","id":"modernconfigts-(recommended)","depth":3,"charIndex":745},{"text":"modern.config.js","id":"modernconfigjs","depth":3,"charIndex":1431},{"text":"Export Configuration Function","id":"export-configuration-function","depth":3,"charIndex":1826},{"text":"Export Async Function","id":"export-async-function","depth":3,"charIndex":2610},{"text":"Specify the Configuration File","id":"specify-the-configuration-file","depth":3,"charIndex":2951},{"text":"Configure in package.json (not recommended)","id":"configure-in-packagejson-(not-recommended)","depth":2,"charIndex":3402},{"text":"Note","id":"note","depth":3,"charIndex":3957},{"text":"Debug configuration locally","id":"debug-configuration-locally","depth":2,"charIndex":4281},{"text":"Example","id":"example","depth":3,"charIndex":4523},{"text":"Note","id":"note-1","depth":3,"charIndex":5195},{"text":"Merge Multiple Configurations","id":"merge-multiple-configurations","depth":2,"charIndex":5826},{"text":"Example","id":"example-1","depth":3,"charIndex":6292},{"text":"Configuration Type","id":"configuration-type","depth":2,"charIndex":6804}],"domain":"","content":"#\n\nThere are two configurations in the Modern.js, a compile configuration and a\nserver runtime configuration.\n\nThe compile configuration can be configured in two places:\n\n * modern.config.(ts|js|mjs) file in the root path\n * package.json file\n\nINFO\n\nConfigurations in both package.json and modern.config.ts file are not supported\nfor the same configuration. Configuration in modern.config.ts is recommended.\n\nServer runtime configuration can be configured in the\nmodern.server-runtime.config.(ts|js|mjs) file in the root path.\n\n\nConfigure in the configuration file#\n\nModern.js configuration files are defined in the root path of the project, and\nsupports .ts, .js and .mjs formats:\n\n * modern.config.ts\n * modern.config.js\n * modern.config.mjs\n\n\nmodern.config.ts (recommended)#\n\nWe recommend using configuration files in .ts format, which provides friendly\nTypeScript type hints to help you avoid configuration errors.\n\nImport the defineConfig tool function from @modern-js/app-tools, which will help\nyou with configuration type derivation and type completion:\n\n\n\nexport default defineConfig({\n  source: {\n    alias: {\n      '@common': './src/common',\n    },\n  },\n});\n\n\nWhen using Rspack as the bundler, due to some differences in configuration types\nbetween webpack and Rspack, you need to specify <'rspack'> generic type for\ndefineConfig:\n\n- export default defineConfig({\n+ export default defineConfig<'rspack'>({\n   //...\n});\n\n\n\nmodern.config.js#\n\nIf you are developing a non-TypeScript project, you can use the configuration\nfile in .js format:\n\nexport default {\n  source: {\n    alias: opts => {\n      opts['@common'] = './src/common';\n    },\n  },\n};\n\n\nYou can also configure depending on your environment with process.env.NODE_ENV:\n\nexport default {\n  server: {\n    ssr: process.env.NODE_ENV === 'development',\n  },\n};\n\n\n\nExport Configuration Function#\n\nModern.js supports exporting a function in the configuration file, and you can\ndynamically compute the configuration in the function and return it to\nModern.js.\n\n\n\nexport default defineConfig(({ env, command }) => ({\n  source: {\n    alias: {\n      '@foo': env === 'development' ? './src/foo.dev.ts' : './src/foo.prod.ts',\n    },\n  },\n}));\n\n\nThis function takes the following parameters:\n\n * env: same as the value of process.env.NODE_ENV.\n   * When running modern dev or modern start, the value of env is development.\n   * When running modern build or modern serve, the value of env is production.\n   * When running modern test, the value of env is test.\n * command: corresponds to the currently running command, such as dev, start,\n   build, serve.\n\n\nExport Async Function#\n\nModern.js also supports exporting an asynchronous function in the configuration\nfile, you can perform some asynchronous operations in the function:\n\n\n\nexport default defineConfig(async ({ env, command }) => {\n  const result = await someAsyncFunction();\n\n  return {\n    html: {\n      title: result,\n    },\n  };\n});\n\n\n\nSpecify the Configuration File#\n\nYou can specify the name of the configuration file using the --config option.\n\nFor example, if you need to use the modern.prod.config.js file when running\nbuild, you can add the following scripts to package.json:\n\n{\n  \"scripts\": {\n    \"dev\": \"modern dev\",\n    \"build\": \"modern build --config modern.prod.config.js\"\n  }\n}\n\n\nYou can also abbreviate the --config option to -c:\n\n$ modern build -c modern.prod.config.js\n\n\n\nConfigure in package.json (not recommended)#\n\nIn addition to configuration files, configuration options can also be set the\nmodernConfig field in the package.json, such as:\n\n{\n  \"modernConfig\": {\n    \"source\": {\n      \"alias\": {\n        \"@common\": \"./src/common\"\n      }\n    }\n  }\n}\n\n\nDue to the limitation of the JSON file format, only simple types such as\nnumbers, strings, boolean values, arrays, etc. can be defined in package.json.\nWhen we need to set the value of the function type, it is recommended to do so\nin the Modern.js configuration file.\n\n\nNote#\n\n * It is not recommended to use both package.json and modern.config.t[j]s for\n   configuration. If both are used and a configuration conflict occurs,\n   Modern.js will prompt error on the command line.\n * @modern-js/runtime exports the defineConfig API of the same name, please pay\n   attention to the distinction.\n\n\nDebug configuration locally#\n\nTo facilitate local debugging configuration locally, Modern.js supports creating\nmodern.config.local.(ts|js|mjs) files in the root directory of the project to\noverride modern.config.(ts|js|mjs) configurations.\n\n\nExample#\n\nFor example, the port number is configured as 3000 in modern.config.ts:\n\n\n\nexport default defineConfig({\n  server: {\n    port: 3000,\n  },\n});\n\n\nIf you need to change the port number to 3001 to debugging locally, but you\ndon't want to change the modern.config.ts file of the current project, you can\ncreate a modern.config.local.ts file and add the following configuration:\n\n\n\nexport default defineConfig({\n  server: {\n    port: 3001,\n  },\n});\n\n\nThe configuration in the modern.config.local.ts file will be deep merged with\nthe configuration in modern.config.ts and override the configurations in\nmodern.config.ts, so server.port will be is overridden by 3001.\n\n\nNote#\n\nWhen using modern.config.local.ts, please note the following:\n\n * The modern.config.local.ts file is only loaded when running modern dev or\n   modern start commands, and will not be loaded when running modern build.\n * The modern.config.local.ts file overrides not only over modern.config.ts, but\n   also the modernConfig field in package.json.\n * As modern.config.local.ts is only used for local debugging, it is not\n   recommended to commit it to the repository, please ensure that the project's\n   .gitignore file contains modern.config.local.ts.\n\nmodern.config.local.ts\nmodern.config.local.js\nmodern.config.local.mjs\n\n\n\nMerge Multiple Configurations#\n\nIn some cases, you may need to merge multiple configurations into one\nconfiguration. You can use the mergeConfig util to merge multiple\nconfigurations.\n\nThe mergeConfig function accepts an array as a parameter, and each item in the\narray is a configuration object. mergeConfig will deeply merge each\nconfiguration object in the array, automatically merge multiple functions into\nan array, and returns a merged configuration object.\n\n\nExample#\n\n\n\nconst config1 = {\n   dev: {\n     port: 3000,\n   },\n   tools: {\n     postcss: () => console. log('config1');\n   },\n};\nconst config2 = {\n   dev: {\n     port: 3001,\n   },\n   tools: {\n     postcss: () => console. log('config2');\n   },\n};\n\nconst mergedConfig = mergeConfig([config1, config2]);\n\n\nIn the above example, the merged configuration object is:\n\nconst mergedConfig = {\n  dev: {\n    port: 3001,\n  },\n  tools: {\n    postcss: [() => console.log('config1'), () => console.log('config2')],\n  },\n};\n\n\n\nConfiguration Type#\n\nModern.js exports AppUserConfig type, which corresponds to the type of Modern.js\nconfiguration object:\n\n\n\nconst config: AppUserConfig = {\n  tools: {\n    webpack: {},\n  },\n};\n\n\nWhen using Rspack as the bundler, due to some differences in configuration types\nbetween webpack and Rspack, you need to specify <'rspack'> generic type for\ndefineConfig:\n\n\n\nconst config: AppUserConfig<'rspack'> = {\n  tools: {\n    rspack: {},\n  },\n};\n","frontmatter":{"sidebar_position":0},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/configure/app/usage.mdx","_relativePath":"en/configure/app/usage.mdx"},{"id":194,"title":"Use Proxy","routePath":"/en/guides/advanced-features/bff/bff-proxy","lang":"en","toc":[],"domain":"","content":"#\n\nBy configuring the BFF proxy, API requests can be forwarded without manual\ncoding\n\nCAUTION\n\nUsing a BFF proxy ensures that requests can enter the BFF handler. (eg the\nrequest path must contain a bff prefix)\n\nWriting the following BFF proxy configuration in the\nmodern.server-runtime.config.js file will proxy requests sent to\nhttp://localhost:8080/api/v1/topics to https://cnodejs.org/api/v1/topics.\n\n\nexport default defineConfig({\n  bff: {\n    proxy: {\n      '/api/v1/topics': 'https://cnodejs.org',\n    },\n  },\n};\n\n\nNOTE\n\nFor more detail, see bff.proxy. For more proxy info, see Proxy.","frontmatter":{"sidebar_position":5,"title":"Use Proxy"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/bff/bff-proxy.mdx","_relativePath":"en/guides/advanced-features/bff/bff-proxy.mdx"},{"id":195,"title":"Frameworks","routePath":"/en/guides/advanced-features/bff/frameworks","lang":"en","toc":[{"text":"Function Mode","id":"function-mode","depth":2,"charIndex":137},{"text":"Framework Mode","id":"framework-mode","depth":2,"charIndex":2134},{"text":"Express","id":"express","depth":3,"charIndex":2300},{"text":"Koa","id":"koa","depth":3,"charIndex":2988}],"domain":"","content":"#\n\nModern.js's BFF supports different runtime frameworks, currently Modern.js's BFF\nsupports two runtime frameworksExpress.js 和 Koa.js.\n\n\nFunction Mode#\n\nUnder the function writing, only the middleware writing method of various\nruntime frameworks is different, and other implementations are basically the\nsame. Take Express as an example to introduce how to write a middleware by hand\nin the api/_ app.ts and add permission verification:\n\n\n\n\nexport default hook(({ addMiddleware }) => {\n  addMiddleware(async (req: Request, res: Response, next: NextFunction) => {\n    if (req.url !== '/api/login') {\n      const sid = req?.cookies?.sid;\n      if (!sid) {\n        res.status(400);\n        res.json({ code: -1, message: 'need login' });\n      } else {\n        next();\n      }\n    } else {\n      next();\n    }\n  });\n});\n\n\nThen add a normal BFF function /api/hello.ts:\n\nexport default async () => {\n  return 'Hello Modern.js';\n};\n\n\nFinally, add the access code of the interface in the front-end src/App.tsx, and\ncall it directly in an integrated way:\n\n\n\n\nexport default () => {\n  const [text, setText] = useState('');\n\n  useEffect(() => {\n    async function fetchMyApi() {\n      const { message } = await hello();\n      setText(message);\n    }\n\n    fetchMyApi();\n  }, []);\n\n  return \n\n{text};\n};\n\n\nThen exec pnpm run dev starts the project, and accessing http://localhost:8080/\nwill find that the request for'/api/hello 'is blocked:\n\n\n\nFinally, modify the front-end code src/App.tsx to call the login interface\nbefore accessing /api/hello:\n\n\n\n\n\nexport default () => {\n  const [text, setText] = useState('');\n\n  useEffect(() => {\n    async function fetchAfterLogin() {\n      const { code } = await login();\n      if (code === 0) {\n        const { message } = await hello();\n        setText(message);\n      }\n    }\n    fetchAfterLogin();\n  }, []);\n\n  return \n\n{text};\n};\n\n\nRefresh the page and you can see that /api/hello was accessed successfully:\n\n\n\nThe above code simulates the way to add middleware to the /api/_app.ts to\nachieve an easy login function. Also, other functions can be implemented in this\nhook file to extend BFF Server.\n\n\nFramework Mode#\n\nUnder the framework writing, Modern.js does not collect middleware in the\napi/_app.ts, and the running process is controlled by the plugin itself.\n\n\nExpress#\n\nThe framework writing of Express supports defining the startup logic of API\nServer in api/app.[tj]s. performing the initialization work of the application,\nadding global middleware, declaring routes, and even extending the original\nframework.\n\nThe route defined by the BFF function will be registered after the route defined\nby the app.ts file, so here you can also intercept the route defined by the BFF\nfunction, preprocess or respond in advance.\n\n\n\nconst app = express();\n\napp.put('/user', function (req, res) {\n  res.send('Got a PUT request at /user');\n});\n\napp.use(async (req, res, next) => {\n  console.info(`access url: ${req.url}`);\n  next();\n});\n\nexport default app;\n\n\n\nKoa#\n\nThe Koa framework is written in a similar way to Express. It supports defining\nthe startup logic of API Server in app.[tj]s, performing the initialization work\nof the application, adding global middleware, declaring routes, extending the\noriginal framework, etc.\n\nThe route defined by the BFF function will be registered after the route defined\nby the app.ts file, so here you can also intercept the route defined by the BFF\nfunction, preprocess or respond in advance.\n\nCAUTION\n\nUse the framework writing, when there is no app.ts, Modern.js will add koa-body\nby default. When there is app.ts, if the developer wants to use the BFF function\nwith Body, he needs to ensure that the koa-body middleware has been added.\n\n\n\nconst app = new Koa();\n\napp.put('/user', function (req, res) {\n  res.send('Got a PUT request at /user');\n});\n\napp.use(async (ctx, next) => {\n  console.info(`access url: ${ctx.url}`);\n  await next();\n});\n\nexport default app;\n","frontmatter":{"sidebar_position":3,"title":"Frameworks"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/bff/frameworks.mdx","_relativePath":"en/guides/advanced-features/bff/frameworks.mdx"},{"id":196,"title":"Basic Usage","routePath":"/en/guides/advanced-features/bff/function","lang":"en","toc":[{"text":"Enable BFF","id":"enable-bff","depth":2,"charIndex":267},{"text":"BFF Function","id":"bff-function","depth":2,"charIndex":425},{"text":"API Routes","id":"api-routes","depth":2,"charIndex":1370},{"text":"Default Route","id":"default-route","depth":3,"charIndex":1895},{"text":"Multi-layer Routing","id":"multi-layer-routing","depth":3,"charIndex":2043},{"text":"Dynamic Routing","id":"dynamic-routing","depth":3,"charIndex":2281},{"text":"Allow List","id":"allow-list","depth":3,"charIndex":2518},{"text":"RESTful API","id":"restful-api","depth":2,"charIndex":2906},{"text":"Function Named Export","id":"function-named-export","depth":3,"charIndex":3653},{"text":"Function Parameter Rule","id":"function-parameter-rule","depth":3,"charIndex":4854},{"text":"Dynamic Path","id":"dynamic-path","depth":4,"charIndex":5163},{"text":"RequestOption","id":"requestoption","depth":4,"charIndex":5788}],"domain":"","content":"#\n\nApplications developed with Modern.js can define API functions in the api/\ndirectory, which can be called by the front-end to send requests without writing\nfront and back-end glue layer code, At the same time, it ensures the type safety\nof the front and back end\n\n\nEnable BFF#\n\n 1. Execute pnpm new and select \"Enable BFF\"\n\n 2. Add the following code to modern.config.[tj]s according to the chosen\n    runtime framework:\n\n\nBFF Function#\n\nThe functions that are allowed to be called through integration are called BFF\nfunctions. Here is the simplest BFF function to write, creating an api/hello.ts\nfile:\n\nexport const get = async () => 'Hello Modern.js';\n\n\nThen directly import the function in src/App.tsx and call:\n\n\n\n\nexport default () => {\n  const [text, setText] = useState('');\n\n  useEffect(() => {\n    hello().then(setText);\n  }, []);\n  return \n{text};\n};\n\n\nINFO\n\nModern.js generator has already configured the @api alias in tsconfig.json, so\nyou can import functions directly by aliases.\n\nThe functions import in src/App.tsx will be automatically converted into\ninterface calls, so there is no need to call the interface through fetch.\n\nExecute pnpm run dev, then open http://localhost:8080/ to see that the page has\ndisplayed the content returned by the BFF function. In Network, you can see that\nthe page sent a request to http://localhost:8080/api/hello.\n\n\n\n\nAPI Routes#\n\nIn Modern.js, the BFF function routing system is implemented based on the file\nsystem, and it is also a conventional routing system.\n\nIn Function Mode, All files under api/ will map to an interface. In Framework\nMode, All files under api/lambda will map to an interface\n\nNOTE\n\nFunction Mode & Framework Mode will introduce soon.\n\nAll routes generated by BFF functions have a prefix, and the default value is\n/api. The prefix can be set through bff.prefix.\n\nSeveral routing conventions are described as follow.\n\n\nDefault Route#\n\nFiles named index.[jt]s are mapped to the previous directory.\n\n * api/index.ts -> {prefix}/\n * api/user/index.ts -> {prefix}/user\n\n\nMulti-layer Routing#\n\nSupports parsing nested files, if you create a nested folder structure, the\nfiles will still automatically parse routes in the same way.\n\n * api/hello.ts -> {prefix}/hello\n * api/user/list.ts -> {prefix}/user/list\n\n\nDynamic Routing#\n\nCreate folders or files named with [xxx] to support dynamic named routing\nparameters.\n\n * api/user/[username]/info.ts -> {prefix}/user/:username/info\n * api/user/username/[action].ts -> {prefix}/user/username/:action\n\n\nAllow List#\n\nBy default, all files in the'api/'directory will be parsed as BFF function\nfiles, but the following files will not be parsed:\n\n * file name start with _, for example _utils.ts.\n * files in directory which name start with _, for example\n   _utils/index.ts、_utils/cp.ts.\n * test files, for example foo.test.ts.\n * type files, for example hello.d.ts.\n * files in node_module.\n\n\nRESTful API#\n\nModern.js BFF functions need to be defined according to the RESTful API\nstandard, follow the HTTP Method specification, and do not allow free parameter\ndefinition.\n\nINFO\n\nAssuming that the function allows free definition of parameters, the resulting\nroute must be called by the private protocol (the reason is that the request\nparameters cannot be distinguished from the request body), and cannot implement\nany RESTful API.\n\nIf the service is only used for the application itself, there is no problem. but\nits non-standard interface definition cannot be integrated into the larger\nsystem. In the case of multiple systems working together (such as BFF low-code\nconstruction), other systems also need to follow the private protocol.\n\n\nFunction Named Export#\n\nModern.js the export name of the BFF function determines the Method of the\ncorresponding interface of the function, such as get, post and so on.\n\nFor example, following the example, a GET interface can be exported.\n\nexport const get = async () => {\n  return {\n    name: 'Modern.js',\n    desc: 'Web engineering system',\n  };\n};\n\n\nFollowing the example below, a POST interface can be exported.\n\nexport const post = async () => {\n  return {\n    name: 'Modern.js',\n    desc: 'Web engineering system',\n  };\n};\n\n\n * Modern.js supports 9 definitions for HTTP Method:\n   GET、POST、PUT、DELETE、CONNECT、TRACE、PATCH、OPTIONS、HEAD, can be exported using\n   these methods as functions.\n\n * The name is size insensitive, if GET, can write get、Get、GEt、GET, can be\n   accurately identified. But default export as export default xxx will be map\n   to Get.\n\n * Multiple functions of different Methods can be defined in one file, but if\n   multiple functions of the same Method are defined, only the first will take\n   effect.\n\nINFO\n\nIt should be noted that the defined functions should all be asynchronous, which\nis related to the type when the function is called, which will be mentioned\nlater.\n\n\nFunction Parameter Rule#\n\nAs mentioned above, in order to meet the design criteria of RESTful APIs, the\nBFF function in Modern.js needs to follow certain imported parameter rules.\n\nThe function parameters are divided into two parts, the dynamic part in the\nrequest path and the request option RequestOption.\n\nDynamic Path#\n\nDynamic routing will be used as imported parameters in the first part of the\nfunction, and each imported parameter corresponds to a dynamic route. For\nexample, in the following example, uid will be passed into the function as the\nfirst two parameters:\n\nexport default async (level: number, id: number) => {\n  const userData = await queryUser(level, uid);\n  return userData;\n};\n\n\nPass dynamic parameters directly when calling:\n\n\n\n\nexport default () => {\n  const [name, setName] = useState('');\n\n  useEffect(() => {\n    getUser(6, 001).then(userData => setName(userData.name));\n  }, []);\n\n  return \n{name};\n};\n\n\nRequestOption#\n\nThe parameter after Dynamic Path is the object RequestOption containing\nquerystring and request body, which is used to define the types of data and\nquery.\n\nIn normal functions without dynamic routing, the incoming data and query can be\nobtained from the first imported parameter, for example:\n\n\n\nexport async function post({\n  query,\n  data,\n}: RequestOption, Record>) {\n  // do somethings\n}\n\n\nWhen a function file uses dynamic routing rules, dynamic routing before the\nRequestOption parameter.\n\nexport async function post(\n  sku: string,\n  id: string,\n  {\n    data,\n    query,\n  }: RequestOption, Record>,\n) {\n  // do somethings\n}\n\n\nAlso pass in the parameters according to the function definition:\n\n\n\nexport default () => {\n  const addSku = () => {\n    post('0001' /* sku */, '1234' /* id */, {\n      query: {\n        /* ... */\n      },\n      data: {\n        /* ... */\n      },\n    });\n  };\n\n  return \n添加 SKU;\n};\n\n\nAs mentioned earlier, the defined functions should be asynchronous because they\nare automatically converted to HTTP interface calls when called by the front\nend.\n\nso in order to keep the type definition consistent with the actual calling, it\nis necessary to set the BFF function to asynchronous when defining it.","frontmatter":{"sidebar_position":1,"title":"Basic Usage"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/bff/function.mdx","_relativePath":"en/guides/advanced-features/bff/function.mdx"},{"id":197,"title":"BFF","routePath":"/en/guides/advanced-features/bff/","lang":"en","toc":[],"domain":"","content":"#\n\nIn the development of the concept of front back separation, the front-end part\ncan do more and more things, and the front-end needs some UI-oriented data\ninterfaces, so the industry introduced the concept of BFF (Backends for\nFrontends).\n\nThe main problems it to solve include:\n\n * Aggregation, mapping, clipping, and proxying of lower-level APIs according to\n   their own business needs.\n * Cache data for some specific scenarios to improve performance and thus\n   improve user experience.\n * Quickly development of new products based on existing interfaces.\n * Interface with third-party systems, such as login authentication.\n\nModern.js officially supported the BFF and provided the Integrated BFF to\nfurther strengthen the BFF's capabilities, mainly including the following\ncapabilities:\n\n * Quick development and debugging go live, running, building, and deploying BFF\n   code in the same project.\n * Minimal pure function call, directly import BFF function on the front end,\n   and can be automatically converted into HTTP request when called.\n * No private protocol, follow RESTful API specification, all BFF interfaces are\n   standardized.\n * Full TypeScript support.\n * Meet user preferences and support multi-frame extension writing.","frontmatter":{"title":"BFF"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/bff/index.mdx","_relativePath":"en/guides/advanced-features/bff/index.mdx"},{"id":198,"title":"BFF Type","routePath":"/en/guides/advanced-features/bff/type","lang":"en","toc":[{"text":"Function Mode","id":"function-mode","depth":2,"charIndex":608},{"text":"Framework Mode","id":"framework-mode","depth":2,"charIndex":1113}],"domain":"","content":"#\n\nRuntime framework support is also an important part of BFF. Modern.js supports\nextending BFF's runtime framework through plugins, and provides a series of\nbuilt-in plugins, developers can directly use the conventions and ecology of the\nframework.\n\nThe plugin is compatible with most of the specifications of these frameworks,\nand each framework needs to provide two types of ways to extend the writing of\nBFF functions, namely Function Mode and Framework Mode.\n\nNOTE\n\nWhether the current api/ directory structure is written as a framework is\ndetermined by the corresponding plugin, Modern.js don't care.\n\n\nFunction Mode#\n\nWhen the plugin considers that it is currently written as a function, it must\nsupport writing middleware in the api/_ app.ts to extend the BFF function.\n\nModern.js collects the middleware in the api/_app.ts and passes it to the\nplugin, which injects the middleware into the runtime, for example:\n\n\n\nexport default hook(({ addMiddleware }) => {\n  addMiddleware(myMiddleware);\n});\n\n\nNOTE\n\nThe writing of middleware for different plugins is not the same, see Runtime\nFramework for details.\n\n\nFramework Mode#\n\nFramework writing is a way of using frame structure to extend BFF functions.\nCompared with function writing, although frame writing can use more frame\nstructure and make the entire BFF Server clearer in complex scenarios, it is\nalso more complex and requires more attention to the content at the framework\nlevel.\n\nIn the framework writing method, all BFF functions need to be written in the\napi/lambda/ directory, and the hook file _app.[tj]s cannot be used.\n\nIn most cases, the function writing method can cover the customization\nrequirements of most BFF functions. Only when your project server level logic is\nmore complex, the code needs to be layered, or you need to use more elements of\nthe framework, you need to use the framework writing method.\n\nNOTE\n\nThe directory structure of different plugin frameworks is not the same, see\nRuntime Frameworks for details.","frontmatter":{"sidebar_position":2,"title":"BFF Type"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/bff/type.mdx","_relativePath":"en/guides/advanced-features/bff/type.mdx"},{"id":199,"title":"Code Split","routePath":"/en/guides/advanced-features/code-split","lang":"en","toc":[{"text":"import","id":"import","depth":2,"charIndex":355},{"text":"React.lazy","id":"reactlazy","depth":2,"charIndex":544},{"text":"Loadable","id":"loadable","depth":2,"charIndex":1160}],"domain":"","content":"#\n\nCode splitting is a common way to optimize frontend resource loading. This\narticle will introduce the three types of code splitting supported by Modern.js:\n\nINFO\n\nWhen using Modern.js Conventional routing. By default, code splitting is done\naccording to the routing component, so you don't need to do it yourself.\n\n * import\n * React.lazy\n * loadable\n\n\nimport#\n\nuse dynamic import(), the JS modules pass to this API will be packaged as a\nseparate JS file, for example:\n\nimport('./math').then(math => {\n  console.log(math.add(16, 26));\n});\n\n\n\nReact.lazy#\n\nThe officially way provides by React to split component code.\n\nCAUTION\n\nReact.lazy is typically used in together with , hence it is only available in\nCSR or React 18 Streaming SSR.\n\nFor projects that use Traditional SSR（renderToString）, React.lazy is not\nsupported. Please use the Loadable API instead.\n\n\n\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\nconst AnotherComponent = React.lazy(() => import('./AnotherComponent'));\n\nfunction MyComponent() {\n  return (\n    \n\n      Loading...}>\n        \n\n          \n          \n        \n      \n    \n  );\n}\n\n\nFor details, see React lazy.\n\n\nLoadable#\n\nIn Modern.js, you can use the Loadable API, which is exported from\n@modern-js/runtime/loadable. Here's an example:\n\n\n\nconst OtherComponent = loadable(() => import('./OtherComponent'));\n\nfunction MyComponent() {\n  return ;\n}\n\n\nWith the out-of-the-box support of loadable in SSR by Modern.js, you no longer\nneed to add Babel plugins or inject scripts into HTML during SSR.\n\nHowever, it's important to note that any Loadable API in SSR does not support\nthe use of .\n\nINFO\n\nIf you want to use in CSR projects with React 17 and below, you can substitute\nReact.lazy with loadable.lazy.\n\nFor details, see Loadable API.","frontmatter":{"title":"Code Split","sidebar_position":6},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/code-split.mdx","_relativePath":"en/guides/advanced-features/code-split.mdx"},{"id":200,"title":"Browser Compatibility","routePath":"/en/guides/advanced-features/compatibility","lang":"en","toc":[{"text":"Browserslist Configuration","id":"browserslist-configuration","depth":2,"charIndex":3},{"text":"Browserslist","id":"browserslist","depth":2,"charIndex":463},{"text":"Polyfill","id":"polyfill","depth":2,"charIndex":1209},{"text":"Polyfill At Compile","id":"polyfill-at-compile","depth":3,"charIndex":1221},{"text":"Polyfill At Runtime","id":"polyfill-at-runtime","depth":3,"charIndex":1877}],"domain":"","content":"#\n\n\nBrowserslist Configuration#\n\nModern.js supports setting the browserslist for your web applications. You can\nset the Browserslist in the .browserslistrc file.\n\nWhen you create a new Modern.js project, it includes a .browserslistrc\nconfiguration by default, which means that JavaScript code will be compiled to\nES6.\n\nchrome >= 51\nedge >= 15\nfirefox >= 54\nsafari >= 10\nios_saf >= 10\n\n\nTIP\n\nPlease refer to Modern.js Builder - Browserslist for more information.\n\n\nBrowserslist#\n\nModern.js supports the browserslist field in the package.json file, or a\n.browserslistrc file to specify the target browser range covered by the project.\n\nThis value is used by ['@babel/preset-env']\n(https://babeljs.io/docs/en/babel-preset-env) and ['autoprefixer']\n(https://github.com/postcss/autoprefixer) to determine the JavaScript syntax\nfeatures to be converted and the CSS browser prefix to be added.\n\nThe default value in Modern.js as follow:\n\n['> 0.01%', 'not dead', 'not op_mini all'];\n\n\nYou can learn how to customize the browserslist here.\n\nSee Modern.js Builder docs to learn more Browserslist info.\n\nNOTE\n\nModern.js also supports configuring output.override Browserslist to override the\ndefault browserslist value.\n\n\nPolyfill#\n\n\nPolyfill At Compile#\n\nModern.js inject the Polyfill code via [core-js]\n(https://github.com/zloirock/core-js) at compile time by default.\n\nBy default, the required Polyfill code will be introduced according to the\nsettings of the Browserslist, so there is no need to worry about the Polyfill\nproblem of the project source code and third-party dependencies, but because it\ncontains some Polyfill code that is not used, the final bundle size may be\nincreased.\n\nINFO\n\nFor case where Polyfill is not required for third-party dependencies, you can\nset 'output.polyfill' to usage, so that Babel compiles only Polyfill code based\non the syntax used in the code.\n\n\nPolyfill At Runtime#\n\nModern.js also provides a runtime Polyfill solution based on browser UA\ninformation, which has the following advantages over Babel:\n\n * It will not be inserted into the code, reducing the code .\n * The same browser will share a Polyfill code. Therefore, with more and more\n   projects, the UA-based Polyfill code will be delivered faster and faster.\n\nexec pnpm run new to enable this features:\n\n? Please select the operation you want: Enable features\n? Please select the feature name: Enable UA-based Polyfill Feature\n\n\nAfter executing the command, register the Polyfill plugin in modern.config.ts:\n\n\n\nexport default defineConfig({\n  plugins: [..., polyfillPlugin()],\n});\n\n\nAfter configuring output.polyfill as ua and executing pnpm run build & & pnpm\nrun serve to start the server, visiting the page can see that the HTML product\ncontains the following script:\n\n\n\n\nVisit the page http://localhost:8080/__polyfill__ on Chrome 51 to see:\n\n\n\nCAUTION\n\nThis feature only works when using Modern.js built-in Web Server.\n\nIf you need to customize the HTML template, please refer to HTML Template.\nManually modifying the template through html.template / tools.html will cause\nthis feature not work.","frontmatter":{"sidebar_position":5},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/compatibility.mdx","_relativePath":"en/guides/advanced-features/compatibility.mdx"},{"id":201,"title":"ESLint","routePath":"/en/guides/advanced-features/eslint","lang":"en","toc":[{"text":"Q: How To Deal With Lint","id":"q:-how-to-deal-with-lint","depth":2,"charIndex":227},{"text":"Automatic Fix","id":"automatic-fix","depth":3,"charIndex":255},{"text":"Batch Automatic Fix","id":"batch-automatic-fix","depth":3,"charIndex":639},{"text":"Manual Fix","id":"manual-fix","depth":3,"charIndex":821},{"text":"Claim Exceptions","id":"claim-exceptions","depth":3,"charIndex":1037},{"text":"Q: How to customize ESLint rules","id":"q:-how-to-customize-eslint-rules","depth":2,"charIndex":2114},{"text":"The eslintConfig field in package.json in the root directory","id":"the-eslintconfig-field-in-packagejson-in-the-root-directory","depth":3,"charIndex":2150},{"text":"src/.eslintrc.js","id":"src/eslintrcjs","depth":3,"charIndex":2737},{"text":"eslintIgnore field in package.json","id":"eslintignore-field-in-packagejson","depth":3,"charIndex":3886},{"text":"Q: How to upgrade the version of the ESLint plugin","id":"q:-how-to-upgrade-the-version-of-the-eslint-plugin","depth":2,"charIndex":4183},{"text":"Q: WebStorm sometimes reports ESLint errors","id":"q:-webstorm-sometimes-reports-eslint-errors","depth":2,"charIndex":5197}],"domain":"","content":"#\n\nModern.js ESLint Rules is the full set of ESLint rules, includes @modern-js\n(Lint rules for Node.js projects) and @modern-js-app (Lint rules for web\nprojects).\n\nMore ESLint usage is described below with specific questions.\n\n\nQ: How To Deal With Lint#\n\n\nAutomatic Fix#\n\nMost problems will be solved by the automatic fix of ESLint rules or the code\nformatting of Prettier (which has been integrated into ESLint), and the\ndeveloper does not need to care about the details of the problem and how to\nsolve it.\n\nINFO\n\nThis kind of automatic fix is mainly performed when the IDE saves the file, and\na few will be automatically fix on submit.\n\n\nBatch Automatic Fix#\n\nIn rare cases, such as when an old project is migrated, the following commands\ncan be executed to repair and inspect all files in bulk:\n\npnpm run lint:error\n\n\n\nManual Fix#\n\nFor problems that cannot be automatically fixed, you can click the rule link in\nthe problem prompt box in the IDE to open the document of this rule to view the\nexplanation and solution of the problem.\n\n\nClaim Exceptions#\n\nAt this stage, some rules are not smart enough, and in most cases there will be\ngreat benefits, and in a few cases it may not apply. But if the entire rule is\nturned off or changed for these few cases, the gain is not worth the loss.\n\nIn this case, you can use the eslint-disable comment to mark the code blocks\nthat meet the rare case, stating that this is an exception and should be\nignored. For example:\n\n/* eslint-disable filenames/match-exported */\n...\n/* eslint-enable filenames/match-exported */\n\n\nINFO\n\nEnter eslint in the VS Code editor, a prompt box about eslint-disable will\nautomatically appear, select the prompt option to generate the corresponding\ncomment pair.\n\n[Modern.js ESLint Rule Set] requires that eslint-disable must be used in pairs,\nthe scope to be affected must be clearly expressed, and what rules to disable\nwithin this scope must be clearly expressed, the purpose is to make exceptions\nClear, minimized scope to avoid abuse of eslint-disable, resulting in code that\ndoes not belong to the exception being disabled by the rule.\n\n\nQ: How to customize ESLint rules#\n\n\nThe eslintConfig field in package.json in the root directory#\n\nThis place is the default ESLint configuration for the entire repository and is\ndesigned for pure Node.js code (which can only run in Node.js).\n\nIf the project does have special requirements or inevitable compatibility issues\nwith some rules (not exceptions), you can add rule configuration here. This\nconfiguration will take precedence over the default [Modern.js ESLint ruleset],\nsuch as:\n\n \"eslintConfig\": {\n    \"extends\": [\n      \"@modern-js\"\n    ],\n    \"rules\": {\n      \"filenames/match-exported\": \"off\"\n    }\n  },\n\n\n\n\nsrc/.eslintrc.js#\n\nThe application project and module project of Modern.js will have this\nconfiguration file by default in the source code directory, which is designed\nfor Universal JS code.\n\nINFO\n\nUniversal JS code is code that can run on both the browser side and the server\nside.\n\nIf the project does have special requirements or inevitable compatibility issues\nwith some rules (not exceptions), you can add a rule configuration here, which\nwill take precedence over the default [Modern.js ESLint ruleset], such as:\n\n// eslint-disable-next-line import/no-commonjs\nmodule.exports = {\n  root: true,\n  extends: ['@modern-js-app'],\n  parserOptions: {\n    tsconfigRootDir: __dirname,\n    project: ['../tsconfig.json'],\n  },\n  rules: {\n    'filenames/match-exported': 'off',\n  },\n};\n\n\nIf necessary, you can continue to add the .eslintrc.js file in different\nsubdirectories, and make special configuration for the code in this\nsubdirectory:\n\nmodule.exports = {\n  rules: {\n    'filenames/match-exported': 'off',\n  },\n};\n\n\nTIP\n\nNote: It is not necessary to use the extends field, it will automatically\ninherit the configuration of the parent directory.\n\n\neslintIgnore field in package.json#\n\nAdding directories that contain .js, .jsx, .ts, .tsx files, but do not require\ncode inspection and automatic repair, to eslintIgnore can optimize the speed of\nESLint inspection, such as:\n\n \"eslintIgnore\": [\n    \"node_modules\",\n    \"dist\",\n    \"output\"\n  ],\n\n\n\nQ: How to upgrade the version of the ESLint plugin#\n\nAs long as it is not a change in the Major version (the \"^\" symbol that does not\ncomply with the Semver rule), you can specify this dependency directly in the\npackage.json of the business project, delete the Lock file (or try to manually\ndelete the Lock file). the contents of this package name in the file), execute\npnpm install to reinstall the dependency and generate a new Lock file.\n\nAfter doing this, the plugin should only exist in the ./node_modules directory\nof the business project and be upgraded to the version you specified.\n\nTIP\n * Major version is the major version number. For more information, please read\n   [Semantic Versioning ].\n * All upstream projects encapsulated by Modern.js (such as ESLint, ESLint\n   plugin, React Router, etc.) can also be upgraded in this way.\n * Modern.js will also try to upgrade these upstream dependencies as timely as\n   possible in each release.\n * Major version upgrades need to be published by Modern.js.\n\n\nQ: WebStorm sometimes reports ESLint errors#\n\nSince WebStorm believes that the ESLint execution directory is determined based\non the .eslintrc' file. Therefore, the placement of the src/.eslintrc file\nlocation will cause the location specified by the tsconfig.json file (in the\nproject root directory) to not be found in the'src/'directory.\n\nyou need to configure it manually:\n\n--parser-options=project:../tsconfig.json\n\n\n","frontmatter":{"title":"ESLint","sidebar_position":8},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/eslint.mdx","_relativePath":"en/guides/advanced-features/eslint.mdx"},{"id":202,"title":"Low-Level Tools","routePath":"/en/guides/advanced-features/low-level","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":3},{"text":"Low-level Configuration Details","id":"low-level-configuration-details","depth":2,"charIndex":897}],"domain":"","content":"#\n\n\nUsage#\n\nModern.js internally integrates tools such as Babel, TypeScript, Webpack,\nPostCSS, Tailwind CSS by default.\n\nUsually, the default configuration can meet most development needs. When there\nare special needs, it can be achieved through the underlying configuration.\n\nTake configuring Webpack as an example, just add tools.webpack to the\nmodern.config.ts:\n\nexport default defineConfig({\n  tools: {\n    webpack: config => {},\n  },\n});\n\n\nConfigurations in the tools can be set to Object or Function.\n\nWhen the value is Object, it will be merged with the default configuration. For\nthe specific merging strategy, refer to the configuration options document (see\ntable below).\n\nWhen the value is Function, the first parameter is the default configuration\nvalue. You can directly modify this object without returning it, or you can\nreturn a new object or a merged object as the final result.\n\n\nLow-level Configuration Details#\n\nCurrently provided is as follows:\n\nTOOLS               CONFIG\nDevServer           tools.devServer\nBabel               tools.babel\nstyled-components   tools.styledComponents\nPostCSS             tools.postcss\nLess                tools.less\nSass                tools.sass\nwebpack             tools.webpack\nMinify CSS          tools.minifyCss\nterser              tools.terser\nTailwind CSS        tools.tailwind\nAutoprefixer        tools.autoprefixer","frontmatter":{"title":"Low-Level Tools","sidebar_position":11},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/low-level.mdx","_relativePath":"en/guides/advanced-features/low-level.mdx"},{"id":203,"title":"Using Rspack","routePath":"/en/guides/advanced-features/rspack-start","lang":"en","toc":[{"text":"Initializing an Rspack project","id":"initializing-an-rspack-project","depth":2,"charIndex":735},{"text":"Enable Rspack build","id":"enable-rspack-build","depth":2,"charIndex":1585},{"text":"Migrating configuration","id":"migrating-configuration","depth":2,"charIndex":1993},{"text":"The relationship between Rspack and Modern.js versions","id":"the-relationship-between-rspack-and-modernjs-versions","depth":2,"charIndex":2153},{"text":"Override the Built-in Rspack Version","id":"override-the-built-in-rspack-version","depth":3,"charIndex":2791}],"domain":"","content":"#\n\nWhat is Rspack\n\nRspack is a high performance JavaScript bundler based on Rust, with\ninteroperability with the webpack ecosystem, allowing it to be integrated into\nwebpack projects at a low cost while providing better build performance.\n\nCompared to webpack, Rspack has significantly improved build performance, thanks\nnot only to the language advantages brought by Rust, but also to its parallel\narchitecture and incremental compilation features. Benchmarking has shown that\nRspack can provide 5-10 times better compilation performance.\n\nModern.js provides out-of-the-box Rspack support, so you can switch between the\nstable Webpack and the faster Rspack.\n\nThis document will show you how to enable Rspack build mode in Modern.js.\n\n\nInitializing an Rspack project#\n\nThe Modern.js generator provides an interactive question-and-answer interface to\ninitialize a project. To create an Rspack project, simply select the Rspack\nbuild tool by running:\n\n$ npx @modern-js/create@latest myapp\n? Please select the type of project you want to create: Web App\n? Please select the programming language: TS\n? Please select the package manager: pnpm\n? Please select the bundler: Rspack\n\n\nAfter the project is created, you can experience the project by running pnpm run\ndev. For more project information, please refer to Quick Start.\n\nTIP\n\nWhen using Rspack as the bundler, the following Features are temporarily\nunavailable as some of the capabilities are still under development and we will\nprovide support in the future.\n\n * Storybook Devtool\n * The usage of useLoader in Client Side Rendering\n\n\nEnable Rspack build#\n\nYou can enable Rspack build by running pnpm run new:\n\n$ pnpm run new\n? Please select the operation you want: Enable features\n? Please select the feature name: Enable Rspack Build\n\n\nAfter executing the command, enable the Rspack build in modern.config.ts:\n\n\n\n+ export default defineConfig<'rspack'>({\n  plugins: [\n    appTools({\n+     bundler: 'experimental-rspack',\n    }),\n  ],\n});\n\n\n\nMigrating configuration#\n\nAfter enabling Rspack building capability, further configuration migration is\nneeded by referring to the Configuration Differences.\n\n\nThe relationship between Rspack and Modern.js versions#\n\nUsually, the latest version of Rspack will be integrated into Modern.js. You can\nupdate the Modern.js-related dependencies and built-in Rspack to the latest\nversion by using npx modern upgrade in your project.\n\nHowever, Modern.js uses a locked version dependency method (non-automatic\nupgrade) for Rspack. Due to differences in release cycles, the version of Rspack\nintegrated into Modern.js may be behind the latest version of Rspack.\n\nWhen Rspack is enabled for building through dev / build, the current version of\nRspack used in the framework will be printed automatically:\n\n\n\n\nOverride the Built-in Rspack Version#\n\nYou can override Rspack to a specific version using the capbilities provided by\npackage managers such as pnpm, yarn, npm.\n\nFor example, if you are using pnpm, you can update the Rspack version with\noverrides as shown below:\n\n{\n  \"pnpm\": {\n    \"overrides\": {\n      \"@rspack/core\": \"nightly\",\n      \"@rspack/dev-client\": \"nightly\",\n      \"@rspack/plugin-html\": \"nightly\"\n    }\n  }\n}\n\n\nWhat is Rspack Nightly Version\n\nThe Rspack nightly build fully replicates the full release build for catching\nerrors early.\n\nUsually it is available and any errors that arise will fixed promptly.\n\nHowever, if there are any break changes that require modern.js to modify the\ncode, we recommend to wait for the next version of modern.js.\n\nMore examples of using package management tools, please refer to: Lock nested\ndependency.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/rspack-start.mdx","_relativePath":"en/guides/advanced-features/rspack-start.mdx"},{"id":204,"title":"Static Site Generation","routePath":"/en/guides/advanced-features/ssg","lang":"en","toc":[{"text":"Conventional Routing","id":"conventional-routing","depth":3,"charIndex":534},{"text":"Self-controlled Routing","id":"self-controlled-routing","depth":3,"charIndex":2279}],"domain":"","content":"#\n\nStatic Site Generation is a solution for rendering complete static web pages at\nbuild time based on data and templates.\n\nFirst need to execute pnpm run new to enable the SSG features:\n\n? Please select the operation you want: Enable features\n? Please select the feature name: Enable SSG\n\n\nAfter execute script, register SSG plugin in modern.config.ts:\n\n\n\nexport default defineConfig({\n  output: {\n    ssg: true,\n  },\n  plugins: [..., ssgPlugin()],\n});\n\n\nSSG in Conventional Routing and Self-controlled Routing has different usage.\n\n\nConventional Routing#\n\nModern.js generate routes based on the file structure under the entry, so the\nframework can collect complete routing information.\n\nFor example, the following is a project directory structure using conventional\nrouting:\n\n.\n├── src\n│   └── routes\n│       ├── layout.tsx\n│       ├── page.tsx\n│       └── user\n│           ├── layout.tsx\n│           ├── page.tsx\n│           └── profile\n│               └── page.tsx\n\n\nThe above file directory will generate the following three routes:\n\n * /\n * /user\n * /user/profile\n\nNOTE\n\nIf you don't know the rules for routing, you can first check routes.\n\nadd component to src/routes/page.tsx:\n\nexport default () => {\n  return \nIndex Page;\n};\n\n\nSSG is also render in Node.js. So we can enable SSR in developmenet env, expose\ncode problems in advance and verify SSG rendering effect:\n\nexport default defineConfig({\n  server: {\n    ssr: process.env.NODE_ENV === 'development',\n  }\n}\n\n\nExecute the pnpm run dev command in the project to view the dist/ directory, and\nonly generate an HTML file main/index.html.\n\nExecute the pnpm run build command in the root path of the project. After the\nconstruction is completed, view the dist/ directory, and generate\nmain/index.html, main/user/index.html and main/user/profile/index.html three\nHTML files, the content corresponds to the above three routes.\n\nUsing Conventional Routing, each route will generate a HTML file. Looking at the\nmain/index.html, we can find the text content containing the Index Page, which\nis exactly the effect of SSG.\n\nAfter executing pnpm run serve to start the project, visit the page in the\nNetwork, view the document returned by the request. The document contains the\ncomplete page content rendered by the component.\n\n\nSelf-controlled Routing#\n\nSelf-controlled routing is a routing through component code, which requires the\napplication to run to obtain accurate routing information. Therefore, the SSG\nfunction cannot be used out of the box. At this time, the user needs to inform\nthe Modern.js framework in advance which routes need to enable the SSG.\n\nFor example, there is the following code, which contains multiple routes. When\nsetting output.ssg to true, only the entry route '/' will be rendered by\ndefault:\n\n\n\n\n\n\nconst Router = typeof window === 'undefined' ? StaticRouter : BrowserRouter;\n\nexport default () => {\n  const { context } = useRuntimeContext();\n  const pathname = context?.request?.pathname;\n  return (\n    \n      \n        index} />\n        about} />\n      \n    \n  );\n};\n\n\nIf we want to enable the SSG of /about at the same time, we can configure the\noutput.ssg to tell Modern.js to enable the SSG of the specified route.\n\nexport default defineConfig({\n  output: {\n    ssg: {\n      routes: ['/', '/about'],\n    },\n  },\n});\n\n\nrun pnpm run build and pnpm run serve, access http://localhost:8080/about. In\nthe Preview view, you can see that the page has been rendered.\n\nLooking at the bundle file, a new main/about/index.html file has been added in\nthe dist/ directory.\n\nINFO\n\nThe above only introduces the single entry, more related content can be viewed\nSSG API.","frontmatter":{"title":"Static Site Generation","sidebar_position":4},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/ssg.mdx","_relativePath":"en/guides/advanced-features/ssg.mdx"},{"id":205,"title":"Server-side rendering","routePath":"/en/guides/advanced-features/ssr","lang":"en","toc":[{"text":"SSR Data Fetch","id":"ssr-data-fetch","depth":2,"charIndex":431},{"text":"Keep Rendering Consistent","id":"keep-rendering-consistent","depth":2,"charIndex":1681},{"text":"Concerned Memory Leaks","id":"concerned-memory-leaks","depth":2,"charIndex":3456},{"text":"Crop SSR Data","id":"crop-ssr-data","depth":2,"charIndex":4734},{"text":"Serverless Pre-render","id":"serverless-pre-render","depth":2,"charIndex":5581},{"text":"Treeshaking","id":"treeshaking","depth":2,"charIndex":7697},{"text":"Use Environment Variables","id":"use-environment-variables","depth":3,"charIndex":8380},{"text":"Use File Suffix","id":"use-file-suffix","depth":3,"charIndex":9081},{"text":"Independent File","id":"independent-file","depth":3,"charIndex":10076},{"text":"Remote Request","id":"remote-request","depth":2,"charIndex":10686},{"text":"Streaming SSR","id":"streaming-ssr","depth":2,"charIndex":11409},{"text":"Return async data","id":"return-async-data","depth":3,"charIndex":12004},{"text":"Render async data","id":"render-async-data","depth":3,"charIndex":13273},{"text":"Error handling","id":"error-handling","depth":3,"charIndex":14810}],"domain":"","content":"#\n\nIn Modern.js, SSR also works out of the box. Developers do not need to write\ncomplex server level logic for SSR, nor do they need to care about the operation\nand maintenance of SSR, or create services. Modern.js have a comprehensive SSR\ndegradation strategy to ensure that pages can run safely.\n\nEnabling SSR is very easy, just set 'server.ssr' to true:\n\n\n\nexport default defineConfig({\n  \"server\": {\n    \"ssr\": true,\n  },\n})\n\n\n\nSSR Data Fetch#\n\nModern.js provides Data Loader, which is convenient for developers to fetch data\nunder SSR and CSR. Each routing module, such as layout.tsx and page.tsx, can\ndefine its own Data Loader:\n\nexport default () => {\n  return {\n    message: 'Hello World',\n  };\n};\n\n\nin the component, the data returned by the loader function can be get data\nthrough the Hooks API:\n\nexport default () => {\n  const data = useLoaderData();\n  return \n{data.message};\n};\n\n\nModern.js break the traditional SSR development model and provide users with a\nuser-friendly SSR development experience.\n\nAnd it provides elegant degradation processing. Once the SSR request fails, it\nwill automatically downgrade and restart the request on the browser side.\n\nHowever, developers still need to pay attention to the fallback of data, such as\nnull values or data returns that do not as expect. Avoid React rendering errors\nor messy rendering results when SSR.\n\nINFO\n\n 1. When you request the page on client-side page transitions, Modern.js sends\n    an API request to the server, which runs Data Loader function.\n\n 2. When using Data Loader, data fetching happens before rendering, Modern.js\n    still supports fetching data when the component is rendered. See Data Fetch.\n\n\nKeep Rendering Consistent#\n\nIn some businesses, it is usually necessary to display different UI displays\naccording to the current operating container environment characteristics, such\nas UA information.\n\nIf the processing is not careful enough, the rendering results may do not meet\nthe expectations at this time.\n\nHere is an example to show the problem when SSR and CSR rendering are\ninconsistent, add the following code to the component:\n\n{\n  typeof window !== 'undefined' ? \nbrowser content : null;\n}\n\n\nAfter starting the app, visit the page and will find that the browser console\nthrows a warning message:\n\nWarning: Expected server HTML to contain a matching \n in \n.\n\n\nThis is caused by the inconsistency between the rendering result and the SSR\nrendering result when React executes the hydrate logic on the client side.\nAlthough the page performs normally, in complex applications, it is likely to\ncause problems such as DOM hierarchy confusion and style confusion.\n\nINFO\n\nFor hydrate logic, please refer to here.\n\nApplications need to maintain the consistency of SSR and CSR rendering results.\nIf there are inconsistencies, it means that this part of the content does not\nneed to be rendered in SSR.\n\nModern.js provide for such content that does not need to be rendered in SSR:\n\n\n\n\nOutside of elements that do not require SSR, wrap with a NoSSR component:\n\n\n  \nclient content\n\n\n\nAfter modifying the code, refresh page found that the previous Waring\ndisappeared. Open the Network window of the browser developer tool to see that\nthe returned HTML document does not contain the content of the NoSSR component\npackage.\n\nINFO\n\n'useRuntimeContext' can get complete request information, which can be used to\nensure that the rendering results of SSR and CSR are consistent.\n\n\nConcerned Memory Leaks#\n\nWARNING\n\nIn the SSR, developers need to pay special attention to the problem of memory\nleaks. Even small memory leaks can affect services..\n\nIn SSR, every request triggers the component rendering. So, you need to avoid\ndefining any potentially growing global data, or subscribing to events globally,\nor creating streams that will not be destroyed.\n\nFor example, the following code, when using redux-observable, developers used to\ncode like this:\n\n\n\nconst epicMiddleware = createEpicMiddleware();\nconst rootEpic = combineEpics();\n\nexport default function Test() {\n  epicMiddleware.run(rootEpic);\n  return \nHello Modern.js;\n}\n\n\nCreate a Middleware instance epicMiddleware outside the component and call\nepicMiddleware.run inside the component.\n\nOn the browser side, this code does not cause any problems. But in SSR, the\nMiddleware instance will never be destroyed. Every time the component is\nrendered and rootEpic is called, new event bindings are added internally,\ncausing the entire object to continue to grow larger, which ultimately affects\napplication performance.\n\nSuch problems in CSR are not easy to detect, so when switching from CSR to SSR,\nif you are not sure whether the application has such hidden dangers, you can\npress the application.\n\n\nCrop SSR Data#\n\nIn order to keep the data requested in the SSR phase, it can be used directly on\nthe browser side, Modern.js inject the data and state that collected during the\nrendering process into the HTML.\n\nAs a result, CSR applications often have a large amount of interface data and\nthe state of the components is not crop. If SSR is used directly, the rendered\nHTML size may be too large.\n\nAt this time, SSR not only cannot bring an improvement in the user experience,\nbut may have the opposite effect.\n\nTherefore, when using SSR, developers need to do reasonable weight loss for the\napplication:\n\n 1. Pay attention to the first screen, you can only request the data needed for\n    the first screen in SSR, and render the rest on the browser side.\n 2. Removes the data independent with render from the data returned by the\n    interface.\n\n\nServerless Pre-render#\n\nModern.js provide Serverless Pre-rendering(SPR) to improve SSR performance.\n\nSPR uses pre-rendering and caching to provide the responsive performance of\nstatic Web for SSR pages. It allows SSR applications to have the responsiveness\nand stability of static Web pages, while keeping data dynamically updated.\n\nUsing SPR in the Modern.js is very simple, just add the component, and the page\nwhere the component is located will automatically open SPR.\n\nThis mock a component that uses the useLoaderData API, and the request in the\nData Loader takes 2s.\n\n\n\nexport const loader = async () => {\n  await new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(null);\n    }, 2000);\n  });\n\n  return {\n    message: 'Hello Modern.js',\n  };\n};\n\nexport default () => {\n  const data = useLoaderData();\n  return \n{data?.message};\n};\n\n\nAfter executing the dev command and opening the page, it is obvious that the\npage needs to wait 2s before returning.\n\nThe next is to use the component, which can be exported directly from\n@modern-js/runtime/ssr :\n\n\n\n\nUse the PreRender component in the routing component and set the parameter\ninterval to indicate that the expiration time of the rendering result is 5s:\n\n\n\n\nAfter modification, execute pnpm run build && pnpm run serve to start the\napplication and open the page.\n\nWhen open page for the first time, it is no different from the previous\nrendering, and there is also a 2s delay.\n\nRefresh page, and the page opens instantly, but at this time, the page data has\nnot changed due to the refresh, because the cache has not expired.\n\nWait 5s, refresh the page again, the data of the page is still unchanged.\nRefresh the page again The data changes, but the page still responds almost\ninstantaneously.\n\nThis is because in the previous request, the SPR has asynchronously obtained the\nnew rendering result in the background, and the page requested this time is the\nversion that has been cached in the server.\n\nIt is conceivable that when interval is set to 1, users can have the responsive\nexperience of a static page.\n\nINFO\n\nFor more detail, see .\n\n\nTreeshaking#\n\nWhen SSR is enabled, Modern.js will use the same entry to build both the SSR\nBundle and the CSR Bundle. Therefore, the Web API in the SSR Bundle, or the Node\nAPI in the CSR Bundle, can lead to runtime errors.\n\nWeb API into a component is usually to do some global listening, or to get\nbrowser-related data, such as:\n\ndocument.addEventListener('load', () => {\n  console.log('document load');\n});\nconst App = () => {\n  return \nHello World;\n};\nexport default App;\n\n\nThe Node API is introduced in the component file, usually because of the use of\nData Loader, for example:\n\n\nexport default () => {\n  const file = fse.readFileSync('./myfile');\n  return {\n    ...\n  };\n};\n\n\n\nUse Environment Variables#\n\nFor the first case, we can directly use Modern.js built-in environment variables\nMODERN_TARGET to remove useless code at build time:\n\nif (process.env.MODERN_TARGET === 'browser') {\n  document.addEventListener('load', () => {\n    console.log('document load');\n  });\n}\n\n\nAfter packaging in the development environment, SSR and CSR artifacts will be\ncompiled into the following content. Therefore, there will be no more errors due\nto Web API in the SSR environment:\n\n// SSR production\nif (false) {\n}\n\n// CSR production\nif (true) {\n  document.addEventListener('load', () => {\n    console.log('document load');\n  });\n}\n\n\nNOTE\n\nFor more information, see environment variables.\n\n\nUse File Suffix#\n\nHowever, in the second case, for example, when fs-extra is imported into the\ncode, it internally uses the Node API with side effects. If it is directly\nreferenced in the component, it will cause CSR loading errors.\n\nEnv vars is not effective in this situation. Modern.js also supports\ndistinguishing SSR Bundle and CSR Bundle packaging files through files with the\n.node. suffix.\n\nFor example, the import of fs-extra in the code, when it is directly referenced\nto the component, will cause the CSR to load an error. You can create .ts and\n.node.ts files of the same name as a layer of proxy:\n\nexport const readFileSync: any = () => {};\n\n\nexport { readFileSync } from 'fs-extra';\n\n\nuse ./compat directly into the file. At this time, files with the .node.ts\nsuffix will be used first in the SSR environment, and files with the .ts suffix\nwill be used in the CSR environment.\n\n\n\nexport const loader = () => {\n  const file = readFileSync('./myfile');\n  return {\n    ...\n  };\n};\n\n\n\nIndependent File#\n\nBoth of the above methods can bring some mental burden to developers. In real\nbusiness scenarios, we found that most of the mixed Node/Web code occurs in data\nrequests.\n\nTherefore, Modern.js developed a Data Fetch to separate CSR and SSR code based\non Nested Routing.\n\nWe can separate data request and component code by using independent files.\nWrite component logic in routes/page.tsx and data request logic in\nroutes/page.loader.ts.\n\nexport default Page = () => {\n  return \nHello World\n\n}\n\n\n\nexport default () => {\n  const file = fse.readFileSync('./myfile');\n  return {\n    ...\n  };\n}\n\n\n\nRemote Request#\n\nWhen initiating remote requests in SSR, developers sometimes use request tools.\nSome interfaces need to pass user cookies, which developers can get through the\n'useRuntimeContext' API to achieve.\n\nIt should be noted, the request header of the HTML request is obtained, which\nmay not be applicable to remote requests, so must not pass through all request\nheaders.\n\nIn addition, some backend interfaces, or general gateways, will verify according\nto the information in the request header, and full pass-through is prone to\nvarious problems that are difficult to debug. It is recommended that\npass-through on demand.\n\nBe sure to filter the host field if you really need to pass through all request\nheaders.\n\n\nStreaming SSR#\n\nModern.js supports streaming rendering in React 18. Opt in it with the following\nconfiguration:\n\n\n\nexport default defineConfig({\n  \"server\": {\n    \"ssr\": {\n      \"mode\": \"stream\",\n    },\n  },\n})\n\n\nThe streaming SSR of Modern.js is implemented based on React Router, and the\nmain APIs involved are:\n\n * defer: This utility allows you to defer values returned from loaders by\n   passing promises instead of resolved values.\n\n * Await: Used to render deferred values with automatic error handling.\n\n * useAsyncValue: Returns the resolved data from the nearest ancestor component.\n\n\nReturn async data#\n\n\n\ninterface User {\n  name: string;\n  age: number;\n}\n\nexport interface Data {\n  data: User;\n}\n\nexport default ({ params }: LoaderFunctionArgs) => {\n  const userId = params.id;\n\n  const user = new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        name: `user-${userId}`,\n        age: 18,\n      });\n    }, 200);\n  });\n\n  return defer({ data: user });\n};\n\n\n\nuser is of Promise type, which means the data will be obtained asynchronously.\nNote that defer must accept an object type parameter, therefore, the parameter\npassed to defer is {data: user}.\n\ndefer can also receive asynchronous data and synchronous data at the same time.\nFor example:\n\n\n// skip some codes\n\nexport default ({ params }: LoaderFunctionArgs) => {\n  const userId = params.id;\n\n  const user = new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        name: `user-${userId}`,\n        age: 18,\n      });\n    }, 200);\n  });\n\n  const otherData = new Promise(resolve => {\n    setTimeout(() => {\n      resolve('some sync data');\n    }, 200);\n  });\n\n  return defer({\n    data: user,\n    other: await otherData\n  });\n};\n\n\n\nawait is added before otherData, so the data is obtained synchronously. It can\nbe passed to defer with the data user at the same time.\n\n\nRender async data#\n\nUse the Await component to render the data returned asynchronously from the Data\nLoader. For example:\n\n\n\n\n\nconst Page = () => {\n  const data = useLoaderData() as Data;\n\n  return (\n    \n\n      User info:\n      loading user data ...}>\n        \n          {(user) => {\n            return (\n              \n\n                name: {user.name}, age: {user.age}\n              \n            );\n          }}\n        \n      \n    \n  );\n};\n\nexport default Page;\n\n\nAwait needs to be wrapped inside the Suspense component. The resolve of Await\npasses in the data acquired asynchronously by the Data Loader. When the data\nacquisition is completed, the obtained data is rendered through the Render Props\nmode. When the data acquisition is in pending status, the content set by the\nfallback property of the Suspense component will display.\n\nWarning\n\nWhen importing a type from a Data Loader file, you need to use the import type\nsyntax to ensure that only type information is imported, which can prevent the\nData Loader code from being packaged into the client bundle.\n\nSo, here we `;\n\nYou can also get the asynchronous data returned by Data Loader through\nuseAsyncValue. For example:\n\n\n\n// skip some codes\n\nconst UserInfo = () => {\n  const user = useAsyncValue();\n\n  return (\n     \n\n      name: {user.name}, age: {user.age}\n    \n  )\n}\n\nconst Page = () => {\n  const data = useLoaderData() as Data;\n\n  return (\n    \n\n      User info:\n      loading user data ...}>\n        \n          \n        \n      \n    \n  );\n};\n\nexport default Page;\n\n\n\nError handling#\n\nThe errorElement property of the Await component can be used to handle errors\nthrown when the Data Loader executes or when a child component renders. For\nexample, we intentionally throw an error in the Data Loader function:\n\n\n\nexport default () => {\n  const data = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error('error occurs'));\n    }, 200);\n  });\n\n  return defer({ data });\n};\n\n\nThen use useAsyncError to get the error, and assign the component used to render\nthe error to the errorElement property of the Await component:\n\n\n\n\nexport default function Page() {\n  const data = useLoaderData();\n\n  return (\n    \n\n      Error page\n      loading ...}>\n        }>\n          {(data: any) => {\n            return \nnever displayed;\n          }}\n        \n      \n    \n  );\n}\n\nfunction ErrorElement() {\n  const error = useAsyncError() as Error;\n  return \n\nSomething went wrong! {error.message};\n}\n\n\nMore\n 1. Deferred Data\n 2. New Suspense SSR Architecture in React 18","frontmatter":{"title":"Server-side rendering","sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/ssr.mdx","_relativePath":"en/guides/advanced-features/ssr.mdx"},{"id":206,"title":"Testing","routePath":"/en/guides/advanced-features/testing","lang":"en","toc":[{"text":"Test file","id":"test-file","depth":2,"charIndex":579},{"text":"Usage","id":"usage","depth":2,"charIndex":784},{"text":"transform","id":"transform","depth":2,"charIndex":958}],"domain":"","content":"#\n\nModern.js integrates the testing capabilities of Jest by default.\n\nFirst need to execute pnpm run new to enable [unit test/integration test]\nfeatures:\n\n? Please select the operation you want: Enable features\n? Please select the feature name: Enable Unit Test / Integration Test\n\n\nAfter executing the above command, the \"test\": \"modern test\" command will be\nadded in package.json automatically.\n\nAfter registering the @modern-js/plugin-testing plugin in modern.config.ts, you\ncan use the testing features:\n\n\n\nexport default defineConfig({\n  plugins: [..., testPlugin()],\n});\n\n\n\nTest file#\n\nModern.js default recognized test file paths are: /src/**/*.test.[jt]s?(x) and\n/tests/**/*.test.[jt]s?(x).\n\nIf you need to customize the test directory, you can configure it with\ntools.jest.\n\n\nUsage#\n\nModern.js test support testing-library. API can be imported from\n@modern-js/runtime/testing.\n\n\n\n\nOther testing APIs supported by Modern.js can be referred to here.\n\n\ntransform#\n\nBy default, Modern.js testing uses babel-jest for source code compilation. If\nyou need to use ts-jest, you can configure it through testing.transform.","frontmatter":{"sidebar_position":10,"title":"Testing"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/testing.mdx","_relativePath":"en/guides/advanced-features/testing.mdx"},{"id":207,"title":"Custom Web Server","routePath":"/en/guides/advanced-features/web-server","lang":"en","toc":[{"text":"Extending Web Server with API","id":"extending-web-server-with-api","depth":2,"charIndex":1160},{"text":"Hook","id":"hook","depth":3,"charIndex":2451},{"text":"Middleware","id":"middleware","depth":3,"charIndex":3118},{"text":"Managed Page Requests with BFF","id":"managed-page-requests-with-bff","depth":2,"charIndex":4331},{"text":"Fully Customized Web Server","id":"fully-customized-web-server","depth":2,"charIndex":5236}],"domain":"","content":"#\n\nAs a client-centric development framework, Modern.js has limited customization\ncapabilities on the server side. However, in some development scenarios, special\nserver-level logic needs to be customized, such as user authentication, request\npreprocessing, and adding page rendering skeletons.\n\nSome developers may be wondering, Modern.js already provides BFF, why you need\nCustom Web Server.\n\nThe reason is that by default, page routing does not go through BFF, it has no\nway to provide server-side custom logic for page access. The reason for this\ndesign is that we do not want the service that controls the page to be bound to\nthe BFF service, this is to avoid the BFF framework restricting how the page is\ndeployed.\n\nFor example, hosting pages separately from BFF, deploying page services to\nnon-Node environments, customizing for deployment platforms, etc.\n\nFor the above reasons, Modern.js provides three ways that projects can customize\nserver-level capabilities progressively according to their needs.\n\nWARNING\n\nThe three extension methods cannot work at the same time, and developers need to\nchoose the appropriate method according to the scenario.\n\n\nExtending Web Server with API#\n\nThe first way is to customize the server-side at a specific lifecycle through\nthe server-side runtime API provided by Modern.js. The purpose of providing this\nway is that in some cases, developers do not need to control the full Web\nServer, but only need to add server-level logic.\n\nBecause the full web server cannot be controlled this way, and the extension\nlogic only takes effect when the page is requested. Therefore, it is relatively\nsimple to apply server-level logic, and you do not want to create additional\nBFFs or BFFs and pages without common server-level logic scenarios.\n\nYou can run the'pnpm run new 'command in the project root directory to enable\nthe \"Custom Web Serve\" function:\n\n? Please select the operation you want: Create Element\n? Please select the type of element to create: New \"Custom Web Server\" source code directory\n\n\nAfter executing the command, register the @modern-js/plugin-server plugin in\nmodern.config.ts:\n\n\n\nexport default defineConfig({\n  plugins: [..., serverPlugin()],\n});\n\n\nAfter the function is turned on, the server/index.ts file will be automatically\ncreated in the project directory, and custom logic can be written in this file.\nModern.js provides two types of APIs, Hook and Middleware, to extend Web Server.\n\n\nHook#\n\nThe Hook provided by Modern.js is used to control the built-in logic in the Web\nServer, and all page requests go through the Hook.\n\nCurrently, two Hooks are provided: AfterMatch and AfterRender, which can be used\nto modify the rendering results. It can be written in server/index.ts as\nfollows:\n\n\n\nexport const afterMatch: AfterMatchHook = (ctx, next) => {\n  next();\n}\n\nexport const afterRender: AfterRenderHook = (ctx, next) => {\n  next();\n}\n\n\nProjects should follow these best practices when using Hook:\n\n 1. Authentication in afterMatch.\n 2. Do Rewrite and Redirect in afterMatch.\n 3. Inject HTML content in afterRender.\n\nNOTE\n\nFor more detail, see Hook.\n\n\nMiddleware#\n\nFor some projects, there may be more requirements at the server level, Modern.js\nprovides Middleware to add pre-middleware for Web Server. It can only run in a\nNode environment, so if the project is deployed to another environment, such as\na Worker environment, Middleware cannot be used.\n\nModern.js provides a set of APIs by default for projects to use:\n\n\n\nexport const middleware: Middlewre = (context, next) => {\n  const { source: { req, res } } = context;\n  console.log(req.url);\n  next();\n};\n\n\nNOTE\n\nFor more detail, see [Middleware] (/apis/app/runtime/web-server/middleware).\n\nProjects should follow these best practices when using Middleware:\n\n 1. In Middleware, you can directly operate origin request and response objects,\n    do event tracking, and inject Node services (databases, Redis, etc.) that\n    may be used for SSR rendering.\n 2. Operations such as marking and crawler optimization can be done in\n    Middleware.\n 3. In Middleware, you can ignore the default rendering and customize the\n    rendering process.\n\nIn general, in CSR projects, using Hook can basically meet all the needs of\nsimple scenarios. In SSR projects, Middleware can be used for more complex Node\nextensions.\n\n\nManaged Page Requests with BFF#\n\nThe second way is to use BFF to Managed page rendering. In this way, all\nrequests will first hit the BFF service.\n\nThis method can uniformly control the server-level logic of all requests through\nBFF. Therefore, it is suitable for scenarios where the server-level logic is\ncomplex, and BFF and pages need common server-level logic. But it still relies\non the Web Server of Modern.js as a whole, and cannot run the logic on existing\nservices.\n\nTo use this method, we first need to enable the \"BFF\" function through pnpm new.\nThen add bff.enableHandleWeb configuration in the configuration file:\n\nexport default defineConfig({\n  bff: {\n    enableHandleWeb: true,\n  },\n});\n\n\nWhen this value is set to true, page request traffic also goes through the BFF,\nand the logic built into Modern.js for page rendering defaults to running as the\nlast middleware for the BFF service.\n\n\nFully Customized Web Server#\n\nNOTE\n\nComming soon..","frontmatter":{"title":"Custom Web Server","sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/advanced-features/web-server.mdx","_relativePath":"en/guides/advanced-features/web-server.mdx"},{"id":208,"title":"Alias","routePath":"/en/guides/basic-features/alias","lang":"en","toc":[],"domain":"","content":"#\n\nModern.js allows you to use alias to import modules from custom directories in\nJS and CSS, and comes with the following built-in alias:\n\n{\n  '@': '/src',\n  '@shared': '/shared',\n}\n\n\nINFO\n\nWhen enabling optional features, the new command will also dynamically add\nbuilt-in alias specific to the features. For example, when enabling BFF, the\n@api alias is added by default.\n\nFor example, importing modules from the src/common directory in the src/App.tsx\nfile:\n\n.\n├── common\n│   ├── styles\n│   │   └── base.css\n│   └── utils\n│       └── index.ts\n└── App.tsx\n\n\nThe code in src/App.tsx is as follows:\n\n\nimport '@/src/common/styles/base.css';\n\n\nModern.js also provides a way to customize alias. For example, adding the\n@common alias is as follows:\n\nFor TypeScript projects, just set compilerOptions.paths in the project's\ntsconfig.json:\n\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/*\": [\"./src/*\"],\n      \"@/common/*\": [\"./src/common/*\"]\n    }\n  }\n}\n\n\nFor JavaScript projects, set source.alias in modern.config.js:\n\nexport default defineConfig({\n  source: {\n    alias: {\n      '@common': './src/common',\n    },\n  },\n});\n\n\nFor the specific usage of alias configuration, please refer to the source.alias\ndocumentation.","frontmatter":{"title":"Alias","sidebar_position":8},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/basic-features/alias.mdx","_relativePath":"en/guides/basic-features/alias.mdx"},{"id":209,"title":"CSS Solutions","routePath":"/en/guides/basic-features/css","lang":"en","toc":[{"text":"Using Less, Sass and Stylus","id":"using-less,-sass-and-stylus","depth":2,"charIndex":166},{"text":"Using PostCSS","id":"using-postcss","depth":2,"charIndex":598},{"text":"Using CSS Modules","id":"using-css-modules","depth":2,"charIndex":741},{"text":"Using CSS-in-JS","id":"using-css-in-js","depth":2,"charIndex":855},{"text":"Using Tailwind CSS","id":"using-tailwind-css","depth":2,"charIndex":2145},{"text":"Tailwind CSS Version","id":"tailwind-css-version","depth":3,"charIndex":3367},{"text":"Browser Compatibility","id":"browser-compatibility","depth":3,"charIndex":3926},{"text":"Theme Configuration","id":"theme-configuration","depth":3,"charIndex":4207}],"domain":"","content":"#\n\nModern.js has built-in a variety of commonly used CSS solutions, including Less\n/ Sass / Stylus preprocessors, PostCSS, CSS Modules, CSS-in-JS, and Tailwind\nCSS.\n\n\nUsing Less, Sass and Stylus#\n\nModern.js has built-in popular community CSS preprocessors, including Less and\nSass.\n\nBy default, you don't need to configure Less and Sass. If you have custom loader\nconfiguration requirements, you can set them up by configuring tools.less and\ntools.sass.\n\nYou can also use Stylus in Modern.js by installing the Stylus plugin provided by\nModern.js Builder. For usage, please refer to Stylus Plugin.\n\n\nUsing PostCSS#\n\nModern.js has built-in PostCSS to transform CSS code.\n\nPlease refer to Modern.js Builder - Using PostCSS for detailed usage.\n\n\nUsing CSS Modules#\n\nPlease read the Using CSS Modules section to learn about the complete usage of\nCSS Modules.\n\n\nUsing CSS-in-JS#\n\nCSS-in-JS is a technique that allows you to write CSS styles in JS files.\n\nModern.js integrates the popular CSS-in-JS implementation library\nstyled-components, which uses the new JavaScript feature Tagged template to\nwrite component CSS styles. You can directly import the API of styled-components\nfrom @modern-js/runtime/styled for use.\n\nWhen you need to write a div component with an internal font color of red, you\ncan implement it as follows:\n\n\n\nconst RedDiv = styled.div`\n  color: red;\n`;\n\n\nIf you need to dynamically set component styles based on the component's props,\nfor example, the primary property of props is true, the button color is white,\notherwise it is red, you can implement the code as follows:\n\n\n\nconst Button = styled.button`\n  color: ${props => (props.primary ? 'white' : 'red')};\n  font-size: 1em;\n`;\n\n\nFor more usage of styled-components, please refer to styled-components official\nwebsite.\n\nModern.js integrates Babel's babel-plugin-styled-components plugin internally,\nand you can configure the plugin through tools.styledComponents.\n\nTIP\n\nIf you need to use other CSS-in-JS libraries such as styled-jsx and Emotion, you\nneed to install the corresponding dependencies first. For specific usage, please\nrefer to the library's official website.\n\n\nUsing Tailwind CSS#\n\nTailwind CSS is a CSS framework and design system based on Utility Class, which\ncan quickly add common styles to components, and support flexible extension of\ntheme styles. To use Tailwind CSS in Modern.js, simply run pnpm run new in the\nproject root directory and enable it.\n\nFollow the steps below to make a selection:\n\n? Please select the operation you want: Enable features\n? Please select the feature name: Enable Tailwind CSS\n\n\nRegister the Tailwind plugin in modern.config.ts:\n\n\n\nexport default defineConfig({\n  plugins: [..., tailwindcssPlugin()],\n});\n\n\nTo use, add the following code to the root component (such as src/App.jsx) of\nthe entry:\n\nimport 'tailwindcss/base.css';\nimport 'tailwindcss/components.css';\nimport 'tailwindcss/utilities.css';\n\n\nThen you can use the Utility Class provided by Tailwind CSS in each component:\n\nconst App = () => (\n  \n\n    \n\nhello world\n  \n);\n\n\nAdditional Information\n\nDepending on your needs, you can selectively import the CSS files provided by\nTailwind CSS. Since using @tailwind is equivalent to directly importing CSS\nfiles, you can refer to the comments in the @tailwind usage documentation for\nthe purpose of the CSS files provided by Tailwind CSS.\n\n\nTailwind CSS Version#\n\nModern.js supports both Tailwind CSS v2 and v3 versions, and the framework will\nrecognize the version of the tailwindcss dependency in the project package.json\nfile and enable the corresponding configuration. By default, we will install\nTailwind CSS v3 version for you.\n\nIf your project is still using Tailwind CSS v2, we recommend that you upgrade to\nv3 to support JIT and other capabilities. For the differences between Tailwind\nCSS v2 and v3 versions, please refer to the following articles:\n\n * Tailwind CSS v3.0\n * Upgrade Guide\n\n\nBrowser Compatibility#\n\nTailwind CSS v2 and v3 do not support the IE 11 browser, please refer to:\n\n * Tailwind CSS v3 - Browser Support.\n * Tailwind CSS v2 - Browser Support\n\nIf you use Tailwind CSS on IE 11 browser, some styles may not be available,\nplease use it with caution.\n\n\nTheme Configuration#\n\nWhen you need to customize the theme configuration of Tailwind CSS, you can\nmodify it in the source.designSystem configuration. For example, adding a\nprimary color theme:\n\nexport default defineConfig({\n  source: {\n    designSystem: {\n      extend: {\n        colors: {\n          primary: '#5c6ac4',\n        },\n      },\n    },\n  },\n});\n\n\nWhen you need to make other special configurations to Tailwind CSS besides\ntheme, you can configure them in tools.tailwindcss, such as setting variants:\n\nexport default defineConfig({\n  tools: {\n    tailwindcss: {\n      variants: {\n        extend: {\n          backgroundColor: ['active'],\n        },\n      },\n    },\n  },\n});\n\n\n> When you configure Tailwind CSS for your project, the combination of\n> source.designSystem and tools.tailwindcss configurations is equivalent to\n> configuring a tailwindcss.config.js file separately. source.designSystem is\n> equivalent to the Tailwind CSS theme configuration.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/basic-features/css.mdx","_relativePath":"en/guides/basic-features/css.mdx"},{"id":210,"title":"Data Fetching","routePath":"/en/guides/basic-features/data-fetch","lang":"en","toc":[{"text":"Data Loader (Recommended)","id":"data-loader-(recommended)","depth":2,"charIndex":319},{"text":"Basic Example","id":"basic-example","depth":3,"charIndex":866},{"text":"The loader Function","id":"the-loader-function","depth":3,"charIndex":2777},{"text":"params","id":"params","depth":4,"charIndex":2846},{"text":"request","id":"request","depth":4,"charIndex":3308},{"text":"Return Value","id":"return-value","depth":4,"charIndex":3636},{"text":"Request API","id":"request-api","depth":3,"charIndex":4246},{"text":"Error Handling","id":"error-handling","depth":3,"charIndex":4600},{"text":"Get data from parent component","id":"get-data-from-parent-component","depth":3,"charIndex":5297},{"text":"(WIP)Loading UI","id":"(wip)loading-ui","depth":3,"charIndex":6678},{"text":"Incorrect usage","id":"incorrect-usage","depth":3,"charIndex":7692},{"text":"FAQ","id":"faq","depth":3,"charIndex":9498},{"text":"useLoader (old version)","id":"useloader-(old-version)","depth":2,"charIndex":9923}],"domain":"","content":"#\n\nModern.js provides out-of-the-box data fetching capabilities, allowing\ndevelopers to develop in an isomorphic way in both client-side and server-side\ncode.\n\nIt should be noted that these APIs do not help applications initiate requests,\nbut rather help developers better manage data and improve project performance.\n\n\nData Loader (Recommended)#\n\nModern.js recommends using conventional routing for routing management. Through\nModern.js's conventional (nested) routing, each routing component (layout.ts or\npage.ts) can have a same-named loader file. The loader file needs to export a\nfunction that will be executed before the component is rendered to provide data\nfor the routing component.\n\nINFO\n\nModern.js v1 supports fetching data via useLoader, which is no longer the\nrecommended usage. We do not recommend mixing the two except during the\nmigration process.\n\n\nBasic Example#\n\nRouting components such as layout.ts or page.ts can define a same-named loader\nfile. The function exported by the loader file provides the data required by the\ncomponent, and then the data is obtained in the routing component through the\nuseLoaderData function, as shown in the following example:\n\n.\n└── routes\n    ├── layout.tsx\n    └── user\n        ├── layout.tsx\n        ├── layout.loader.ts\n        ├── page.tsx\n        └── page.loader.ts\n\n\nDefine the following code in the file:\n\n\n\n\nexport default function UserPage() {\n  const profileData = useLoaderData() as ProfileData;\n  return \n{profileData};\n}\n\n\nexport type ProfileData = {\n  /*  some types */\n};\n\nexport default async (): Promise => {\n  const res = await fetch('https://api/user/profile');\n  return await res.json();\n};\n\n\nCAUTION\n\nHere, routing components and loader files share a type, so the import type\nsyntax should be used.\n\nIn the CSR environment, the loader function is executed on the client and can\nuse browser APIs (although it is not necessary and not recommended).\n\nIn the SSR environment, whether it is the first screen or client navigation, the\nloader function will only be executed on the server, and any Node.js API can be\ncalled here. Also, any dependencies and code used here will not be included in\nthe client's bundle.\n\nINFO\n\nIn future versions, Modern.js may support running the loader function on the\nserver in the CSR environment to improve performance and security. Therefore, it\nis recommended to ensure that the loader function is as pure as possible and\nonly used for data fetching scenarios.\n\nWhen navigating on the client based on Modern.js's conventional routing, all\nloader functions will be executed in parallel (requested). That is, when\naccessing /user/profile, the loader functions under /user and /user/profile will\nbe executed in parallel (requested) to improve the performance of the client.\n\n\nThe loader Function#\n\nThe loader function has two input parameters:\n\nparams#\n\nWhen the route file is accessed through [], it is used as dynamic routing, and\nthe dynamic routing fragment is passed as a parameter to the loader function:\n\n// routes/user/[id]/page.loader.tsx\n\n\nexport default async ({ params }: LoaderFunctionArgs) => {\n  const { id } = params;\n  const res = await fetch(`https://api/user/${id}`);\n  return res.json();\n};\n\n\nWhen accessing /user/123, the parameter of the loader function is { params: {\nid: '123' } }.\n\nrequest#\n\nrequest is a Fetch Request instance.\n\nA common usage scenario is to get query parameters through request:\n\n// routes/user/[id]/page.loader.ts\n\n\nexport default async ({ request }: LoaderFunctionArgs) => {\n  const url = new URL(request.url);\n  const userId = url.searchParams.get('id');\n  return queryUser(userId);\n};\n\n\nReturn Value#\n\nThe return value of the loader function can be any serializable content or a\nFetch Response instance:\n\nconst loader = async (): Promise => {\n  return {\n    message: 'hello world',\n  };\n};\nexport default loader;\n\n\nBy default, the Content-type of the response returned by the loader is\napplication/json, and the status is 200. You can customize the Response to set\nit:\n\nconst loader = async (): Promise => {\n  const data = { message: 'hello world' };\n  return new Response(JSON.stringify(data), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json; utf-8',\n    },\n  });\n};\n\n\n\nRequest API#\n\nModern.js provides a polyfill for the fetch API to make requests. This API is\nconsistent with the browser's fetch API, but can also be used to make requests\non the server. This means that whether it is CSR or SSR, a unified fetch API can\nbe used to get data:\n\nfunction loader() {\n  const res = await fetch('https://api/user/profile');\n}\n\n\n\nError Handling#\n\nIn the loader function, errors can be handled by throwing an error or a\nresponse. When an error is thrown in the loader function, Modern.js will stop\nexecuting the code in the current loader and switch the front-end UI to the\ndefined ErrorBoundary component:\n\n// routes/user/profile/page.loader.tsx\nexport default async function loader() {\n  const res = await fetch('https://api/user/profile');\n  if (!res.ok) {\n    throw res;\n  }\n  return res.json();\n}\n\n// routes/user/profile/error.tsx\n\nconst ErrorBoundary = () => {\n  const error = useRouteError() as Response;\n  return (\n    \n\n      \n\n\n{error.status}\n      \n\n\n{error.statusText}\n    \n  );\n};\n\nexport default ErrorBoundary;\n\n\n\nGet data from parent component#\n\nIn many cases, child components need to access data in the parent component\nloader. You can easily get the data from the parent component using\nuseRouteLoaderData:\n\n// routes/user/profile/page.tsx\n\n\nexport default function UserLayout() {\n  // Get the data returned by the loader in routes/user/layout.loader.ts\n  const data = useRouteLoaderData('user/layout');\n  return (\n    \n\n      \n\n\n{data.name}\n      \n\n\n{data.age}\n    \n  );\n}\n\n\nThe useRouteLoaderData function accepts a parameter routeId. When using\nconventional routing, Modern.js will automatically generate the routeId for you.\nThe value of routeId is the path of the corresponding component relative to\nsrc/routes. For example, in the above example, if the child component wants to\nget the data returned by the loader in routes/user/layout.tsx, the value of\nrouteId is user/layout.\n\nIn a multi-entry (MPA) scenario, the value of routeId needs to include the name\nof the corresponding entry. Unless specified, the entry name is generally the\nname of the entry directory. For example, in the following directory structure:\n\n.\n└── src\n    ├── entry1\n    │     └── routes\n    │           └── layout.tsx\n    └── entry2\n          └── routes\n                └── layout.tsx\n\n\nIf you want to get the data returned by the loader in entry1/routes/layout.tsx,\nthe value of routeId is entry1_layout.\n\n\n(WIP)Loading UI#\n\nINFO\n\nThis feature is currently experimental and the API may change in the future.\n\nCurrently only supports CSR, please look forward to Streaming SSR.\n\nCreate user/layout.loader.ts and add the following code:\n\n\n\nconst loader = () =>\ndefer({\n  userInfo: new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          age: 1,\n          name: 'user layout'\n        })\n      }, 1000)\n    })\n  })\n\nexport default loader;\n\n\nAdd the following code in user/layout.tsx:\n\nimport {\n  Await,\n  defer,\n  useLoaderData,\n  Outlet\n} from '@modern-js/runtime/router';\n\nexport default function UserLayout() {\n  const { userInfo } = useLoaderData() as {userInfo: Promise};\n  return (\n    \n\n      Loading...\n\n}\n      >\n         (\n          \n\n\n            {userInfo.name}\n            {userInfo.age}\n            \n          \n        )}>\n        \n      \n    \n  );\n}\n\n\nINFO\n\nFor details on how to use the Await component, please refer to Await.\n\nFor details on how to use defer, please refer to defer.\n\n\nIncorrect usage#\n\n 1. The loader can only return serializable data. In the SSR environment, the\n    return value of the loader function will be serialized as a JSON string and\n    then deserialized into an object on the client side. Therefore, the loader\n    function cannot return non-serializable data (such as functions).\n\nWARNING\n\nCurrently, there is no such restriction under CSR, but we strongly recommend\nthat you follow this restriction, and we may also add this restriction under CSR\nin the future.\n\n// This won't work!\nexport default () => {\n  return {\n    user: {},\n    method: () => {},\n  };\n};\n\n\n 2. Modern.js will call the loader function for you, so you should not call the\n    loader function yourself:\n\n// This won't work!\nexport default async () => {\n  const res = fetch('https://api/user/profile');\n  return res.json();\n};\n\n\nexport default function RouteComp() {\n  const data = loader();\n}\n\n\n 3. You should not import the loader file from the route component, and you\n    should also avoid importing variables from the route component into the\n    loader file. If you need to share types, you should use import type.\n\n// Not allowed\n// routes/layout.tsx\n\n // should use \"import type\" instead\n\nexport const fetch = wrapFetch(fetch);\n\nexport default function UserPage() {\n  const profileData = useLoaderData() as ProfileData;\n  return \n{profileData};\n}\n\n// routes/layout.loader.ts\n // should not be imported from the routing component\nexport type ProfileData = {\n  /*  some types */\n};\n\nexport default async (): Promise => {\n  const res = await fetch('https://api/user/profile');\n  return await res.json();\n};\n\n\n 4. When running on the server, the loader function will be packaged into a\n    unified bundle, so we do not recommend using __filename and __dirname in\n    server-side code.\n\n\nFAQ#\n\n 1. Relationship between loader and BFF functions\n\nIn CSR projects, loader is executed on the client side, and the BFF function can\nbe called directly in the loader to make interface requests.\n\nIn SSR projects, each loader is also a server-side interface. We recommend using\nthe loader instead of the BFF function with an http method of get as the\ninterface layer to avoid an extra layer of forwarding and execution.\n\n\nuseLoader (old version)#\n\nuseLoader is a legacy API in Modern.js v1. This API is a React Hook designed\nspecifically for SSR applications, allowing developers to fetch data in\ncomponents in isomorphic development.\n\nTIP\n\nIt is not necessary to use useLoader to fetch data in CSR projects.\n\nHere is the simplest example:\n\n\n\nexport default () => {\n  const { data } = useLoader(async () => {\n    console.log('fetch in useLoader');\n\n    // No real request is sent here, just a hard coding data is returned.\n    // In a real project, the data obtained from the remote end should be returned.\n    return {\n      name: 'Modern.js',\n    };\n  });\n\n  return \nHello, {data?.name};\n};\n\n\nAfter running the above code, when you access the page, you can see that logs\nare output to the terminal, but not printed in the browser console.\n\nThis is because Modern.js collects the data returned by useLoader during\nserver-side rendering and injects it into the corresponding HTML. If the SSR\nrendering is successful, you can see the following code snippet in the HTML:\n\n\n\n\nThis global variable is used to record data, and during the browser-side\nrendering process, this data is used first. If the data does not exist, the\nuseLoader function will be executed again.\n\nNOTE\n\nDuring the build phase, Modern.js will automatically generate a Loader ID for\neach useLoader and inject it into the SSR and CSR JS Bundles to associate the\nLoader with the data.\n\nCompared to getServerSideProps in Next.js, which fetches data before rendering,\nusing useLoader allows you to get data required for local UI in the component\nwithout passing data through multiple layers. Similarly, you don't have to add\nredundant logic to the outermost data acquisition function because different\nroutes require different data requests. Of course, useLoader also has some\nissues, such as difficulties in server-side code tree shaking and the need for\nan additional pre-rendering step on the server.\n\nIn the new version of Modern.js, a new Loader solution has been designed. The\nnew solution solves these problems and can be optimized for page performance in\nconjunction with conventional routing.\n\nNOTE\n\nFor detailed API information, see useLoader.","frontmatter":{"title":"Data Fetching","sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/basic-features/data-fetch.mdx","_relativePath":"en/guides/basic-features/data-fetch.mdx"},{"id":211,"title":"Environment Variable","routePath":"/en/guides/basic-features/env-vars","lang":"en","toc":[{"text":"Built-in Environment Variables","id":"built-in-environment-variables","depth":2,"charIndex":133},{"text":"ASSET_PREFIX","id":"asset_prefix","depth":3,"charIndex":167},{"text":"NODE_ENV","id":"node_env","depth":3,"charIndex":273},{"text":"MODERN_ENV","id":"modern_env","depth":3,"charIndex":643},{"text":"MODERN_TARGET","id":"modern_target","depth":3,"charIndex":872},{"text":"Custom Environment Variables","id":"custom-environment-variables","depth":2,"charIndex":2152},{"text":"Via shell","id":"via-shell","depth":3,"charIndex":2260},{"text":"Via .env file","id":"via-env-file","depth":3,"charIndex":2368},{"text":"Using Environment Variables","id":"using-environment-variables","depth":2,"charIndex":3073},{"text":"Convention Names","id":"convention-names","depth":3,"charIndex":3104},{"text":"Any Other Names","id":"any-other-names","depth":3,"charIndex":3581},{"text":"Use Global Replacement","id":"use-global-replacement","depth":2,"charIndex":4125}],"domain":"","content":"#\n\nModern.js provides support for environment variables, including built-in\nenvironment variables and custom environment variables.\n\n\nBuilt-in Environment Variables#\n\n\nASSET_PREFIX#\n\nThe current path prefix of the resource file, which is a read-only environment\nvariable.\n\n\nNODE_ENV#\n\nThe current execution environment and is a read-only environment variable whose\nhave different values under different execution commands:\n\n * production: Default value when running modern build or modern serve.\n * test: Default value when running modern test.\n * development: Default value when running modern dev, also the default value in\n   other cases.\n\n\nMODERN_ENV#\n\nSet the current execution environment manually. In addition to the values in the\nNODE_ENV, custom environment names are supported here, such as staging, boe,\netc.\n\nTIP\n\nMODERN_ENV priority is higher than NODE_ENV.\n\n\nMODERN_TARGET#\n\nWhen using @modern-js/runtime, Modern.js will automatically inject MODERN_TARGET\nto distinguish between SSR and CSR environments.\n\nYou can use process.env.MODERN_TARGET to determine the environment and execute\nappropriate code.\n\nfunction App() {\n  if (process.env.MODERN_TARGET === 'browser') {\n    console.log(window.innerHeight);\n  }\n}\n\n\nAfter the development build, you can see that the SSR and CSR bundles as\nfollows:\n\n// SSR bundles\nfunction App() {\n  if (false) {\n  }\n}\n\n\n// CSR bundles\nfunction App() {\n  if (true) {\n    console.log(window.innerHeight);\n  }\n}\n\n\nThis can provide different outputs for different environments to ensure that the\nbundle size is minimized. It can also be convenient to deal with some side\neffects for different environments.\n\nDead Code Elimination\n\nIn production environment, minimizers such as Terser and SWC will analyze the\ncode and remove dead code to reduce the bundle size. This process is called\n\"Dead Code Elimination\" (DCE).\n\nFor example, the code inside the if (false) statement will be removed, while the\ncode inside the if (true) will be preserved.\n\nIf you do not use process.env.MODERN_TARGET as described above, the code\nminimizer may not be able to analyze the dead code, resulting in an increased\nbundle size.\n\n\nCustom Environment Variables#\n\nYou can specify custom environment variables in both shell and .env files.\n\n\nVia shell#\n\nAdd custom environment variables before the command:\n\nREACT_APP_FOO=123 BAR=456 pnpm run dev\n\n\n\nVia .env file#\n\nCreate a .env file in the project root and add custom environment variables,\nwhich are added to the Node.js process by default, for example:\n\nREACT_APP_FOO=123\nBAR=456\n\n\nThe .env file follows the following loading rules:\n\n * .env: default.\n * .env.{ MODERN_ENV | NODE_ENV }: Overrides .env for a specific environment.\n\nWhen you need to use different config according to the environment, you can\ndefine environment variables in the .env file corresponding to the environment\nname, and manually set the execution environment when starting the project.\n\nFor example, when starting a project with the following command, the .env and\n.env.staging will load:\n\nMODERN_ENV=staging pnpm run dev\n\n\n\nUsing Environment Variables#\n\n\nConvention Names#\n\nNODE_ENV can be used directly in front-end code. In addition, custom environment\nvariables starting with MODERN_ can also be used directly in code.\n\nFor Example:\n\nif (process.env.NODE_ENV === 'development') {\n  // do something\n}\n\n\nAfter executing the pnpm run dev, you can see the following bundle:\n\nif (true) {\n  // do something\n}\n\n\nIn custom HTML templates, you can also use such environment variables directly.\nFor example, in config/html/head.html:\n\n\n\n\n\nAny Other Names#\n\nIf you need to use environment variables with any other names in your code, you\ncan configure them in source.globalVars. For example:\n\nexport default defineConfig({\n  source: {\n    globalVars: {\n      'process.env.VERSION': process.env.VERSION,\n    }.\n  },\n});\n\n\nAt this point, the process.env.VERSION in the code will be replaced by the value\nof VERSION in the environment variables.\n\nNOTE\n\nsource.globalVars also supports replacing other expressions or strings with\nspecified values, not limited to environment variables.\n\n\nUse Global Replacement#\n\nIn addition to environment variables, Modern.js also supports replacing\nvariables in code with other values or expressions, which can be used to\ndistinguish between development environment and production environment in code.\n\nFor example, converts the expression TWO to 1 + 1:\n\nexport default {\n  source: {\n    define: {\n      TWO: '1 + 1',\n    },\n  },\n};\n\n\nconst foo = TWO;\n\n// ⬇️ Turn into being...\nconst foo = 1 + 1;\n\n\nIn most cases, source.globalVars is already sufficient to replace variables. But\nthe values passed in by source.globalVars will be serialized by JSON by default.\nSo it cannot be replaced like 1 + 1 in the example above, at this time, we need\nto use source.define.","frontmatter":{"title":"Environment Variable","sidebar_position":7},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/basic-features/env-vars.mdx","_relativePath":"en/guides/basic-features/env-vars.mdx"},{"id":212,"title":"HTML Template","routePath":"/en/guides/basic-features/html","lang":"en","toc":[{"text":"JSX Syntax","id":"jsx-syntax","depth":2,"charIndex":-1},{"text":"HTML Components","id":"html-components","depth":3,"charIndex":-1},{"text":"Template Parameters","id":"template-parameters","depth":3,"charIndex":-1},{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"HTML Syntax","id":"html-syntax","depth":2,"charIndex":-1},{"text":"Custom HTML Fragments","id":"custom-html-fragments","depth":3,"charIndex":-1},{"text":"Custom the entire HTML Template","id":"custom-the-entire-html-template","depth":3,"charIndex":-1},{"text":"Template Parameters","id":"template-parameters-1","depth":3,"charIndex":-1},{"text":"Config By Entry","id":"config-by-entry","depth":3,"charIndex":-1}],"domain":"","content":"Some Params:\n\n\nentryName：{entryName}\n\n\ntitle：{htmlConfig.title}\n\n\nrootId: {templateParams.mountId}\n\n\nbottom\n\n\nSome Params:\n\n\nentryName：sub\n\n\ntitle：\n\n\nrootId: root\n\n\nbottom\n\nWe're sorry but react app doesn't work properly without JavaScript enabled.\nPlease enable it to continue.\n\n<%= bodyTemplate %> {/* webpack inject js */} {/* */}","frontmatter":{"title":"HTML Template","sidebar_position":9},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/basic-features/html.mdx","_relativePath":"en/guides/basic-features/html.mdx"},{"id":213,"title":"Mock","routePath":"/en/guides/basic-features/mock","lang":"en","toc":[{"text":"Enabling Mock","id":"enabling-mock","depth":2,"charIndex":141},{"text":"Writing Mock Files","id":"writing-mock-files","depth":2,"charIndex":369},{"text":"Return Random Data","id":"return-random-data","depth":2,"charIndex":1235},{"text":"Delayed Response","id":"delayed-response","depth":2,"charIndex":1592},{"text":"Use Mock On Demand","id":"use-mock-on-demand","depth":2,"charIndex":1871}],"domain":"","content":"#\n\nModern.js allows you to easily generate mock data so that the front-end can\ndevelop independently without depending on the back-end API.\n\n\nEnabling Mock#\n\nBy convention, when there is an index.[jt]s in the config/mock/ directory, mock\ndata will be automatically enabled:\n\n.\n├── config\n│   └── mock\n│       └── index.ts\n├── src\n│   └── App.tsx\n└── modern.config.ts\n\n\n\nWriting Mock Files#\n\nThe config/mock/index.ts file only needs to export an object containing all Mock\nAPIs. The properties of the object are composed of the request configuration\nmethod and url, and the corresponding property values can be Object, Array, or\nFunction:\n\nexport default {\n  /* The attribute is the concrete method and request url, and the value is object or array as the result of the request */\n  'GET /api/getInfo': { data: [1, 2, 3, 4] },\n\n  /* the default method is GET */\n  '/api/getExample': { id: 1 },\n\n  /* You can use custom functions to dynamically return data, req and res are both Node.js HTTP objects. */\n  'POST /api/addInfo': (req, res, next) => {\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.end('200');\n  },\n};\n\n\nWhen you access http://localhost:8080/api/getInfo, the API will return JSON {\n\"data\": [1, 2, 3, 4] }.\n\n\nReturn Random Data#\n\nLibraries such as Mock.js can be used in config/mock/index.js to generate random\ndata. For example:\n\nconst Mock = require('mockjs');\n\nmodule.exports = {\n  '/api/getInfo': Mock.mock({\n    'data|1-10': [{ name: '@cname' }],\n  }) /* => {data: [{name: \"董霞\"}, {name: \"魏敏\"},  {name: \"石磊\"}} */,\n};\n\n\nOther Mock Libraries\n * Chancejs\n * Mock\n\n\nDelayed Response#\n\n * You can do this by using the browser's \"weak connection simulation\" feature.\n * Delays can be set via setTimeout, for example:\n\nexport default {\n  'api/getInfo': (req, res) => {\n    setTimeout(() => {\n      res.end('delay 2000ms');\n    }, 2000);\n  },\n};\n\n\n\nUse Mock On Demand#\n\nUnder the config/mock/index.ts, you can also export the config to control the\nMock service.\n\ntype MockConfig = {\n  enable: ((req: IncomingMessage, res: ServerResponse) => boolean) | boolean;\n};\n\nexport const config = {\n  enable: false\n}\n\n\nCurrently only the enable configuration is supported, which allows developers to\ncontrol whether to execute mock.\n\nNOTE\n\nAfter modifying config, there is no need to restart the service, which will take\neffect immediately.","frontmatter":{"title":"Mock","sidebar_position":6},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/basic-features/mock.mdx","_relativePath":"en/guides/basic-features/mock.mdx"},{"id":214,"title":"Proxy","routePath":"/en/guides/basic-features/proxy","lang":"en","toc":[{"text":"Local Proxy","id":"local-proxy","depth":2,"charIndex":3},{"text":"Global Proxy","id":"global-proxy","depth":2,"charIndex":534},{"text":"Setting Proxy Rules","id":"setting-proxy-rules","depth":3,"charIndex":780},{"text":"Proxy Dashboard","id":"proxy-dashboard","depth":3,"charIndex":1056},{"text":"BFF Proxy","id":"bff-proxy","depth":2,"charIndex":1519}],"domain":"","content":"#\n\n\nLocal Proxy#\n\nModern.js provides a way to configure the development proxy in tools.devServer.\nFor example, to proxy the local interface to an online address:\n\n\n\nexport default defineConfig({\n  tools: {\n    devServer: {\n      proxy: {\n        '/go/api': {\n          target: 'http://www.example.com/',\n          changeOrigin: true,\n        },\n      },\n    },\n  },\n});\n\n\nWhen access http://localhost:8080/go/api, the response content will be returned\nfrom http://www.example.com/.\n\nINFO\n\nFor more detail, see http-proxy-middleware.\n\n\nGlobal Proxy#\n\nModern.js provides an out-of-the-box global proxy plugin\n@modern-js/plugin-proxy, which is based on whistle and can be used to view and\nmodify the requests and responses of HTTP/HTTPS, as well as be used as an HTTP\nproxy server.\n\n\nSetting Proxy Rules#\n\nAfter installing the proxy plugin and configuring the rules, run pnpm run dev.\nModern.js will automatically enable the proxy server when the development server\nis started.\n\nSpecific proxy rules can be set via the dev.proxy or the config/proxy.js file.\n\n\nProxy Dashboard#\n\nAfter installing the proxy plugin and configuring the proxy rules, run the pnpm\nrun dev command:\n\n  App running at:\n\n  Local:    http://localhost:8080/\n  Network:  http://192.168.0.1:8080/\n\nℹ  info      Starting the proxy server.....\n✔  success   Proxy Server start on localhost:8899\n\n\nYou can see that the proxy server has started successfully in the console.\n\nAccess http://localhost:8899, and you can set the rules through the dashboard.\n\n\n\n\nBFF Proxy#\n\nBy configuring bff.proxy, BFF API requests can be proxied to a specified\nservice. Unlike the other proxy methods above, it can be used in the production\nenvironment:\n\nexport default defineConfig({\n  bff: {\n    proxy: {\n      '/api/v1': 'https://cnodejs.org',\n    },\n  },\n});\n\n\nFor example, when using BFF function in the code, the final request\nhttp://localhost:8080/api/v1/topics will be automatically proxied to\nhttps://cnodejs.org/api/v1/topics:\n\n\n\ngetTopics();\n","frontmatter":{"title":"Proxy","sidebar_position":5},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/basic-features/proxy.mdx","_relativePath":"en/guides/basic-features/proxy.mdx"},{"id":215,"title":"Routes","routePath":"/en/guides/basic-features/routes","lang":"en","toc":[{"text":"Conventional Routing","id":"conventional-routing","depth":2,"charIndex":323},{"text":"Routing File Convention","id":"routing-file-convention","depth":3,"charIndex":1179},{"text":"Layout","id":"layout","depth":4,"charIndex":2464},{"text":"Page","id":"page","depth":4,"charIndex":3893},{"text":"Dynamic Routing","id":"dynamic-routing","depth":3,"charIndex":4033},{"text":"Dynamic Optional Routing","id":"dynamic-optional-routing","depth":3,"charIndex":4662},{"text":"Catch-all Routing","id":"catch-all-routing","depth":3,"charIndex":5408},{"text":"No-path Layout","id":"no-path-layout","depth":3,"charIndex":6179},{"text":"No Layout","id":"no-layout","depth":3,"charIndex":6861},{"text":"(WIP)Loading","id":"(wip)loading","depth":3,"charIndex":7485},{"text":"Redirect","id":"redirect","depth":3,"charIndex":8742},{"text":"ErrorBoundary","id":"errorboundary","depth":3,"charIndex":9083},{"text":"Runtime Configuration","id":"runtime-configuration","depth":3,"charIndex":10083},{"text":"Hooks Before Rendering","id":"hooks-before-rendering","depth":3,"charIndex":10462},{"text":"Preloading","id":"preloading","depth":3,"charIndex":11959},{"text":"FAQ","id":"faq","depth":4,"charIndex":13487},{"text":"Self-controlled Routing","id":"self-controlled-routing","depth":2,"charIndex":14063},{"text":"Other","id":"other","depth":2,"charIndex":14702}],"domain":"","content":"#\n\nModern.js's routing is based on React Router 6 and provides multiple types of\nrouting modes. According to different entry types, routing is divided into three\nmodes: Conventional Routing, Self-controlled Routing, and Other.\n\nNOTE\n\nThe routing mentioned in this section refers to client-side routing, i.e., SPA\nrouting.\n\n\nConventional Routing#\n\nWith routes/ as the convention for entry points, Modern.js automatically\ngenerates the corresponding routing structure based on the file system.\n\nModern.js supports the popular conventional routing mode in the industry: Nested\nRouting. When using nested routing, the page's routing corresponds to the UI\nstructure, and we will introduce this routing mode in detail.\n\n/user/johnny/profile                  /user/johnny/posts\n+------------------+                  +-----------------+\n| User             |                  | User            |\n| +--------------+ |                  | +-------------+ |\n| | Profile      | |  +------------>  | | Posts       | |\n| |              | |                  | |             | |\n| +--------------+ |                  | +-------------+ |\n+------------------+                  +-----------------+\n\n\n\nRouting File Convention#\n\nUnder the routes/ directory, the directory name is mapped to the route URL.\nModern.js has two file conventions, layout.[jt]sx and page.[jt]sx (abbreviated\nas.tsx). These two files determine the layout structure of the application.\nlayout.tsx is used as the layout component, and page.tsx acts as the content\ncomponent, which is the leaf node of the entire route (a route has only one leaf\nnode and must end with a leaf node).\n\nFor example, the following directory structure:\n\n.\n└── routes\n    ├── page.tsx\n    └── user\n        └── page.tsx\n\n\nThis will generate the following two routes:\n\n * /\n * /user\n\nWhen layout.tsx is added, assuming the following directory:\n\nINFO\n\nHere, routes/layout.tsx will be used as the layout component for all components\nunder the / route, and routes/user/layout.tsx will be used as the layout\ncomponent for all route components under the /user route.\n\n.\n└── routes\n    ├── layout.tsx\n    ├── page.tsx\n    └── user\n        ├── layout.tsx\n        └── page.tsx\n\n\nWhen the route is /, the following UI layout will be displayed:\n\n\n  \n\n\n\nSimilarly, routes/user/layout.tsx will be used as the layout component for all\ncomponents under the /user route. When the route is /user, the following UI\nlayout will be displayed:\n\n\n  \n    \n  \n\n\n\nLayout#\n\nThe component refers to all layout.tsx files under the routes/ directory. They\nrepresent the layout of the corresponding route segment and use to represent\nchild components.\n\n\n\nexport default () => {\n  return (\n    <>\n      \n    </>\n  );\n};\n\n\nNOTE\n\nis a new API in React Router 6. For more details, please refer to Outlet.\n\nTo simplify the introduction of the relationship between and , the following\nfile directory is used as an example:\n\n.\n└── routes\n    ├── blog\n    │   └── page.tsx\n    ├── layout.tsx\n    ├── page.tsx\n    └── user\n        ├── layout.tsx\n        └── page.tsx\n\n\n 1. When the route is /, the in routes/layout.tsx represents the component\n    exported in routes/page.tsx, generating the following UI structure:\n\n\n  \n\n\n\n 2. When the route is /blog, the in routes/layout.tsx represents the component\n    exported in routes/blog/page.tsx, generating the following UI structure:\n\n\n  \n\n\n\n 3. When the route is /user, the in routes/layout.tsx represents the component\n    exported in routes/user/layout.tsx. The in routes/user/layout.tsx represents\n    the component exported in routes/user/page.tsx, generating the following UI\n    structure:\n\n\n  \n    \n  \n\n\n\nIn summary, if there is a layout.tsx file under the sub-route's file directory,\nthe in the parent layout.tsx will represent the layout.tsx in the sub-route file\ndirectory. Otherwise, it will represent the page.tsx in the sub-route file\ndirectory.\n\nPage#\n\nAll routes should end with the component. If the developer introduces the\ncomponent in the page.tsx file, there will be no effect.\n\n\nDynamic Routing#\n\nRoutes generated from file directories named with [] will be handled as dynamic\nroutes. For example, the following file directory:\n\n└── routes\n    ├── [id]\n    │   └── page.tsx\n    ├── blog\n    │   └── page.tsx\n    └── page.tsx\n\n\nThe routes/[id]/page.tsx file will be converted to the /:id route. Except for\nthe exact matching /blog route, all other /xxx routes will match this route.\n\nIn the component, you can use useParams to get the corresponding named\nparameter.\n\nIn the loader, params will be passed as the input parameter of the loader\nfunction, and you can get the parameter value through params.xxx.\n\n\nDynamic Optional Routing#\n\nRoutes generated from file directories named with [$] will be treated as dynamic\noptional routes. For example, the following file directory:\n\n└── routes\n    ├── user\n    │   └── [id$]\n    │       └── page.tsx\n    ├── blog\n    │   └── page.tsx\n    └── page.tsx\n\n\nThe routes/user/[id$]/page.tsx file will be converted to the /user/:id? route.\nAll routes under /user will match this route, and the id parameter is optional.\nThis route is usually used to distinguish between creation and editing.\n\nIn the component, you can use useParams to get the corresponding named\nparameter.\n\nIn the loader, params will be passed as the input parameter of the loader\nfunction, and you can get the parameter value through params.xxx.\n\n\nCatch-all Routing#\n\nIf you create a $.tsx file under the routes directory, it will be treated as the\ncatch-all routing component. When there is no matching route, this component\nwill be rendered.\n\nNOTE\n\n$.tsx can be considered as a special page route component. When there is a\nlayout.tsx file in the current directory, $.tsx will be rendered as a child\ncomponent of layout.\n\nFor example, the following directory structure:\n\n└── routes\n    ├── $.tsx\n    ├── blog\n    │   └── page.tsx\n    └── page.tsx\n\n\nWhen accessing any path that does not match, the routes/$.tsx component will be\nrendered. Similarly, you can use useParams in $.tsx to capture the remaining\nparts of the URL.\n\n\n// When the path is `/aaa/bbb`\nconst params = useParams();\nparams['*']; // => 'aaa/bbb'\n\n\n\nNo-path Layout#\n\nWhen the directory name starts with __, the directory name will not be converted\nto an actual route path. For example, the following file directory:\n\n.\n└── routes\n    ├── __auth\n    │   ├── layout.tsx\n    │   ├── login\n    │   │   └── page.tsx\n    │   └── signup\n    │       └── page.tsx\n    ├── layout.tsx\n    └── page.tsx\n\n\nModern.js will generate two routes, /login and /signup. The __auth/layout.tsx\ncomponent will serve as the layout component for login/page.tsx and\nsignup/page.tsx, but __auth will not be a route path segment.\n\nThis feature is very useful when you need to create independent layouts for\ncertain types of routes or want to classify routes.\n\n\nNo Layout#\n\nIn some cases, the project requires complex routing, but these routes do not\nhave independent UI layouts. If you create routes like ordinary file\ndirectories, it will result in deep directory levels.\n\nTherefore, Modern.js supports using . to separate route segments instead of file\ndirectories. For example, when you need /user/profile/2022/edit, you can\ndirectly create the following files:\n\n└── routes\n    ├── user.profile.[id].edit\n    │      └── page.tsx\n    ├── layout.tsx\n    └── page.tsx\n\n\nWhen accessing the route, you will get the following UI layout:\n\n\n   // routes/user.profile.[id].edit/page.tsx\n\n\n\n\n(WIP)Loading#\n\nIn each directory under routes/, developers can create a loading.tsx file that\nexports a component by default.\n\nWhen this component and the layout component exist in the route directory, the\ncomponent will be used as the fallback UI when switching routes in this\nsub-route. For example, the following file directory:\n\n.\n└── routes\n    ├── blog\n    │   ├── [id]\n    │   │   └── page.tsx\n    │   └── page.tsx\n    ├── layout.tsx\n    ├── loading.tsx\n    └── page.tsx\n\n\nWhen defining loading.tsx, it is equivalent to the following layout:\n\nWhen the route is /:\n\n\n  }>\n    \n  \n\n\n\nWhen the route is /blog:\n\n\n  }>\n    \n  \n\n\n\nWhen the route is /blog/123:\n\n\n  }>\n    \n  \n\n\n\nINFO\n\nWhen the Layout component does not exist in the directory, the Loading component\nin that directory will not take effect. Modern.js recommends having a root\nLayout and root Loading.\n\nWhen the route jumps from / to /blog, if the JS Chunk of the blog/page component\nhas not been loaded yet, the UI of the component exported in loading.tsx will be\ndisplayed first.\n\nSimilarly, when the route jumps from / or /blog to /blog/123, if the JS Chunk of\nthe blog/[id]/page component has not been loaded yet, the UI of the component\nexported in loading.tsx will be displayed first.\n\n\nRedirect#\n\nYou can use a Data Loader file to redirect a route. For example, if you have a\nroutes/user/page.tsx file and want to redirect the corresponding route, you can\ncreate a routes/user/page.loader.ts file:\n\n\n\nexport default () => {\n  const user = await getUser();\n  if (!user) {\n    return redirect('/login');\n  }\n  return null;\n};\n\n\n\nErrorBoundary#\n\nIn each directory under routes/, developers can also define an error.tsx file\nthat exports an component by default.\n\nWhen this component exists in the routes directory, any rendering errors will be\ncaught by the ErrorBoundary component. When the layout.tsx file is not defined\nin the directory, the component will not take effect.\n\ncan return the UI view when an error occurs. When the component is not declared\nin the current level, the error will bubble up to a higher-level component until\nit is caught or thrown. At the same time, when a component has an error, it will\nonly affect the route component and its child components that catch the error.\nThe status and view of other components are not affected and can continue to\ninteract.\n\nIn the component, you can use useRouteError to get specific information about\nthe error:\n\n\nexport const ErrorBoundary = () => {\n  const error = useRouteError();\n  return (\n    \n\n      \n\n\n{error.status}\n      \n\n\n{error.message}\n    \n  );\n};\n\n\n\nRuntime Configuration#\n\nIn each root Layout component (routes/layout.ts), you can dynamically define\nruntime configuration:\n\n// Define runtime config\n\n\nexport const config = (): AppConfig => {\n  return {\n    router: {\n      createRoutes() {\n        return [\n          {\n            path: 'modern',\n            element: \nmodern,\n          },\n        ];\n      },\n    },\n  };\n};\n\n\n\nHooks Before Rendering#\n\nIn some scenarios, you may need to perform some operations before rendering the\napplication. You can define an init hook in routes/layout.tsx. The init hook\nwill be executed on both the client and server side. A basic example of usage is\nas follows:\n\n\n\nexport const init = (context: RuntimeContext) => {\n  // do something\n};\n\n\nBy using the init hook, you can mount some global data, and the runtimeContext\nvariable can be accessed in other parts of the application:\n\nNOTE\n\nThis feature is very useful when the application needs pre-rendered data, custom\ndata injection, or framework migration (such as Next.js).\n\n\n\nexport const init = (context: RuntimeContext) => {\n  return {\n    message: 'Hello World',\n  };\n};\n\n\n\n\nexport default () => {\n  const { context } = useRuntimeContext();\n  const { message } = context.getInitData();\n\n  return \n{message};\n};\n\n\nWhen used with the SSR feature, the data returned by the init hook during SSR\ncan be obtained on the client side. Developers can decide whether to re-fetch\ndata on the client side to overwrite the SSR data. For example:\n\n\n\nexport const init = (context: RuntimeContext) => {\n  if (process.env.MODERN_TARGET === 'node') {\n    return {\n      message: 'Hello World By Server',\n    };\n  } else {\n    const { context } = runtimeContext;\n    const data = context.getInitData();\n    // If do not get the expected data\n    if (!data.message) {\n      return {\n        message: 'Hello World By Client',\n      };\n    }\n  }\n};\n\n\n\nPreloading#\n\nIn conventional routing, Modern.js automatically splits routes into chunks based\non the route. When a user visits a specific route, the corresponding chunk will\nbe loaded automatically, effectively reducing the loading time of the initial\nscreen.\n\nHowever, this also brings a problem: if the chunk corresponding to the route has\nnot finished loading when the user visits the route, a white screen will appear.\n\nIn this case, you can define a Loading component to display a custom Loading\ncomponent before the static resources are loaded.\n\nTo further improve the user experience and reduce loading time, Modern.js\nsupports defining the prefetch attribute on the Link component to preload static\nresources and data.\n\n\n\n\nINFO\n * This feature is currently only supported in Webpack projects and not yet\n   supported in Rspack projects.\n * Preloading data currently only preloads the data returned by the Data Loader\n   in SSR projects.\n\nThe prefetch attribute has three optional values:\n\n * none: default value, no prefetching, no additional behavior.\n * intent: This is the value we recommend for most scenarios. When you hover\n   over the Link, the corresponding chunk and data defined in the data loader\n   will be loaded automatically. When you move the mouse away, the loading will\n   be cancelled automatically. In our tests, even fast clicks can reduce loading\n   time by about 200ms.\n * render: The corresponding chunk and data defined in the Data Loader will be\n   loaded when the Link component is rendered.\n\nFAQ#\n\n 1. What is the difference between using render and not splitting static\n    resources based on the route?\n\n * By using render, you can specify which routes to load during the initial\n   screen, and you can control the rendering so that only when the Link\n   component enters the visible area, the Link component will be rendered.\n\n * By using render, static resources will only be loaded when the system is\n   idle, and will not compete with the static resources of the initial screen\n   for network resources.\n\n * In the SSR scenario, data will also be pre-fetched.\n\n\nSelf-controlled Routing#\n\nWith src/App.tsx as the convention for entry points, Modern.js will not perform\nany additional routing operations. Developers can use the API of React Router 6\nfor development, for example:\n\n\n\nexport default () => {\n  return (\n    \n      \n        index} />\n        about} />\n      \n    \n  );\n};\n\n\nNOTE\n\nModern.js provides a series of optimizations for resource loading and rendering\nfor conventional routing by default, and provides out-of-the-box SSR\ncapabilities. When using self-controlled routing, developers need to encapsulate\nthese capabilities themselves. It is recommended to use conventional routing.\n\n\nOther#\n\nBy default, Modern.js will enable the built-in routing scheme, which is React\nRouter.\n\nexport default defineConfig({\n  runtime: {\n    router: true,\n  },\n});\n\n\nAs mentioned above, when the runtime.router configuration is enabled, Modern.js\nwill export the API of React Router from the @modern-js/runtime/router namespace\nfor developers to use, ensuring that developers and Modern.js are using the same\ncode, and automatically wrapping the Provider component according to the router\nconfiguration. In addition, in this case, the code of React Router will be\npacked into the JS output.\n\nIf the project already has its own routing plan or does not need to use\nclient-side routing, this feature can be disabled.\n\nexport default defineConfig({\n  runtime: {\n    router: false,\n  },\n});\n\n\nAs mentioned above, if the runtime.router configuration is disabled and\nreact-router-dom is used directly for project routing management, the Provider\nneeds to be wrapped according to the React Router documentation.","frontmatter":{"title":"Routes","sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/basic-features/routes.mdx","_relativePath":"en/guides/basic-features/routes.mdx"},{"id":216,"title":"Builder","routePath":"/en/guides/concept/builder","lang":"en","toc":[{"text":"Build Architecture","id":"build-architecture","depth":2,"charIndex":361},{"text":"Builder Documentation","id":"builder-documentation","depth":2,"charIndex":608},{"text":"Builder Configuration","id":"builder-configuration","depth":2,"charIndex":1098},{"text":"Builder Capabilities","id":"builder-capabilities","depth":2,"charIndex":1645}],"domain":"","content":"#\n\nModern.js uses Modern.js Builder to build your Web App.\n\nModern.js Builder is one of the core components of the Modern.js system. It is a\nbuild engine for web development scenarios that can be used independently of\nModern.js. Modern.js Builder supports multiple bundlers such as webpack and\nRspack, and by default uses the most mature webpack for bundling.\n\n\nBuild Architecture#\n\nFrom a building perspective, Modern.js is divided into three layers, from top to\nbottom:\n\n * Upper-level development framework: Modern.js.\n * Common build engine: Modern.js Builder.\n * Low-level bundler: webpack and Rspack.\n\n\nBuilder Documentation#\n\nSince Modern.js Builder is a module that can be used independently, we have\nprovided separate documentation for it, which can be found at\nmodernjs.dev/builder.\n\nIn this documentation, you can learn about the detailed introduction of\nModern.js Builder, and you can also find complete usage guides for various\nbuilding capabilities. If you have any building needs or problems, it is\nrecommended that you read the Modern.js Builder documentation first to solve\nthem.\n\n\nBuilder Configuration#\n\nModern.js's configuration inherits from Modern.js Builder, so you can use all\nthe build configurations provided by Modern.js Builder in Modern.js.\n\nTaking the html.title config option of Modern.js Builder as an example, you can\ndirectly use this option in the modern.config.ts file, and it will be\nautomatically passed to Modern.js Builder.\n\nexport default defineConfig({\n  html: {\n    title: 'example',\n  },\n});\n\n\nFor detailed information about build configuration, please refer to 「Modern.js\nBuilder - Builder Config」.\n\n\nBuilder Capabilities#\n\nModern.js Builder provides rich build capabilities, including JavaScript\ncompilation, CSS compilation, static resource processing, code hot update, code\ncompression, TS type checking, and dozens of other capabilities.\n\nWe recommend that you read 「Modern.js Builder - All Features」 to learn about all\nthe features provided by Modern.js Builder.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/concept/builder.mdx","_relativePath":"en/guides/concept/builder.mdx"},{"id":217,"title":"Entry","routePath":"/en/guides/concept/entries","lang":"en","toc":[{"text":"What is Entry?","id":"what-is-entry?","depth":2,"charIndex":101},{"text":"Single Entry and Multiple Entries","id":"single-entry-and-multiple-entries","depth":2,"charIndex":622},{"text":"Entry Types","id":"entry-types","depth":2,"charIndex":2206},{"text":"Framework Mode Entry","id":"framework-mode-entry","depth":3,"charIndex":3167},{"text":"Conventional Routing","id":"conventional-routing","depth":4,"charIndex":3557},{"text":"Self-controlled Routing","id":"self-controlled-routing","depth":4,"charIndex":4092},{"text":"Custom Bootstrap","id":"custom-bootstrap","depth":4,"charIndex":4437},{"text":"Build Mode Entry","id":"build-mode-entry","depth":3,"charIndex":5410},{"text":"Specifying Entry Using Configuration","id":"specifying-entry-using-configuration","depth":2,"charIndex":6241},{"text":"Disable Default Entry Scanning","id":"disable-default-entry-scanning","depth":3,"charIndex":6857}],"domain":"","content":"#\n\nIn this chapter, you will learn about the entry convention in Modern.js and how\nto customize it.\n\n\nWhat is Entry?#\n\nEntry refers to the starting module of a page.\n\nIn a Modern.js project, each entry corresponds to an independent page and a\nserver-side route. By default, Modern.js automatically determines the entry of a\npage based on directory conventions, but also supports customizing the entry\nthrough configuration options.\n\nMany configuration options provided by Modern.js are divided by entry, such as\npage title, HTML template, page meta information, whether to enable SSR/SSG,\nserver-side routing rules, etc.\n\n\nSingle Entry and Multiple Entries#\n\nThe project initialized by Modern.js is a single entry (SPA) project, with the\nfollowing structure:\n\n.\n├── src\n│   └── routes\n│       ├── index.css\n│       ├── layout.tsx\n│       └── page.tsx\n├── package.json\n├── modern.config.ts\n└── tsconfig.json\n\n\nIn a Modern.js project, you can easily switch from single entry to multiple\nentries by running pnpm run new in the project directory and creating an entry:\n\n? Please select the operation you want: Create Element\n? Please select the type of element to create: New \"entry\"\n? Please fill in the entry name: new-entry\n\n\nAfter running the command, Modern.js will automatically generate a new entry\ndirectory. At this point, you can see that the src/ directory has the following\nstructure:\n\n.\n├── myapp     # Original entry\n│   └── routes\n│       ├── index.css\n│       ├── layout.tsx\n│       └── page.tsx\n└── new-entry  # New entry\n    └── routes\n        ├── index.css\n        ├── layout.tsx\n        └── page.tsx\n\n\nThe original entry code has been moved to a directory with the same name as the\nname field in package.json, and a new-entry entry directory has been created.\n\nAfter running pnpm run dev, you can see a new route named /new-entry has been\nadded, and the migrated code route has not changed.\n\nTIP\n\nModern.js will use the entry with the same name as the name field in\npackage.json as the main entry. The route of the main entry is /, and the route\nof other entries is /{entryName}.\n\nFor example, when the name field in package.json is myapp, src/myapp will be the\nmain entry of the project.\n\n\nEntry Types#\n\nDifferent entry types have different compilation and runtime behaviors.\n\nBy default, Modern.js scans the files under src/ before starting the project,\nidentifies the entry, and generates the corresponding server-side route.\n\nTIP\n\nYou can modify the directory for entry identification by using the\nsource.entriesDir config.\n\nNot all top-level directories under src/ become project entries. The directory\nwhere the entry is located must meet one of the following four conditions:\n\n 1. Has a routes/ directory.\n 2. Has an App.[jt]sx? file.\n 3. Has an index.[jt]sx? file.\n 4. Has a pages/ directory (compatible with Modern.js 1.0).\n\nWhen the src/ directory meets the entry requirements, Modern.js considers the\ncurrent project as a single entry application.\n\nTIP\n\nIn a single entry application, the default entry name is main.\n\nWhen the project is not a single entry application, Modern.js will further look\nat the top-level directories under src/.\n\n\nFramework Mode Entry#\n\nFramework mode refers to the need to use Modern.js framework capabilities, such\nas Router, SSR, integrated calls, etc. Under this type of entry convention, the\nentry defined by the developer is not a real webpack compilation entry.\nModern.js will generate a wrapped entry during startup, and you can find the\nreal entry in node_modules/.modern/{entryName}/index.js.\n\nConventional Routing#\n\nIf there is a routes/ directory in the entry, Modern.js will scan the files\nunder routes/ during startup, and automatically generate client-side routes\n(react-router) based on file conventions. For example:\n\n.\n├── src\n│   └── routes\n│       ├── layout.tsx\n│       └── page.tsx\n\n\nIn the above directory, the component exported in layout.tsx will be the\noutermost component, and the component exported in page.tsx will be the\ncomponent of the / route.\n\nFor more information, please refer to Conventional Routing.\n\nSelf-controlled Routing#\n\nIf there is an App.[jt]sx? file in the entry, developers can set the client-side\nroute in this file through code, or not set the client-side route.\n\n\n\nexport default () => {\n  return (\n    \n      \n        index} />\n        about} />\n      \n    \n  );\n};\n\n\nFor more information, please refer to Self-controlled Routing.\n\nCustom Bootstrap#\n\nIf there is an index.[jt]sx file in the entry, and the file exports a function\nby default, Modern.js will pass the default bootstrap function as a parameter\nand use the exported function to replace the default bootstrap. This way,\ndevelopers can customize how components are mounted to DOM nodes or add custom\nbehavior before mounting. For example:\n\nexport default (App: React.ComponentType, bootstrap: () => void) => {\n  // do something before bootstrap...\n  initSomething().then(() => {\n    bootstrap();\n  })\n};\n\n\nAt this point, the generated file content of Modern.js is as follows:\n\n\n\n\n\n\n\nconst IS_BROWSER = typeof window !== 'undefined' && window.name !== 'nodejs';\nconst MOUNT_ID = 'root';\n\nlet AppWrapper = null;\n\nfunction render() {\n  AppWrapper = createApp({\n    // plugin parameters for runtime...\n  })(App);\n  if (IS_BROWSER) {\n    customBootstrap(AppWrapper);\n  }\n  return AppWrapper;\n}\n\nAppWrapper = render();\n\nexport default AppWrapper;\n\n\n\nBuild Mode Entry#\n\nBuild mode refers to not using any Modern.js runtime capabilities and completely\ndefining the project's webpack entry by the developer.\n\nIf there is an index.[jt]sx file in the entry and it does not export a default\nfunction, then this file is the real webpack entry file. Similar to Create React\nApp, you need to mount the component to the DOM node by yourself, add hot update\ncode, etc. For example:\n\n\n\n\n\nReactDOM.render(, document.getElementById('root'));\n\n\nModern.js does not recommend using this method for new projects, as it loses\nsome of the framework's capabilities, such as the runtime configuration in the\nmodern.config.js file will no longer take effect. However, this method can be\nvery useful when migrating projects from other frameworks to Modern.js, such as\nCRA, or manually building webpack.\n\n\nSpecifying Entry Using Configuration#\n\nMost existing projects are not built according to the directory structure of\nModern.js. If you want to change to the directory structure of Modern.js, there\nwill be certain migration costs.\n\nIn this case, in addition to using file conventions to generate entries, you can\nmanually configure the entry in modern.config.[jt]s.\n\nexport default defineConfig({\n  source: {\n    entries: {\n      // Specify a new entry named entry_customize\n      entry_customize: './src/home/test/index.ts',\n    },\n    // Disable default ingress scanning\n    disableDefaultEntries: true,\n  },\n});\n\n\n\nDisable Default Entry Scanning#\n\nWhen using custom entries, part of the project structure may coincidentally hit\nthe directory conventions of Modern.js, but in fact, this part of the directory\nis not the real entry.\n\nModern.js provides the disableDefaultEntries configuration to disable the\ndefault entry scanning rules. When you need to customize the entry, you\ngenerally need to use disableDefaultEntries in combination with entries. This\nway, some existing projects can be quickly migrated without modifying the\ndirectory structure.\n\nexport default defineConfig({\n  source: {\n    disableDefaultEntries: true,\n  },\n});\n\n\nTIP\n\nFor detailed usage, please refer to source.entries and\nsource.disableDefaultEntries.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/concept/entries.mdx","_relativePath":"en/guides/concept/entries.mdx"},{"id":218,"title":"Glossary","routePath":"/en/guides/get-started/glossary","lang":"en","toc":[{"text":"BFF","id":"bff","depth":2,"charIndex":3},{"text":"Bundler","id":"bundler","depth":2,"charIndex":479},{"text":"Builder","id":"builder","depth":2,"charIndex":835},{"text":"CSR","id":"csr","depth":2,"charIndex":1300},{"text":"Garfish","id":"garfish","depth":2,"charIndex":1711},{"text":"Rspack","id":"rspack","depth":2,"charIndex":2153},{"text":"SSR","id":"ssr","depth":2,"charIndex":2685},{"text":"SSG","id":"ssg","depth":2,"charIndex":3440},{"text":"SWC","id":"swc","depth":2,"charIndex":4193}],"domain":"","content":"#\n\n\nBFF#\n\nBFF is short for \"Backend For Frontend\". It is an architecture pattern that\ninvolves creating a backend service for frontend applications.\n\nThe BFF service acts as an intermediary between the frontend application and the\nserver API, and can provide customized APIs for the frontend to use. This allows\nfrontend developers to have more control over the data and functionality they\nneed, without relying on the backend service to provide the corresponding\ncapabilities.\n\n\nBundler#\n\nRefers to module bundlers such as webpack, Rspack.\n\nThe main goal of bundlers is to bundle JavaScript, CSS and other files together,\nand the bundled files can be used in the browser, Node.js or other environments.\nWhen bundler processes the Web application, it builds a dependency graph and\nthen combines every module into one or more bundles.\n\n\nBuilder#\n\nRefers to the build engine. The goal of Builder is to \"reuse the best practices\nof build tools\".\n\nBundlers are low-level, when we build a project based on webpack, we need to\nfully understand the webpack config and many webpack plugins and loaders, then\nspend a lot of time to combine them.\n\nBuilder is out-of-box. By using Builder, you can quickly gain the ability to\nbuild a web application.\n\nThe layers within the Modern.js Builder are as follows:\n\n\n\n\nCSR#\n\nCSR stands for \"Client-Side Rendering\". It means that the page is rendered in\nthe browser using JavaScript, and logic such as data fetching, templates, and\nrouting is completed on the client side rather than the server.\n\nIn CSR, the server sends an empty HTML shell and some JavaScript scripts to the\nbrowser, and the browser fetching data from the server's API and renders dynamic\ncontent to the page.\n\n\nGarfish#\n\nGarfish is a micro-frontend solution mainly used to solve problems such as\ncross-team collaboration and diversified technology systems in web applications.\n\nStarting from the architecture level, it combines multiple independently\ndelivered frontend applications into a whole. These frontend applications can be\ndeveloped, tested, and deployed independently, but in the user's perspective,\nthey are still cohesive single products.\n\n\nRspack#\n\nRspack is a high performance JavaScript bundler based on Rust, with\ninteroperability with the webpack ecosystem, allowing it to be integrated into\nwebpack projects at a low cost while providing better build performance.\n\nCompared to webpack, Rspack has significantly improved build performance, thanks\nnot only to the language advantages brought by Rust, but also to its parallel\narchitecture and incremental compilation features. Benchmarking has shown that\nRspack can provide 5-10 times better compilation performance.\n\n\nSSR#\n\nSSR stands for \"Server-Side Rendering\". It means that the HTML of the web page\nis generated by the server and sent to the client, rather than sending only an\nempty HTML shell and relying on JavaScript to generate the page content.\n\nIn traditional client-side rendering, the server sends an empty HTML shell and\nsome JavaScript scripts to the client, and then fetching data from the server's\nAPI and fills the page with dynamic content. This leads to slow initial page\nloading times and is not conducive to user experience and SEO.\n\nWith SSR, the server generates HTML that already contains dynamic content and\nsends it to the client. This makes the initial page loading faster and more\nSEO-friendly, as search engines can crawl the rendered page.\n\n\nSSG#\n\nSSG stands for \"Static Site Generation\". It means that web pages are\npre-rendered as static HTML and served directly to the client, without the need\nfor the server to generate HTML in real-time.\n\nIn traditional SSR, the server generates HTML in real-time every time a user\nrequests a page. With SSG, HTML can be generated in advance during the build\nprocess and hosted on a CDN or other static resource service.\n\nCompared to traditional SSR, SSG can provide faster loading speeds and less\nserver-side overhead, as there is no need to maintain a server to generate HTML\nin real-time. However, SSG is not suitable for websites that require dynamic\ncontent, as the HTML is generated during the build process and does not support\nreal-time updates.\n\n\nSWC#\n\nSWC (Speedy Web Compiler) is a transformer and minimizer for JavaScript and\nTypeScript based on Rust. SWC can provide the same abilities with Babel, and\nit's more than 10x faster than Babel.\n\nModern.js Builder has a out-of-box plugin for SWC, power your Web application\nwith Polyfill and minification, we also port some common used Babel plugins to\nSWC.","frontmatter":{"sidebar_position":4},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/get-started/glossary.mdx","_relativePath":"en/guides/get-started/glossary.mdx"},{"id":219,"title":"Introduction","routePath":"/en/guides/get-started/introduction","lang":"en","toc":[{"text":"About Documentation","id":"about-documentation","depth":2,"charIndex":518},{"text":"Modern.js Framework","id":"modernjs-framework","depth":2,"charIndex":1159},{"text":"Next","id":"next","depth":2,"charIndex":2905}],"domain":"","content":"#\n\nModern.js is an open source web engineering system from ByteDance, which\nprovides multiple solutions to help developers solve problems in different\ndevelopment scenarios.\n\nCurrently, Modern.js includes three solutions, targeting web application\ndevelopment, npm package development, and document site development:\n\nAs part of the Modern.js engineering system, each of the above solutions can be\nused separately and has its own independent documentation site. Developers can\nchoose one or more solutions as needed.\n\n\nAbout Documentation#\n\nThe current documentation site corresponds to the Modern.js framework, which is\nused to developing web applications.\n\n * If you need to develop an npm package, please refer to the Modern.js Module\n   documentation.\n * If you need to develop a documentation site, please refer to the Modern.js\n   Doc documentation.\n * If you need to implement a web development framework based on the Modern.js\n   build engine, please refer to the Modern.js Builder documentation.\n\nTIP\n\nSince the Modern.js framework is the most widely used, in this documentation\nsite, we will omit \"framework\" and directly refer to it as Modern.js.\n\n\nModern.js Framework#\n\nThe Modern.js framework is a progressive web framework based on React. At\nByteDance, we use Modern.js to build upper-level frameworks that have supported\nthe development of thousands of web applications.\n\nModern.js can provide developers with an ultimate Development Experience and\nenable applications to have better User Experience.\n\nIn the process of developing React applications, developers usually need to\ndesign implementation plans for certain features or use other libraries and\nframeworks to solve these problems. Modern.js supports all configurations and\ntools needed by React applications, and has built-in additional features and\noptimizations. Developers can use React to build the UI of the application, and\nthen gradually adopt the features of Modern.js to solve common application\nrequirements, such as routing, data acquisition, and state management.\n\nIt mainly includes the following features:\n\n * 🚀 Rust Bundler: Provides support for dual bundlers, easily switch to the\n   Rspack for faster build speed.\n * 🪜 Progressive: Create projects with the most streamlined templates,\n   gradually enable plugin features through the generator, and customize\n   solutions.\n * 🏠 Integration: Development and production environment web server are unique,\n   CSR and SSR are isomorphic development, and API service calls are functions\n   as interfaces.\n * 📦 Out Of The Box: Default TS support, built-in build, ESLint, debugging\n   tools, fully functional and testable.\n * 🌏 Ecology: Self-developed state management, micro-frontend, module\n   packaging, Monorepo solutions, and other peripheral needs.\n * 🕸 Routing Modes: Includes self-controlled routing, file-convention-based\n   routing (nested routing), etc.\n\n\nNext#\n\nIf you want to learn how to use the Modern.js framework, you can try to create\nyour first application, or read the Quick Start guide.","frontmatter":{"title":"Introduction","sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/get-started/introduction.mdx","_relativePath":"en/guides/get-started/introduction.mdx"},{"id":220,"title":"Quick Start","routePath":"/en/guides/get-started/quick-start","lang":"en","toc":[{"text":"Environment","id":"environment","depth":2,"charIndex":3},{"text":"Node.js","id":"nodejs","depth":3,"charIndex":18},{"text":"pnpm","id":"pnpm","depth":3,"charIndex":960},{"text":"Installation","id":"installation","depth":2,"charIndex":1119},{"text":"Initialize","id":"initialize","depth":2,"charIndex":1459},{"text":"Development","id":"development","depth":2,"charIndex":2680},{"text":"Configuration","id":"configuration","depth":2,"charIndex":3011},{"text":"Build the project","id":"build-the-project","depth":2,"charIndex":3556},{"text":"Verify","id":"verify","depth":2,"charIndex":4836},{"text":"Deployment","id":"deployment","depth":2,"charIndex":5217}],"domain":"","content":"#\n\n\nEnvironment#\n\n\nNode.js#\n\nBefore getting started, you will need to install Node.js, and ensure that your\nNode.js version is higher than 14.17.6. We recommend using the LTS version of\nNode.js 16.\n\nYou can check the currently used Node.js version with the following command:\n\nnode -v\n# v16.19.1\n\n\nIf you do not have Node.js installed in your current environment, or the\ninstalled version is lower than 14.17.6, you can use nvm or fnm to install the\nrequired version.\n\nHere is an example of how to install the Node.js 16 LTS version via nvm:\n\n# Install the long-term support version of Node.js 16\nnvm install 16 --lts\n\n# Make the newly installed Node.js 16 as the default version\nnvm alias default 16\n\n# Switch to the newly installed Node.js 16\nnvm use 16\n\n\nnvm and fnm\n\nBoth nvm and fnm are Node.js version management tools. Relatively speaking, nvm\nis more mature and stable, while fnm is implemented using Rust, which provides\nbetter performance than nvm.\n\n\npnpm#\n\nIt is recommended to use pnpm to manage dependencies:\n\nnpm install -g pnpm@7\n\n\nNOTE\n\nModern.js also supports dependency management with yarn and npm.\n\n\nInstallation#\n\nModern.js provides the @modern-js/create tool to create projects. Do not install\nit globally, use npx to run it.\n\nYou can create a project in an existing empty directory:\n\nmkdir myapp && cd myapp\nnpx @modern-js/create@latest\n\n\nYou can also create a project directly in a new directory:\n\nnpx @modern-js/create@latest myapp\n\n\n\nInitialize#\n\n@modern-js/create provides an interactive Q & A interface to initialize the\nproject based on the results, with initialization performed according to the\ndefault settings:\n\n? Please select the type of project you want to create: Web App\n? Please select the programming language: TS\n? Please select the package manager: pnpm\n? Please select the bundler: webpack\n\n\nAfter create the project, Modern.js will automatically install dependencies and\ncreate a git repository.\n\n[INFO] dependencies are automatically installed\n[INFO] git repository has been automatically created\n[INFO] Success！\nYou can run the following command in the directory of the new project:\npnpm run dev          # Starting the dev server\npnpm run build        # Build the app for production\npnpm run serve        # Preview the production build locally\npnpm run lint         # Run ESLint and automatically fix problems\npnpm run new          # Enable optional features or add a new entry\n\n\nNow, the project structure is as follows:\n\n.\n├── src\n│   ├── modern-app-env.d.ts\n│   └── routes\n│       ├── index.css\n│       ├── layout.tsx\n│       └── page.tsx\n├── modern.config.ts\n├── package.json\n├── pnpm-lock.yaml\n├── README.md\n└── tsconfig.json\n\n\n\nDevelopment#\n\nRun pnpm run dev in the project to start the project:\n\n$ pnpm run dev\n\n> modern dev\n\ninfo    Starting dev server...\ninfo    App running at:\n\n  > Local:    http://localhost:8080/\n  > Network:  http://192.168.0.1:8080/\n\n Client ✔ done in 76.10ms\n\n\nOpen http://localhost:8000/ in your browser to see the page content.\n\n\nConfiguration#\n\nIn a Modern.js project created using @modern-js/create, a modern.config.ts file\nis generated by default.\n\nYou can modify the configuration through this file to override the default\nbehavior of Modern.js. For example, to enable SSR, add the following\nconfiguration:\n\n\n\nexport default defineConfig({\n  runtime: {\n    router: true,\n    state: true,\n  },\n  server: {\n    ssr: true,\n  },\n});\n\n\nAfter running pnpm run dev again, you can find that the project has completed\npage rendering on the server in the browser's Network menu.\n\n\nBuild the project#\n\nTo build the production artifacts of the project, run pnpm run build in the\nproject:\n\n$ pnpm run build\n\n> modern build\n\ninfo    Create a production build...\n\ninfo    File sizes after production build:\n\n  File                                      Size         Gzipped\n  dist/static/js/lib-corejs.ffeb7fb8.js     214.96 kB    67.23 kB\n  dist/static/js/lib-react.09721b5c.js      152.61 kB    49.02 kB\n  dist/static/js/218.102e2f39.js            85.45 kB     28.5 kB\n  dist/static/js/lib-babel.a7bba875.js      11.93 kB     3.95 kB\n  dist/html/main/index.html                 5.84 kB      2.57 kB\n  dist/static/js/main.3568a38e.js           3.57 kB      1.44 kB\n  dist/static/css/async/304.c3c481a5.css    2.62 kB      874 B\n  dist/asset-manifest.json                  1.48 kB      349 B\n  dist/static/js/async/304.c45706bc.js      1.4 kB       575 B\n  dist/static/js/async/509.fcb06e14.js      283 B        230 B\n\n Client ✔ done in 3.57s\n\n\nBy default, the build artifacts are generated in dist/, with the following\ndirectory structure:\n\ndist\n├── html\n│   └── main\n├── modern.config.json\n├── route.json\n├── routes-manifest.json\n└── static\n    ├── css\n    └── js\n\n\n> If you need to customize the directory of the build artifacts, please refer to\n> Output files.\n\n\nVerify#\n\nRun pnpm run serve in the project to verify whether the build artifacts run\nnormally locally:\n\n$ pnpm run serve\n\n> modern serve\n\nStarting the modern server...\ninfo    App running at:\n\n  > Local:    http://localhost:8080/\n  > Network:  http://192.168.0.1:8080/\n\n\nOpen http://localhost:8000/ in the browser, and the content should be consistent\nwith that of pnpm run dev.\n\n\nDeployment#\n\nAfter local verification, you can organize the artifacts in dist/ into the\nstructure required by the server for deployment.","frontmatter":{"title":"Quick Start","sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/get-started/quick-start.mdx","_relativePath":"en/guides/get-started/quick-start.mdx"},{"id":221,"title":"Upgrade","routePath":"/en/guides/get-started/upgrade","lang":"en","toc":[{"text":"Upgrade with command","id":"upgrade-with-command","depth":2,"charIndex":3},{"text":"Upgrade to a specified version","id":"upgrade-to-a-specified-version","depth":2,"charIndex":442},{"text":"Lock nested dependency","id":"lock-nested-dependency","depth":2,"charIndex":806},{"text":"pnpm","id":"pnpm","depth":3,"charIndex":1010},{"text":"Yarn","id":"yarn","depth":3,"charIndex":1245},{"text":"Npm","id":"npm","depth":3,"charIndex":1460}],"domain":"","content":"#\n\n\nUpgrade with command#\n\nModern.js provides the upgrade command to support upgrading the project to the\nlatest version of Modern.js.\n\nRun pnpm run upgrade in the project:\n\n$ pnpm run upgrade\n\n> modern upgrade\n\n[INFO] [Project Type]: Web App\n[INFO] [Modern.js Latest Version]: 2.0.0\n[INFO] Upgrade Modern.js package version success!\n\n\nYou can see that the dependencies in the project's package.json have been\nupdated to the latest version.\n\n\nUpgrade to a specified version#\n\nAll packages of Modern.js are currently released with a uniform version number.\n\nAccording to the Release Note on the official website, developers can also\nmanually upgrade the project to the desired version.\n\nTIP\n\nWhen upgrading, you need to upgrade all packages provided by Modern.js, instead\nof upgrading a single dependency.\n\n\nLock nested dependency#\n\nWhen a nested dependency of the project has a problem and Modern.js cannot be\nupdated immediately, you can use the package manager to lock the version of the\nnested dependency.\n\n\npnpm#\n\nFor projects using pnpm, add the following configuration to the package.json in\nthe root directory of the project, and then run pnpm install again:\n\n{\n  \"pnpm\": {\n    \"overrides\": {\n      \"package-name\": \"^1.0.0\"\n    }\n  }\n}\n\n\n\nYarn#\n\nFor projects using Yarn, add the following configuration to the package.json in\nthe root directory of the project, and then run yarn install again:\n\n{\n  \"resolutions\": {\n    \"package-name\": \"^1.0.0\"\n  }\n}\n\n\n\nNpm#\n\nFor projects using Npm, add the following configuration to the package.json in\nthe root directory of the project, and then run npm install again:\n\n{\n  \"overrides\": {\n    \"package-name\": \"^1.0.0\"\n  }\n}\n\n\nINFO\n\nFor Monorepo repositories, you can only lock dependency versions in the\npackage.json in the root directory of the project, and it will affect all\npackages in the Monorepo.","frontmatter":{"title":"Upgrade","sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/get-started/upgrade.mdx","_relativePath":"en/guides/get-started/upgrade.mdx"},{"id":222,"title":"Add Changesets","routePath":"/en/guides/topic-detail/changesets/add","lang":"en","toc":[{"text":"Information","id":"information","depth":2,"charIndex":112},{"text":"Steps","id":"steps","depth":2,"charIndex":331},{"text":"NPM Module","id":"npm-module","depth":3,"charIndex":480},{"text":"Run the change command in the root directory:","id":"run-the-change-command-in-the-root-directory:","depth":4,"charIndex":493},{"text":"Select the type of version for this change","id":"select-the-type-of-version-for-this-change","depth":4,"charIndex":559},{"text":"Fill in the changelog information","id":"fill-in-the-changelog-information","depth":4,"charIndex":606},{"text":"Monorepo","id":"monorepo","depth":3,"charIndex":920},{"text":"Run the change command in the root directory","id":"run-the-change-command-in-the-root-directory","depth":4,"charIndex":1019},{"text":"Select the list of packages to upgrade for this change","id":"select-the-list-of-packages-to-upgrade-for-this-change","depth":4,"charIndex":1084},{"text":"Select the packages corresponding to different version types","id":"select-the-packages-corresponding-to-different-version-types","depth":4,"charIndex":1485},{"text":"Fill in the changelog information","id":"fill-in-the-changelog-information-1","depth":4,"charIndex":1706},{"text":"Parameters","id":"parameters","depth":2,"charIndex":2092},{"text":"Notes","id":"notes","depth":2,"charIndex":2484}],"domain":"","content":"#\n\nWhen we finish development, we need to add a changeset to declare the current\nchanges for version releases.\n\n\nInformation#\n\nA changeset includes:\n\n * Which packages are affected by this change.\n\n * The type of version for this change, which complies with the semver\n   specification.\n\n * Changelog information for this change.\n\n\nSteps#\n\nINFO\n\nThe following example commands are all using pnpm. If you need to use other\npackage management tools, please replace them as needed.\n\n\nNPM Module#\n\nRun the change command in the root directory:#\n\npnpm run change\n\n\nSelect the type of version for this change#\n\n\n\nFill in the changelog information#\n\n\n\nAfter running, a corresponding changeset file will be created in the .changeset\ndirectory of the project, and the file content is as follows:\n\n---\n'module-changeset': patch\n---\n\nfeat: test module solution changeset\n\n\nThis file contains all the information of the changeset.\n\n\nMonorepo#\n\nThere are three NPM module packages in the monorepo, module-1, module-2, and\nmodule-3.\n\nRun the change command in the root directory#\n\npnpm run change\n\n\nSelect the list of packages to upgrade for this change#\n\nChangesets will categorize the packages in the Monorepo into two categories,\nchanged packages and unchanged packages, based on the current code changes (git\ndiff Head...baseBranch), making it easy for users to choose.\n\nUse the space key to select the corresponding package or category, and then\npress Enter after the selection is completed:\n\n\n\nSelect the packages corresponding to different version types#\n\nChangesets will ask about the major and minor types. If there are packages that\nhave not selected these two types, the patch type will be used by default.\n\n\n\nFill in the changelog information#\n\n\n\nAfter running, a corresponding changeset file will be created in the .changeset\ndirectory of the project, and the file content is as follows:\n\n---\n'module-2': minor\n'module-3': patch\n---\n\nfeat: test-changeset\n\n\nThis file contains all the information of the changeset, and different packages\nwill be marked according to the selected version type.\n\n\nParameters#\n\nThe change command supports the following parameters:\n\n * --empty: Adds an empty changeset.\n\npnpm run change --empty\n\n\nAfter running, an empty changeset file will be created in the .changeset\ndirectory of the project, and the file content is as follows:\n\n---\n---\n\n\n * --open: When using this parameter, the system default editor will be opened\n   for filling in the changelog.\n\n\nNotes#\n\n * Not all changes require changesets\n\nIf the current change is to modify some infrastructure of the repository, such\nas CI, testing, etc., there is no need to add changesets, or an empty changeset\ncan be added.\n\n * Multiple changesets can be submitted in one pull request\n\nWhen a pull request has multiple feature developments or bug fixes, multiple\npnpm run change commands can be executed to add multiple changeset files. Each\nfile selects the corresponding packages for the feature and adds change\ninformation.\n\n * When creating a changeset, all packages related to the feature need to be\n   selected\n\nWhen creating a changeset in a Monorepo, all related packages to the feature\nneed to be selected to avoid some packages not being published when releasing.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/changesets/add.mdx","_relativePath":"en/guides/topic-detail/changesets/add.mdx"},{"id":223,"title":"Customizing Changelog","routePath":"/en/guides/topic-detail/changesets/changelog","lang":"en","toc":[{"text":"Customizing Changelog Content","id":"customizing-changelog-content","depth":2,"charIndex":187},{"text":"getReleaseLine","id":"getreleaseline","depth":3,"charIndex":574},{"text":"Params","id":"params","depth":4,"charIndex":591},{"text":"Returns","id":"returns","depth":4,"charIndex":1113},{"text":"Default Implementation","id":"default-implementation","depth":4,"charIndex":1143},{"text":"getDependencyReleaseLine","id":"getdependencyreleaseline","depth":3,"charIndex":1796},{"text":"Params","id":"params-1","depth":4,"charIndex":1823},{"text":"Returns","id":"returns-1","depth":4,"charIndex":2489},{"text":"Default Implementation","id":"default-implementation-1","depth":4,"charIndex":2519},{"text":"Configuration","id":"configuration","depth":2,"charIndex":3570},{"text":"Configuring Relative Paths","id":"configuring-relative-paths","depth":3,"charIndex":4119},{"text":"Using Npm Module","id":"using-npm-module","depth":3,"charIndex":4657},{"text":"Use npx @modern-js/create@latest to create a module project.","id":"use-npx-@modern-js/create@latest-to-create-a-module-project","depth":4,"charIndex":4778},{"text":"Implement Custom Content","id":"implement-custom-content","depth":4,"charIndex":5049},{"text":"Publish the module to NPM","id":"publish-the-module-to-npm","depth":4,"charIndex":5173},{"text":"Install the module in the root directory of the target repository, such as custom-changelog.","id":"install-the-module-in-the-root-directory-of-the-target-repository,-such-as-custom-changelog","depth":4,"charIndex":-1},{"text":"Configure the changelog configuration of changesets as the package name.","id":"configure-the-changelog-configuration-of-changesets-as-the-package-name","depth":4,"charIndex":5296},{"text":"Using Monorepo Sub-Project","id":"using-monorepo-sub-project","depth":3,"charIndex":5420},{"text":"Run pnpm run new to create a NPM module sub-project","id":"run-pnpm-run-new-to-create-a-npm-module-sub-project","depth":4,"charIndex":5548},{"text":"Implement Custom Content","id":"implement-custom-content-1","depth":4,"charIndex":5838},{"text":"Add the sub-project module dependency, such as custom-changelog, to the Monorepo root directory","id":"add-the-sub-project-module-dependency,-such-as-custom-changelog,-to-the-monorepo-root-directory","depth":4,"charIndex":-1},{"text":"Configure the changelog configuration of Changesets as the package name","id":"configure-the-changelog-configuration-of-changesets-as-the-package-name","depth":4,"charIndex":6141}],"domain":"","content":"#\n\nBy default, Changesets will use @changesets/cli/changelog to generate changelog.\nIf the default changelog cannot meet the requirements, you can customize the\ngeneration of changelog.\n\n\nCustomizing Changelog Content#\n\nChangelog mainly includes the following two types of information:\n\n * Changelog written in the changeset.\n\n * Version change information of related packages in this version upgrade.\n\nThe custom logic mainly implements two functions, getReleaseLine and\ngetDependencyReleaseLine, which are used to define the above two types of\ninformation, respectively.\n\n\ngetReleaseLine#\n\nParams#\n\n * changeset\n\nexport type VersionType = 'major' | 'minor' | 'patch' | 'none';\n\nexport type Release = { name: string; type: VersionType };\n\nexport type Changeset = {\n  id: string; // changeset id\n  commit?: string; // changeset commit id\n  summary: string; // changeset summary content\n  releases: Array; // The name and type information of the current computed changeset upgrade package.\n};\n\n\n * type\n\nThe upgraded version type corresponding to the current package, which is of type\nVersionType mentioned above.\n\nReturns#\n\nChangelog content.\n\nDefault Implementation#\n\nThe default processing logic of @changesets/cli/changelog is to split the\nsummary information according to the newline \\n, add - as the list header before\nthe first line, and organize other content as the supplement of the first line\nbelow the list.\n\nasync function getReleaseLine(changeset, type) {\n  const [firstLine, ...futureLines] = changeset.summary\n    .split('\\n')\n    .map(l => l.trimRight());\n\n  let returnVal = `- ${\n    changeset.commit ? `${changeset.commit}: ` : ''\n  }${firstLine}`;\n\n  if (futureLines.length > 0) {\n    returnVal += `\\n${futureLines.map(l => `  ${l}`).join('\\n')}`;\n  }\n\n  return returnVal;\n}\n\n\n\ngetDependencyReleaseLine#\n\nParams#\n\n * changesets\n\nAll associated changeset information, which is an array of getReleaseLine\nchangeset types.\n\n * dependenciesUpdated\n\ntype ModCompWithPackage = {\n  name: string; // Name of the dependent module\n  type: VersionType; // Upgrade type of the dependent module\n  oldVersion: string; // Current version of the dependent module\n  newVersion: string; // New version of the dependent module\n  changesets: string[]; // List of associated changeset ids\n  packageJson: PackageJSON; // Complete package.json content of the dependent module\n  dir: string; // Path (absolute path) of the dependent module\n};\n\ntype DependenciesUpdated = ModCompWithPackage[];\n\n\nReturns#\n\nChangelog content.\n\nDefault Implementation#\n\nBy default, @changesets/cli/changelog will display the corresponding Updated\ndependencies + commit id information of the changesets as a list. Then, based on\nthe dependenciesUpdated information, it will display the package name and new\nversion of the corresponding dependency package as a child list item of the\nlist.\n\nasync function getDependencyReleaseLine(changesets, dependenciesUpdated) {\n  console.log('getDependencyReleaseLine', changesets, dependenciesUpdated);\n  if (dependenciesUpdated.length === 0) return '';\n\n  const changesetLinks = changesets.map(\n    changeset =>\n      `- Updated dependencies${\n        changeset.commit ? ` [${changeset.commit}]` : ''\n      }`,\n  );\n\n  const updatedDepenenciesList = dependenciesUpdated.map(\n    dependency => `  - ${dependency.name}@${dependency.newVersion}`,\n  );\n\n  return [...changesetLinks, ...updatedDepenenciesList].join('\\n');\n}\n\n\nIt is displayed as follows:\n\n- Updated dependencies [f0438ab]\n- Updated dependencies [f0438ab]\n  - module-3@2.0.0\n  - module-1@0.2.0\n\n\n\nConfiguration#\n\nThe changelog field in the changesets configuration file is used to mark the way\nto get changelog.\n\nThis configuration can be a string, directly declaring the module name or path\nof the changelog module.\n\nThis configuration also supports configuring arrays. The first element in the\narray is the module name or path of the changelog module, and the second element\nis the parameter value passed to the corresponding function, which will be\npassed as the third parameter of the getReleaseLine and getDependencyReleaseLine\nfunctions.\n\n\nConfiguring Relative Paths#\n\nIf the changelog configuration is a relative path, it is a relative path under\nthe .changesets directory.\n\nFor example, create the .changeset/my-changelog-config.js file and define the\nfollowing content:\n\nasync function getReleaseLine(changeset, type) {}\n\nasync function getDependencyReleaseLine(changesets, dependenciesUpdated) {}\n\nmodule.exports = {\n  getReleaseLine,\n  getDependencyReleaseLine,\n};\n\n\nConfigure changlog as ./my-changelog-config.js:\n\n{\n  \"changelog\": \"./my-changelog-config.js\",\n   ...\n}\n\n\n\nUsing Npm Module#\n\nCustomizing changelog can also be managed using the NPM module project to\nprovide a common solution.\n\nUse npx @modern-js/create@latest to create a module project.#\n\n? Please select the type of project you want to create: Npm Module\n? Please fill in the project name: custom-changelog\n? Please select the programming language: TS\n? Please select the package manager: pnpm\n\n\nImplement Custom Content#\n\nexport async function getReleaseLine() {}\n\nexport async function getDependencyReleaseLine() {}\n\n\nPublish the module to NPM#\n\nInstall the module in the root directory of the target repository, such as\ncustom-changelog.#\n\nConfigure the changelog configuration of changesets as the package name.#\n\n{\n  \"changelog\": \"custom-changelog\",\n   ...\n}\n\n\n\nUsing Monorepo Sub-Project#\n\nIf your current repository is Monorepo, you can directly manage it using NPM\nmodule sub-projects.\n\nRun pnpm run new to create a NPM module sub-project#\n\n? Please select the type of project you want to create: Npm Module\n? Please fill in the sub-project name: custom-changelog\n? Please fill in the sub-project directory name: custom-changelog\n? Please select the programming language: TS\n\n\nImplement Custom Content#\n\nexport async function getReleaseLine() {}\n\nexport async function getDependencyReleaseLine() {}\n\n\nAdd the sub-project module dependency, such as custom-changelog, to the Monorepo\nroot directory#\n\n{\n  \"devDependencies\": {\n    \"custom-changelog\": \"workspace: *\",\n    ...\n  }\n}\n\n\nConfigure the changelog configuration of Changesets as the package name#\n\n{\n  \"changelog\": \"custom-changelog\",\n   ...\n}\n\n\nAfter the module is published to NPM, it can still be used like a module type\nfor other repositories.","frontmatter":{"sidebar_position":6},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/changesets/changelog.mdx","_relativePath":"en/guides/topic-detail/changesets/changelog.mdx"},{"id":224,"title":"Customizing Commit Messages","routePath":"/en/guides/topic-detail/changesets/commit","lang":"en","toc":[{"text":"Customizing Commit Message Content","id":"customizing-commit-message-content","depth":2,"charIndex":349},{"text":"getAddMessage","id":"getaddmessage","depth":3,"charIndex":754},{"text":"Params","id":"params","depth":4,"charIndex":770},{"text":"Returns","id":"returns","depth":4,"charIndex":1182},{"text":"Default Implementation","id":"default-implementation","depth":4,"charIndex":1217},{"text":"getVersionMessage","id":"getversionmessage","depth":3,"charIndex":1963},{"text":"Params","id":"params-1","depth":4,"charIndex":1983},{"text":"Returns","id":"returns-1","depth":4,"charIndex":3193},{"text":"Default Implementation","id":"default-implementation-1","depth":4,"charIndex":3228},{"text":"Configuration","id":"configuration","depth":2,"charIndex":4168},{"text":"Configuring Relative Paths","id":"configuring-relative-paths","depth":3,"charIndex":4979},{"text":"Using NPM Module","id":"using-npm-module","depth":3,"charIndex":5479},{"text":"Use npx @modern-js/create@latest to create a module project","id":"use-npx-@modern-js/create@latest-to-create-a-module-project","depth":4,"charIndex":5597},{"text":"Implement Custom Content","id":"implement-custom-content","depth":4,"charIndex":5864},{"text":"Publish the module to NPM","id":"publish-the-module-to-npm","depth":4,"charIndex":5980},{"text":"Install the corresponding module in the root directory of the target repository, such as custom-commit","id":"install-the-corresponding-module-in-the-root-directory-of-the-target-repository,-such-as-custom-commit","depth":4,"charIndex":-1},{"text":"Configure the commit configuration of changesets as the package name","id":"configure-the-commit-configuration-of-changesets-as-the-package-name","depth":4,"charIndex":6113},{"text":"Using Monorepo Sub-Project","id":"using-monorepo-sub-project","depth":3,"charIndex":6227},{"text":"Run pnpm run new to create a module sub-project","id":"run-pnpm-run-new-to-create-a-module-sub-project","depth":4,"charIndex":6355},{"text":"Implement Custom Content","id":"implement-custom-content-1","depth":4,"charIndex":6635},{"text":"Add the sub-project module dependency, such as custom-commit, to the Monorepo root directory","id":"add-the-sub-project-module-dependency,-such-as-custom-commit,-to-the-monorepo-root-directory","depth":4,"charIndex":-1},{"text":"Configure the commit configuration of Changesets as the package name","id":"configure-the-commit-configuration-of-changesets-as-the-package-name-1","depth":4,"charIndex":-1}],"domain":"","content":"#\n\nChangesets supports configuring commit to automatically submit the current\nchanges when running the change and bump commands.\n\nThe default commit information is provided by @changesets/cli/commit, and the\ndefault information format is:\n\n\n\nWhen the default commit information cannot meet the requirements, custom commit\ninformation is supported.\n\n\nCustomizing Commit Message Content#\n\nCommit information is divided into two types:\n\n * Commit information automatically generated when running the change command.\n * Commit information automatically generated when running the bump command.\n\nThe custom logic mainly implements two functions, getAddMessage and\ngetVersionMessage, which are used to define the above two types of information,\nrespectively.\n\n\ngetAddMessage#\n\nParams#\n\n * changeset\n\nThe current changeset information created.\n\ntype Release = {\n  name: string;\n  type: VersionType;\n};\n\ntype Changeset = {\n  summary: string;\n  releases: Array;\n};\n\n\n * options\n\nConfiguration information when committing.\n\n> When the commit configuration is an array, the second parameter supports\n> passing in default configuration information, which will be used to pass this\n> parameter.\n\nReturns#\n\nCommit message content.\n\nDefault Implementation#\n\nThe default processing logic of @changesets/cli/commit is to start with\ndocs(changeset):, and the commit information is the summary of the changeset,\nand [skip ci] information is added according to the skipCI parameter\nconfiguration passed in.\n\ntype SkipCI = boolean | 'add' | 'version';\n\nconst getAddMessage = async (\n  changeset: Changeset,\n  options: { skipCI?: SkipCI } | null,\n) => {\n  const skipCI = options?.skipCI === 'add' || options?.skipCI === true;\n  return outdent`docs(changeset): ${changeset.summary}${\n    skipCI ? `\\n\\n[skip ci]\\n` : ''\n  }`;\n};\n\n\n> outdent is used to remove the leading whitespace content of the template\n> string to make the commit information more compliant with the specification.\n\n\ngetVersionMessage#\n\nParams#\n\n * releasePlan\n\ntype VersionType = 'major' | 'minor' | 'patch' | 'none';\n\ntype Release = {\n  name: string;\n  type: VersionType;\n};\n\ntype Changeset = {\n  id: string;\n  summary: string;\n  releases: Array;\n};\n\ntype ComprehensiveRelease = {\n  name: string;\n  type: VersionType;\n  oldVersion: string;\n  newVersion: string;\n  changesets: string[];\n};\n\ntype PreState = {\n  mode: 'pre' | 'exit'; // Current state of pre mode\n  tag: string; // Type of pre\n  initialVersions: {\n    [pkgName: string]: string; // Package name and version information before version upgrade\n  };\n  changesets: string[]; // List of changeset ids for this upgrade\n};\n\ntype ReleasePlan = {\n  changesets: Changeset[]; // List of changesets for this upgrade\n  releases: ComprehensiveRelease[]; // Information of the current upgrade, including package name, current version, upgraded version, and upgrade type\n  preState: PreState | undefined; // If it is a pre-release, provide relevant state information\n};\n\n\n * options\n\nConfiguration information when committing.\n\n> When the commit configuration is an array, the second parameter supports\n> passing in default configuration information, which will be used to pass this\n> parameter.\n\nReturns#\n\nCommit message content.\n\nDefault Implementation#\n\nThe default processing logic of @changesets/cli/commit is to first display the\nnumber of packages that need to be released, then display the names and new\nversion of the released packages, and [skip ci] information is added according\nto the skipCI parameter configuration passed in.\n\nconst getVersionMessage = async (\n  releasePlan: ReleasePlan,\n  options: { skipCI?: SkipCI } | null,\n) => {\n  const skipCI = options?.skipCI === 'version' || options?.skipCI === true;\n  const publishableReleases = releasePlan.releases.filter(\n    release => release.type !== 'none',\n  );\n  const numPackagesReleased = publishableReleases.length;\n\n  const releasesLines = publishableReleases\n    .map(release => `  ${release.name}@${release.newVersion}`)\n    .join('\\n');\n\n  return outdent`\n    RELEASING: Releasing ${numPackagesReleased} package(s)\n\n    Releases:\n    ${releasesLines}\n    ${skipCI ? `\\n[skip ci]\\n` : ''}\n`;\n};\n\n\n\nConfiguration#\n\nThe commit field in the changesets configuration file is used to mark whether to\nsubmit commit information when running the change and bump commands, and the way\nto obtain commit information.\n\nThis configuration can be a boolean. When it is true, the default\n@changesets/cli/commit formatting commit information will be used.\n\nThis configuration can be a string, directly declaring the module name or path\nof the commit information acquisition module.\n\nThis configuration also supports configuring arrays. The first element in the\narray is the module name or path of the commit information acquisition module,\nand the second element is the parameter value passed to the corresponding\nfunction, which will be passed as the second parameter of the getAddMessage and\ngetVersionMessage functions.\n\n\nConfiguring Relative Paths#\n\nIf the commit configuration is a relative path, it is a relative path under the\n.changesets directory.\n\nFor example, create the .changeset/my-commit-config.js file and define the\nfollowing content:\n\nasync function getAddMessage(changeset, options) {}\n\nasync function getVersionMessage(releasePlan, options) {}\n\nmodule.exports = {\n  getAddMessage,\n  getVersionMessage,\n};\n\n\nConfigure commit as ./my-commit-config.js:\n\n{\n  \"changelog\": \"./my-commit-config.js\",\n   ...\n}\n\n\n\nUsing NPM Module#\n\nCustomizing commit can also be managed using the NPM module project to provide a\ncommon solution.\n\nUse npx @modern-js/create@latest to create a module project#\n\n? Please select the type of project you want to create: Npm Module\n? Please fill in the project name: custom-commit\n? Please select the programming language: TS\n? Please select the package manager: pnpm\n\n\nImplement Custom Content#\n\nexport async function getAddMessage() {}\n\nexport async function getVersionMessage() {}\n\n\nPublish the module to NPM#\n\nInstall the corresponding module in the root directory of the target repository,\nsuch as custom-commit#\n\nConfigure the commit configuration of changesets as the package name#\n\n{\n  \"commit\": \"custom-commit\",\n   ...\n}\n\n\n\nUsing Monorepo Sub-Project#\n\nIf your current repository is Monorepo, you can directly manage it using NPM\nmodule sub-projects.\n\nRun pnpm run new to create a module sub-project#\n\n? Please select the type of project you want to create: Npm Module\n? Please fill in the sub-project name: custom-commit\n? Please fill in the sub-project directory name: custom-commit\n? Please select the programming language: TS\n\n\nImplement Custom Content#\n\nexport async function getAddMessage() {}\n\nexport async function getVersionMessage() {}\n\n\nAdd the sub-project module dependency, such as custom-commit, to the Monorepo\nroot directory#\n\n{\n  \"devDependencies\": {\n    \"custom-commit\": \"workspace: *\",\n    ...\n  }\n}\n\n\nConfigure the commit configuration of Changesets as the package name#\n\n{\n  \"commit\": \"custom-commit\",\n   ...\n}\n\n\nAfter the module is published to NPM, it can still be used like a module type\nfor other repositories.","frontmatter":{"sidebar_position":7},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/changesets/commit.mdx","_relativePath":"en/guides/topic-detail/changesets/commit.mdx"},{"id":225,"title":"Changesets Configuration","routePath":"/en/guides/topic-detail/changesets/config","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":237},{"text":"commit","id":"commit","depth":3,"charIndex":253},{"text":"access","id":"access","depth":3,"charIndex":619},{"text":"baseBranch","id":"basebranch","depth":3,"charIndex":1232},{"text":"ignore","id":"ignore","depth":3,"charIndex":1402},{"text":"fixed","id":"fixed","depth":3,"charIndex":1636},{"text":"linked","id":"linked","depth":3,"charIndex":1941},{"text":"updateInternalDependencies","id":"updateinternaldependencies","depth":3,"charIndex":2285},{"text":"changelog","id":"changelog","depth":3,"charIndex":3228},{"text":"___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH","id":"___experimentalunsafeoptions_will_change_in_patch","depth":3,"charIndex":3957},{"text":"onlyUpdatePeerDependentsWhenOutOfRange","id":"onlyupdatepeerdependentswhenoutofrange","depth":4,"charIndex":4044},{"text":"updateInternalDependents","id":"updateinternaldependents","depth":4,"charIndex":4473},{"text":"useCalculatedVersionForSnapshots","id":"usecalculatedversionforsnapshots","depth":4,"charIndex":4882}],"domain":"","content":"#\n\nWhen initializing a Modern.js repository, the configuration file for changesets\nwill be initialized by default, that is, the .changeset/config.json file. Below,\nwe will learn in detail what configurations are supported in this file.\n\n\nIntroduction#\n\n\ncommit#\n\nType: boolean\n\nDefault: false\n\nWhen this field is configured as true, the code submission operation will be\nautomatically executed when running the change and bump commands.\n\nThe default commit information format is as follows:\n\n\n\nThis commit information supports customization, which we will discuss in detail\nin the Customizing Commit Messages chapter.\n\n\naccess#\n\nType: restricted | public\n\nDefault: restricted\n\nUsed to configure the publishing form of the current package. If configured as\nrestricted, it will be published as a private package. If it is public, it will\nbe published as a public scope package.\n\nFor packages that need to configure access in the repository, publishConfig can\nbe configured in package.json, for example:\n\n{\n  \"publishConfig\": {\n    \"registry\": \"https://registry.npmjs.org/\",\n    \"access\": \"public\"\n  }\n}\n\n\nFor packages that don't need to be published, you can set private to true in\npackage.json to prevent them from being published.\n\n\nbaseBranch#\n\nType: string\n\nDefault: main\n\nRepository main branch. This configuration is used to calculate the changed\npackages of the current branch and classify them.\n\n\nignore#\n\nType: string[]\n\nDefault: []\n\nUsed to declare packages to be ignored when running the bump command. The usage\nis consistent with the --ignore parameter of the bump command. Note that the two\ncannot be used at the same time.\n\n\nfixed#\n\nType: string[][]\n\nDefault: []\n\nUsed to group packages in monorepos. The version of packages in the same group\nwill be bound, and each time the bump command is run, a package in the same\ngroup is upgraded, others will be upgraded together. Regular expressions can be\nused to match package names.\n\n\nlinked#\n\nType: string[][]\n\nDefault: []\n\nSimilar to fixed, it also groups packages in monorepos, but only the packages\nrelated to the changeset declaration will be upgraded when the bump command is\nrun, and the version of the changeset packages in the same group will remain\nconsistent. Regular expressions can be used to match package names.\n\n\nupdateInternalDependencies#\n\nType: patch | minor\n\nDefault: patch\n\nUsed to declare the version number rule for updating internal dependencies.\n\nWhen upgrading the version number by running the bump command, the dependency\ndeclaration using the package in the repository will be automatically updated by\ndefault. After configuring this field as minor, if the version number is\nupgraded to patch, the reference dependency declaration will not be updated\nautomatically.\n\nFor example:\n\npkg-a @ version 1.0.0\npkg-b @ version 1.0.0\n  depends on pkg-a at range `^1.0.0\n\n\nBy default, when upgrading pkg-a to 1.0.1, the dependency version of pkg-a in\npkg-b will be updated to ^1.0.1.\n\nWhen configuring updateInternalDependencies as minor, when upgrading pkg-a to\n1.0.1, the dependency version of pkg-a in pkg-b will not be updated. Only when\nthe version number of pkg-a is upgraded to 1.1.0 or 2.0.0, the dependency of\npkg-a in pkg-b will be updated.\n\n\nchangelog#\n\nType: boolean | string | [string, unknow]\n\nDefault: @changesets/cli/changelog\n\nThe rule for generating changelog.\n\nWhen configured as false, only the version number will be declared in the\nCHANGELOG.md file when running the bump command, and no other changelog\ninformation will be declared.\n\n\n\nWhen configured as @changesets/cli/changelog, the official provided changelog\ngeneration rule will be used to convert the changeset information into changelog\ncontent.\n\nWhen configured as an array, the first parameter is a custom NPM package or\npath, and the second parameter is the default parameter configuration that needs\nto be passed in. We will explain the custom format in the subsequent Custom\nChangelog section.\n\n\n___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH#\n\nSome experimental configurations.\n\nonlyUpdatePeerDependentsWhenOutOfRange#\n\nType: boolean\n\nDefault: false\n\nConfiguration for the upgrade strategy of peerDependence dependencies. By\ndefault, when peerDependence is upgraded to a minor or major version, the\ncurrent package will be upgraded to a major version.\n\nWhen this configuration is set to true, the version will only be updated when\nthe declared dependencies of peerDependence are outside the declared range.\n\nupdateInternalDependents#\n\nType: always | out-of-range\n\nDefault: always\n\nWhen upgrading the version number by running the bump command, the dependency\ndeclaration using the package in the repository will be automatically updated by\ndefault. When this parameter is set to out-of-range, the dependency declaration\nusing the package in the repository will be updated only when it is outside the\ndeclared range.\n\nuseCalculatedVersionForSnapshots#\n\nType: boolean\n\nDefault: false\n\nWhen publishing snapshots, the version format of 0.0.0-timestamp will be used by\ndefault to ensure that users can use pre-release versions normally. When you\nneed to ignore the above problem and use the normal version number format, that\nis, the current version is 1.0.1, and the snapshot version is expected to use\n1.0.1-timestamp, you can configure this parameter as true.","frontmatter":{"sidebar_position":5},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/changesets/config.mdx","_relativePath":"en/guides/topic-detail/changesets/config.mdx"},{"id":226,"title":"Using Github related tools","routePath":"/en/guides/topic-detail/changesets/github","lang":"en","toc":[{"text":"BOT","id":"bot","depth":2,"charIndex":3},{"text":"Installation","id":"installation","depth":3,"charIndex":163},{"text":"Configuration","id":"configuration","depth":3,"charIndex":278},{"text":"Usage","id":"usage","depth":3,"charIndex":429},{"text":"No changeset added","id":"no-changeset-added","depth":4,"charIndex":603},{"text":"Changeset added","id":"changeset-added","depth":4,"charIndex":753},{"text":"No need for changeset","id":"no-need-for-changeset","depth":4,"charIndex":836},{"text":"Action","id":"action","depth":2,"charIndex":1002},{"text":"Automatically create Release Pull Request","id":"automatically-create-release-pull-request","depth":3,"charIndex":1012},{"text":"Usage","id":"usage-1","depth":4,"charIndex":1261},{"text":"Automatic Release","id":"automatic-release","depth":3,"charIndex":3014},{"text":"Usage","id":"usage-2","depth":4,"charIndex":3210}],"domain":"","content":"#\n\n\nBOT#\n\nOn Github, changesets provide a robot to detect whether the current Pull Request\nhas changeset, and provide a UI interface to add and modify changeset.\n\n\nInstallation#\n\nClick link, select Install in the upper right corner, and confirm to complete\nthe installation.\n\n\n\n\nConfiguration#\n\nAfter successful installation, you can enter the configuration page and select\nthe application repository according to your needs.\n\n\n\n\nUsage#\n\nAfter the configuration is completed, the robot will automatically check whether\neach Pull Request has added changeset and provide prompt information through\nreply.\n\nNo changeset added#\n\n\n\nYou can run pnpm run change in the repository to add changeset, or click the\nsecond link below to fill in changeset directly.\n\nChangeset added#\n\n\n\nYou can click the link below to modify and add new changeset.\n\nNo need for changeset#\n\nYou can directly ignore the prompt information when no changeset is added, which\nwill not cause problems with the merging of Pull Requests.\n\n\nAction#\n\n\nAutomatically create Release Pull Request#\n\nModern.js provides a Github Action to automatically create release Pull Request,\nwhich can automatically run bump command, update lock file and create Pull\nRequest operation based on the selected branch.\n\nUsage#\n\n * Create a .github/workflows/release-pull-request.yml file in the repository\n   and fill in the following content:\n\nname: Release Pull Request\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        type: choice\n        description: 'Release Type(canary, beta, alpha, latest)'\n        required: true\n        default: 'latest'\n        options:\n        - canary\n        - beta\n        - alpha\n        - latest\n\njobs:\n  release:\n    name: Create Release Pull Request\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@master\n        with:\n          # This makes Actions fetch only one branch to release\n          fetch-depth: 100\n\n      - ... # install dependencies and build repo package\n      - name: Create Release Pull Request\n        uses: web-infra-dev/actions@v2\n        with:\n          version: ${{ github.event.inputs.version }}\n          versionNumber: 'auto'\n          type: 'pull request'\n          tools: 'modern'\n        env:\n          GITHUB_TOKEN: ${{ secrets.REPO_SCOPED_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n          REPOSITORY: ${{ github.repository }}\n          REF: ${{ github.ref }}\n\n\n * After merging Workflow into the main branch, go to the Action page\n   corresponding to the Github repository and select Release Pull Request:\n\n\n\n * Select the release type of this release, and click the Run workflow button:\n\n\n\n * After the workflow is completed, a Release-${version} Pull Request will be\n   automatically created, the related version number of bump changeset will be\n   automatically updated, and the lock file will be updated. The content of Pull\n   Request is the Release Note automatically generated by running the\n   gen-release-note command.\n\n\n\n\nAutomatic Release#\n\nModern.js provides a Github Action to automatically release versions, which can\nautomatically run release command based on the selected branch and publish the\npackage to NPM.\n\nUsage#\n\n * Create a .github/workflows/release.yml file in the repository and fill in the\n   following content:\n\nname: Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        type: choice\n        description: 'Release Version(canary, beta, alpha, latest)'\n        required: true\n        default: 'next'\n        options:\n        - canary\n        - beta\n        - alpha\n        - latest\n      branch:\n        description: 'Release Branch(confirm release branch)'\n        required: true\n        default: 'main'\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@master\n        with:\n          # This makes Actions fetch only one branch to release\n          fetch-depth: 1\n\n      - ... # install dependencies and build repo package\n      - name: Release\n        uses: web-infra-dev/actions@v2\n        with:\n          version: ${{ github.event.inputs.version }}\n          branch: ${{ github.event.inputs.branch }}\n          type: 'release'\n          tools: 'modern'\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n          REPOSITORY: ${{ github.repository }}\n          REF: ${{ github.ref }}\n\n\n * Configure the NPM_TOKEN of the repository:\n\n\n\n * After merging Workflow into the main branch, go to the Action page\n   corresponding to the Github repository and select Release:\n\n\n\n * Select the branch name and release version type, and click the Run workflow\n   button:\n\n\n\n * Workflow will automatically complete the build and release to NPM process of\n   the repository.","frontmatter":{"sidebar_position":9},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/changesets/github.mdx","_relativePath":"en/guides/topic-detail/changesets/github.mdx"},{"id":227,"title":"Introducing Changesets","routePath":"/en/guides/topic-detail/changesets/introduce","lang":"en","toc":[{"text":"Features","id":"features","depth":2,"charIndex":103},{"text":"Initialization","id":"initialization","depth":2,"charIndex":773},{"text":"Commands","id":"commands","depth":2,"charIndex":1736}],"domain":"","content":"#\n\nModern.js integrates changesets for package version management in Npm Module and\nMonorepo project.\n\n\nFeatures#\n\nChangesets have the following features:\n\n * During development, developers need to provide the package names, the type of\n   version upgrade (pathch, minor, major), and change information involved in\n   this change.\n\n * When releasing a version, the version number of the corresponding package\n   will be automatically upgraded based on the content of the changeset, and\n   changelog information will be generated in the corresponding package.\n\n * In the Monorepo project, changesets will automatically generate a repository\n   dependency graph, and only upgrade the version numbers of the changed\n   packages and related dependent packages during upgrade.\n\n\nInitialization#\n\nThe Npm Module and Monorepo project created by Modern.js have already\ninitialized changesets. The .changeset directory and the configuration file\n.changeset/config.json will be automatically created in the project root\ndirectory.\n\nIn addition, Modern.js provides corresponding commands for changesets in its\ncorresponding project tools @modern-js/module-tools and\n@modern-js/monorepo-tools, and there is no need to manually install\nchangeset-related dependencies.\n\nThe default configuration for changesets is as follows:\n\n{\n  \"$schema\": \"https://unpkg.com/@changesets/config@2.0.0/schema.json\",\n  \"changelog\": \"@changesets/cli/changelog\",\n  \"commit\": false,\n  \"linked\": [],\n  \"access\": \"restricted\",\n  \"baseBranch\": \"main\",\n  \"updateInternalDependencies\": \"patch\",\n  \"ignore\": []\n}\n\n\nThe configuration file provides some basic configurations for generating\nchangesets. For detailed field descriptions, please refer to Changesets\nconfiguration.\n\n\nCommands#\n\n * change: Creates a changeset. After running this command, a changeset file\n   will be automatically generated in the .changeset directory.\n\n * bump: Upgrades the version of the corresponding package based on the current\n   changeset.\n\n * pre: Marks entering and exiting pre release mode. When running the bump\n   command in pre release mode, the version format will be x.x.x-${pre-tag}.x.\n\n * release: Publishes the package to NPM.\n\n * status: Views the current changeset status.\n\n * gen-release-note: Generates Release Note information based on the current\n   chagneset status.\n\nFor specific command-supported parameters, please refer to the corresponding\nchapter introduction.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/changesets/introduce.mdx","_relativePath":"en/guides/topic-detail/changesets/introduce.mdx"},{"id":228,"title":"Customizing Release Note Format","routePath":"/en/guides/topic-detail/changesets/release-note","lang":"en","toc":[{"text":"Information","id":"information","depth":2,"charIndex":876},{"text":"getReleaseInfo","id":"getreleaseinfo","depth":3,"charIndex":891},{"text":"Params","id":"params","depth":4,"charIndex":1112},{"text":"Returns","id":"returns","depth":4,"charIndex":1875},{"text":"Default Implementation","id":"default-implementation","depth":4,"charIndex":1947},{"text":"getReleaseNoteLine","id":"getreleasenoteline","depth":3,"charIndex":3233},{"text":"Params","id":"params-1","depth":4,"charIndex":3432},{"text":"Returns","id":"returns-1","depth":4,"charIndex":3633},{"text":"Default Implementation","id":"default-implementation-1","depth":4,"charIndex":3672},{"text":"Using Custom Modules","id":"using-custom-modules","depth":2,"charIndex":4303},{"text":"Configuring Relative Paths","id":"configuring-relative-paths","depth":3,"charIndex":4467},{"text":"Using NPM Module","id":"using-npm-module","depth":3,"charIndex":5225},{"text":"Use npx @modern-js/create@latest to create a module project","id":"use-npx-@modern-js/create@latest-to-create-a-module-project","depth":4,"charIndex":5349},{"text":"Implement Custom Content","id":"implement-custom-content","depth":4,"charIndex":5622},{"text":"Publish the module to NPM","id":"publish-the-module-to-npm","depth":4,"charIndex":5728},{"text":"Install the corresponding module in the root directory of the target repository, such as custom-release-note","id":"install-the-corresponding-module-in-the-root-directory-of-the-target-repository,-such-as-custom-release-note","depth":4,"charIndex":-1},{"text":"Run the gen-release-note command with the custom parameter added","id":"run-the-gen-release-note-command-with-the-custom-parameter-added","depth":4,"charIndex":5867},{"text":"Using Monorepo Sub-Project","id":"using-monorepo-sub-project","depth":3,"charIndex":5992},{"text":"Run pnpm run new to create a module sub-project","id":"run-pnpm-run-new-to-create-a-module-sub-project","depth":4,"charIndex":6120},{"text":"Implement Custom Content","id":"implement-custom-content-1","depth":4,"charIndex":6412},{"text":"Add the sub-project module dependency, such as custom-release-note, to the Monorepo root directory","id":"add-the-sub-project-module-dependency,-such-as-custom-release-note,-to-the-monorepo-root-directory","depth":4,"charIndex":-1},{"text":"Run the gen-release-note command with the custom parameter added","id":"run-the-gen-release-note-command-with-the-custom-parameter-added-1","depth":4,"charIndex":6699}],"domain":"","content":"#\n\nModern.js provides the modern gen-release-note command, which supports\nautomatically generating Release Note through the current existing changeset and\ngit commit information. Before running the release command, you can run this\ncommand to generate the Release Note for this release.\n\nThe default generated Release Note format is:\n\n- fix: add missing type definitions by @zllkjc in https://github.com/web-infra-dev/modern.js/pull/3835\n\n\nGet the Pull Request ID of the changeset through the commit information, and\ngenerate a Github link, which includes the changeset's changelog information and\nauthor information.\n\nINFO\n\nTo get author information, you need to provide the Github Token environment\nvariable, which is passed in through GITHUB_AUTH_TOKEN.\n\nWhen the default generated Release Note logic cannot meet the requirements,\ncustom Release Note format is supported.\n\n\nInformation#\n\n\ngetReleaseInfo#\n\nTo generate Release Note information, some information needs to be collected,\nsuch as commit ID, Pull Request ID, commit message, etc.\n\nThis logic can be implemented through the getReleaseInfo function.\n\nParams#\n\n * commit\n\nType: string;\n\nThe commit message information corresponding to the current changeset.\n\nThe result of executing git log --pretty=format:%h--%s--%ae\n.changeset/${changeset.id}.md.\n\n * commitObj\n\nBasic information about commit.\n\nexport enum CommitType {\n  Performance = 'performance',\n  Features = 'features',\n  BugFix = 'bugFix',\n  Doc = 'doc',\n  Other = 'other',\n}\n\ninterface Commit {\n  id: string; // commit id\n  type: CommitType;\n  repository?: string; // Repo information passed in as a parameter or defined in package.json\n  pullRequestId?: string;\n  author?: string;\n  message: string; // Commit message\n  summary: string; // Changeset summary\n  summary_zh: string; // Changeset summary in Chinese\n  [key: string]: string | undefined;\n}\n\n\nReturns#\n\ncommitObj, the complete commit object after supplementation.\n\nDefault Implementation#\n\nThe default implementation of Modern.js is to split out the Pull Request ID\nbased on the commit information, and get the user information based on the\ncommit ID and add it to the commitObj.\n\nfunction getReleaseInfo(commit: string, commitObj: Commit) {\nconst commitRegex = /(.*)\\(#(\\d*)\\)/;\n\n  const [commitId, message, email] = commit.split('--');\n\n  const author = AuthorMap.get(email);\n  const token = authToken || process.env.GITHUB_AUTH_TOKEN;\n  if (author) {\n    commitObj.author = author;\n  } else if (repo && token) {\n    try {\n      const res = await axios.get(\n        `https://api.github.com/repos/${repo}/commits/${commitId}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: token,\n          },\n        },\n      );\n      const author = res.data.author.login;\n      commitObj.author = author;\n      AuthorMap.set(email, author);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n\n  if ((message || commitObj.summary).match(commitRegex)) {\n    const [, messageShort, pullRequestId] = (\n      message || commitObj.summary\n    ).match(commitRegex)!;\n    commitObj.pullRequestId = pullRequestId;\n    commitObj.message = messageShort.trim();\n  }\n\n  return commitObj;\n}\n\n\n\ngetReleaseNoteLine#\n\nGenerate the corresponding Release Note based on the commit object information\ngetted in getReleaseInfo.\n\nThis logic can be implemented through the getReleaseNoteLine function.\n\nParams#\n\n * commit\n\nThe type is the same as the above commitObj type.\n\n * lang\n\nType: string;\n\nGet the Release Note information of the corresponding language, supporting en\nand zh, the default is en.\n\nReturns#\n\nThe generated Release Note.\n\nDefault Implementation#\n\nThe default implementation of Modern.js is:\n\nexport function getReleaseNoteLine(\n  commit: Commit,\n  lang: 'en' | 'zh' = 'en',\n) {\n  const { repository, pullRequestId, summary, summary_zh, author } = commit;\n  const pullRequest =\n    pullRequestId && repository\n      ? `https://github.com/${repository}/pull/${pullRequestId}`\n      : '';\n  if (lang === 'en') {\n    return `- ${summary}${author ? ` by @${author}` : ''}${\n      pullRequest ? ` in ${pullRequest}` : ''\n    }\\n`;\n  }\n  return `- ${summary_zh}${author ? ` 由 @${author} 实现` : ''}${\n    pullRequest ? `， 详情可查看 ${pullRequest}` : ''\n  }\\n`;\n}\n\n\n\nUsing Custom Modules#\n\nThe gen-release-note command supports the --custom parameter, which can pass in\nthe module name or path of the custom Release Note module.\n\n\nConfiguring Relative Paths#\n\nIf the custom parameter value is a relative path, it is the project root\ndirectory.\n\nFor example, create the scripts/my-release-note-config.js file and define the\nfollowing content:\n\nfunction getReleaseInfo(commit, commitObj) {\n  return commitObj;\n}\n\nfunction getReleaseNoteLine(commit) {}\n\nmodule.exports = {\n  getReleaseInfo,\n  getReleaseNoteLine,\n};\n\n\nRun the following command:\n\npnpm run gen-release-note --custom ./scripts/my-release-note-config.js\n\n\nYou can also define the command parameters directly in package.json:\n\n{\n    \"scripts\": {\n        ...\n        \"gen-release-note\": \"modern gen-release-note --custom ./scripts/my-release-note-config.js\"\n    },\n    ...\n}\n\n\nRun the command pnpm run gen-release-note directly.\n\n\nUsing NPM Module#\n\nCustomizing release note can also be managed using the NPM module project to\nprovide a common solution.\n\nUse npx @modern-js/create@latest to create a module project#\n\n? Please select the type of project you want to create: Npm Module\n? Please fill in the project name: custom-release-note\n? Please select the programming language: TS\n? Please select the package manager: pnpm\n\n\nImplement Custom Content#\n\nexport function getReleaseInfo() {}\n\nexport function getReleaseNoteLine() {}\n\n\nPublish the module to NPM#\n\nInstall the corresponding module in the root directory of the target repository,\nsuch as custom-release-note#\n\nRun the gen-release-note command with the custom parameter added#\n\npnpm run gen-release-note --custom custom-release-note\n\n\n\nUsing Monorepo Sub-Project#\n\nIf your current repository is Monorepo, you can directly manage it using NPM\nmodule sub-projects.\n\nRun pnpm run new to create a module sub-project#\n\n? Please select the type of project you want to create: Npm Module\n? Please fill in the sub-project name: custom-release-note\n? Please fill in the sub-project directory name: custom-release-note\n? Please select the programming language: TS\n\n\nImplement Custom Content#\n\nexport function getReleaseInfo() {}\n\nexport function getReleaseNoteLine() {}\n\n\nAdd the sub-project module dependency, such as custom-release-note, to the\nMonorepo root directory#\n\n{\n  \"devDependencies\": {\n    \"custom-release-note\": \"workspace: *\",\n    ...\n}\n\n\nRun the gen-release-note command with the custom parameter added#\n\npnpm run gen-release-note --custom custom-release-note\n\n\nAfter the module is published to NPM, it can still be used like a module type\nfor other repositories.","frontmatter":{"sidebar_position":8},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/changesets/release-note.mdx","_relativePath":"en/guides/topic-detail/changesets/release-note.mdx"},{"id":229,"title":"Publishing Pre-Release Version","routePath":"/en/guides/topic-detail/changesets/release-pre","lang":"en","toc":[{"text":"Steps","id":"steps","depth":2,"charIndex":174},{"text":"Run the bump command to upgrade the version of the pre-release","id":"run-the-bump-command-to-upgrade-the-version-of-the-pre-release","depth":4,"charIndex":322},{"text":"Check the changes and submit","id":"check-the-changes-and-submit","depth":4,"charIndex":761},{"text":"Run the release command to publish the pre-release version:","id":"run-the-release-command-to-publish-the-pre-release-version:","depth":4,"charIndex":1098},{"text":"Notes","id":"notes","depth":2,"charIndex":1341},{"text":"Exiting pre-release mode","id":"exiting-pre-release-mode","depth":3,"charIndex":1350}],"domain":"","content":"#\n\nBefore doing an actual release, we also need to publish a pre-release version\nfor internal testing and user use. Changesets also support publishing\npre-release versions.\n\n\nSteps#\n\nINFO\n\nThe following example commands are all using pnpm. If you need to use other\npackage management tools, please replace them as needed.\n\nRun the bump command to upgrade the version of the pre-release#\n\npnpm run bump --canary --preid \n\n\npreid is the tag for the pre-release version, such as alpha, beta, etc., and the\ndefault value is next.\n\nAfter using the --canary parameter, the bump command completes the following\nthree steps:\n\n * changeset pre enter : Enters pre-release mode.\n\n * changeset version: Upgrades the version.\n\n * changeset pre exit: Exits pre-release mode.\n\nCheck the changes and submit#\n\nCheck whether the version changes are correct and submit the changes.\n\nIt is recommended to perform pre-release operations not on the main branch and\nnot merge them into the main branch. After the pre-release verification is\ncompleted, an actual version can be directly released based on the main branch.\n\nRun the release command to publish the pre-release version:#\n\npnpm run release --tag \n\n\nWhen publishing a pre-release version, you must use the --tag parameter. The\nparameter value is best the same as the preid value to facilitate user use.\n\n\nNotes#\n\n\nExiting pre-release mode#\n\nAfter entering pre-release mode, changesets will automatically create a pre.json\nfile in the .changeset directory to record some status information when entering\npre-release mode. When the status information is inconsistent with the current\nrepository status, you can directly delete this file to exit pre-release mode.","frontmatter":{"sidebar_position":4},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/changesets/release-pre.mdx","_relativePath":"en/guides/topic-detail/changesets/release-pre.mdx"},{"id":230,"title":"Publishing Version","routePath":"/en/guides/topic-detail/changesets/release","lang":"en","toc":[{"text":"Steps","id":"steps","depth":2,"charIndex":196},{"text":"Npm Module","id":"npm-module","depth":3,"charIndex":345},{"text":"Run the bump command in the root directory","id":"run-the-bump-command-in-the-root-directory","depth":4,"charIndex":358},{"text":"Confirm and submit the current changes","id":"confirm-and-submit-the-current-changes","depth":4,"charIndex":789},{"text":"Run the release command in the root directory to publish the package to NPM","id":"run-the-release-command-in-the-root-directory-to-publish-the-package-to-npm","depth":4,"charIndex":880},{"text":"Push the tag to the remote repository","id":"push-the-tag-to-the-remote-repository","depth":4,"charIndex":979},{"text":"Monorepo","id":"monorepo","depth":3,"charIndex":1045},{"text":"Run the bmp command in the root directory","id":"run-the-bmp-command-in-the-root-directory","depth":4,"charIndex":1056},{"text":"Confirm and submit the current changes","id":"confirm-and-submit-the-current-changes-1","depth":4,"charIndex":1766},{"text":"Run the release command in the root directory to publish the package to NPM","id":"run-the-release-command-in-the-root-directory-to-publish-the-package-to-npm-1","depth":4,"charIndex":2044},{"text":"Push the tag to the remote repository","id":"push-the-tag-to-the-remote-repository-1","depth":4,"charIndex":2706},{"text":"Parameters","id":"parameters","depth":2,"charIndex":2772},{"text":"Parameters for the bump command","id":"parameters-for-the-bump-command","depth":3,"charIndex":2786},{"text":"Parameters for the release command","id":"parameters-for-the-release-command","depth":3,"charIndex":3770},{"text":"Version Upgrade Strategy","id":"version-upgrade-strategy","depth":2,"charIndex":4647},{"text":"dependencies or devDependencies","id":"dependencies-or-devdependencies","depth":3,"charIndex":4675},{"text":"peerDependencies","id":"peerdependencies","depth":3,"charIndex":5597}],"domain":"","content":"#\n\nWhen releasing a version, we need to upgrade the version of the corresponding\npackages based on the changeset generated during development, and run the\npublish command to publish them to NPM.\n\n\nSteps#\n\nINFO\n\nThe following example commands are all using pnpm. If you need to use other\npackage management tools, please replace them as needed.\n\n\nNpm Module#\n\nRun the bump command in the root directory#\n\npnpm run bump\n\n\n\n\nWhen running this command, changesets will automatically perform the following\noperations:\n\n * Delete all changeset files under the .changesets directory.\n\n * Upgrade the package version based on the changeset information.\n\n * Write changelog information to the CHANGELOG.md file in the root directory.\n   The file will be automatically created if it does not exist.\n\nConfirm and submit the current changes#\n\ngit add .\ngit commit -m \"release: bump package\"\n\n\nRun the release command in the root directory to publish the package to NPM#\n\npnpm run release\n\n\n\n\nPush the tag to the remote repository#\n\ngit push --follow-tags\n\n\n\nMonorepo#\n\nRun the bmp command in the root directory#\n\npnpm run bump\n\n\n\n\nWhen running this command, changesets will automatically perform the following\noperations:\n\n * Delete all changeset files under the .changesets directory.\n\n * Upgrade the version of the relevant packages based on the changeset\n   information. In addition to the packages written in the changeset, changesets\n   will also analyze the dependency graph of all packages in the Monorepo during\n   running. If is required, the version will be automatically upgraded\n   accordingly.\n\n * Write changelog to the CHANGELOG.md file in the directory of the package that\n   needs to be upgraded. The file will be automatically created if it does not\n   exist.\n\nConfirm and submit the current changes#\n\nINFO\n\nMake sure that the automatically upgraded version meet the expected\nrequirements. If you need to understand the version upgrade strategy, please\nrefer to Version Upgrade Strategy.\n\ngit add .\ngit commit -m \"release: bump package\"\n\n\nRun the release command in the root directory to publish the package to NPM#\n\npnpm run release\n\n\nWhen running this command, it will sequentially determine whether the versions\nof all packages in the Monorepo exist on NPM. If they do not exist, the publish\ncommand will be run to publish them.\n\nWARNING\n\nWhen the dependencies between packages in the Monorepo are declared using\nworkspace, do not directly run npm publish to publish the package in the\ncorresponding subdirectory of the package. Use the release command instead. When\npublishing, the workspace declaration will be automatically removed to ensure\nthat the NPM package is available after publishing.\n\nPush the tag to the remote repository#\n\ngit push --follow-tags\n\n\n\nParameters#\n\n\nParameters for the bump command#\n\n * --snapshot: Generates a timestamp-based version.\n\npnpm run bump --snapshot canary\n\n\nAfter running, the corresponding upgraded version will become\n0.0.0-canary-20220622092823, and canary is the tag configured for snapshot. If\nnot configured, it will directly generate the form of 0.0.0-20220622092823.\n\nThis parameter is mainly used to publish temporary test versions for testing and\ndoes not require code submission.\n\n * --ignore: Manually ignore some packages during publishing.\n\nFor example, if you need to ignore the module-2 package for this release:\n\npnpm run bump --ignore module-2\n\n\nAfter running the command, the update of the module-2 package will be ignored.\nNote that if there are packages that depend on module-2, the corresponding\npackages also need to be added to the ignore parameter, otherwise the bump\ncommand will fail.\n\nThe usage for adding multiple packages is as follows:\n\npnpm run bump --ignore module-2 --ignore module-3\n\n\n\nParameters for the release command#\n\n * --otp: Uses npm token to publish the package.\n\npnpm run relese --otp \n\n\n * --tag: Uses a specific tag for publishing, and latest is used by default.\n\npnpm run release --tag \n\n\n * --ignore-scripts: Ignores npm scripts during publishing.\n\nWhen running the publish command, npm will automatically trigger many commands,\nsuch as prepare and prepublish. Using this parameter can ignore the running of\nthese commands. This parameter is only supported in Monorepo using pnpm.\n\npnpm run release --ignore-scripts\n\n\n * --no-git-checks: Ignores checking the current branch during publishing.\n\nBy default, when running the release command, it will automatically check\nwhether the current branch is a release branch, whether there are uncommitted\nchanges, etc. Using this parameter can ignore git-related checks.\n\npnpm run release --no-git-checks\n\n\n\nVersion Upgrade Strategy#\n\n\ndependencies or devDependencies#\n\n * Only upgrade the patch version of the package itself for patch version\n\nFor example, the following scenario exists:\n\nThere are two packages in Monorepo, module-1 and module-2, and module-1 exists\nin the dependencies of module-2.\n\nThe current changeset is the patch version upgrade of module-1.\n\nAfter running the bump command, only the patch version of module-1 will be\nupgraded.\n\n * Upgrade the major or minor version of the package itself for major/minor\n   version upgrades, and upgrade the patch version of the dependent packages\n\nFor example, the following scenario exists:\n\nThere are two packages in Monorepo, module-1 and module-2, and module-1 exists\nin the dependencies of module-2.\n\nThe current changeset is the minor version upgrade of module-1.\n\nAfter running the bump command, module-1 will upgrade the minor version, and\nmodule-2 will upgrade the patch version number.\n\n\npeerDependencies#\n\n * Upgrade the patch version of the package itself and the dependent package for\n   patch version dependencies\n\nFor example, the following scenario exists:\n\nThere are two packages in Monorepo, module-1 and module-2, and module-1 exists\nin the peerDependencies of module-2.\n\nThe current changeset is the patch version upgrade of module-1.\n\nAfter running the bump command, both module-1 and module-2 will upgrade the\npatch version.\n\n * Upgrade the major version of the dependent package for major/minor version\n   upgrades of the package itself\n\nFor example, the following scenario exists:\n\nThere are two packages in Monorepo, module-1 and module-2, and module-1 exists\nin the peerDependencies of module-2.\n\nThe current changeset is the minor version upgrade of module-1.\n\nAfter running the bump command, module-1 will upgrade the minor version, and\nmodule-2 will upgrade the major version number.\n\n * Modify the upgrade strategy for peerDependencies\n\nThe upgrade strategy of peerDependencies can be modified by configuring\nonlyUpdatePeerDependentsWhenOutOfRange. When only the declared version type\nrange is exceeded, the corresponding peerDependencies will be upgraded.\n\n{\n  \"___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH\": {\n    \"onlyUpdatePeerDependentsWhenOutOfRange\": true\n  },\n  ...\n}\n\n\nFor example, the following scenario exists:\n\nThere are two packages in Monorepo, module-1 and module-2, and module-1 exists\nin the peerDependencies of module-2, and the version of module-1 is declared\nusing ^.\n\nThe current changeset is the patch or minor version upgrade of module-1.\n\nAfter running the bump command, only the version of module-1 will be upgraded.\n\nNote that if the package version is in the 0.x.x range, upgrading the minor\nversion is also beyond the declared version type range.","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/changesets/release.mdx","_relativePath":"en/guides/topic-detail/changesets/release.mdx"},{"id":231,"title":"Extending","routePath":"/en/guides/topic-detail/framework-plugin/extend","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":94},{"text":"Creating Hooks","id":"creating-hooks","depth":3,"charIndex":337},{"text":"Using Hooks","id":"using-hooks","depth":3,"charIndex":662}],"domain":"","content":"#\n\nThis section describes how to extend plugin Hooks by dynamically registering\nHook models.\n\n\nExample#\n\nHere is a simple example to demonstrate how to extend plugin Hooks by adding\nHooks that manage console output.\n\nFirst, we initialize an empty project file and add basic dependencies:\n\n$ npx @modern-js/create@latest modern-js-demo\n\n\n\nCreating Hooks#\n\nFirst, let's create a Hook model:\n\n\n\nconst message = createWaterfall();\n\n\nthen register:\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  registerHook: {\n    message,\n  },\n});\n\n\nadd Hook types:\n\ndeclare module '@modern-js/core' {\n  export interface Hooks {\n    message: typeof message;\n  }\n}\n\n\n\nUsing Hooks#\n\nCreate a plugin and add command handling logic through the commands Hook\nfunction:\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  setup(api) {\n    return {\n      commands({ program }) {\n        program.command('message').action(async () => {\n          const hookRunners = api.useHookRunners();\n          const messages = hookRunners.message([]);\n          console.log(messages.join('\\n'));\n        });\n      },\n    };\n  },\n});\n\n\nnow config/plugin/myPlugin.ts is:\n\n\n\n\nconst message = createWaterfall();\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  registerHook: {\n    message,\n  },\n\n  setup(api) {\n    return {\n      commands({ program }) {\n        program.command('message').action(async () => {\n          const hookRunners = api.useHookRunners();\n          const messages = hookRunners.message([]);\n          console.log(messages.join('\\n'));\n        });\n      },\n    };\n  },\n});\n\ndeclare module '@modern-js/core' {\n  export interface Hooks {\n    message: typeof message;\n  }\n}\n\n\nThen add this plugin in modern.config.ts:\n\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin()],\n});\n\n\nNow, run npx modern message, and the related logic will be executed, but no\ninformation is collected, so the console output is empty.\n\nadd:\n\n\n\nexport default (): CliPlugin => ({\n  name: 'other-plugin',\n\n  setup(api) {\n    return {\n      message(list) {\n        return [...list, '[foo] line 0', '[foo] line 1'];\n      },\n    };\n  },\n});\n\n\nadd to config:\n\n\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin(), otherPlugin()],\n});\n\n\nrun npx modern message, then we can get follow in console:\n\n$ modern message\n[foo] line 0\n[foo] line 1\n\n\nBy using the above approach, you can extend plugin Hooks with various\ncapabilities.","frontmatter":{"title":"Extending","sidebar_position":5},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/extend.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/extend.mdx"},{"id":232,"title":"Hook List","routePath":"/en/guides/topic-detail/framework-plugin/hook-list","lang":"en","toc":[{"text":"CLI","id":"cli","depth":2,"charIndex":72},{"text":"beforeConfig","id":"beforeconfig","depth":3,"charIndex":79},{"text":"config","id":"config","depth":3,"charIndex":414},{"text":"validateSchema","id":"validateschema","depth":3,"charIndex":868},{"text":"prepare","id":"prepare","depth":3,"charIndex":1956},{"text":"afterPrepare","id":"afterprepare","depth":3,"charIndex":2297},{"text":"commands","id":"commands","depth":3,"charIndex":2619},{"text":"beforeExit","id":"beforeexit","depth":3,"charIndex":3219},{"text":"beforeDev","id":"beforedev","depth":3,"charIndex":3721},{"text":"afterDev","id":"afterdev","depth":3,"charIndex":4082},{"text":"beforeCreateCompiler","id":"beforecreatecompiler","depth":3,"charIndex":4869},{"text":"afterCreateCompiler","id":"aftercreatecompiler","depth":3,"charIndex":5375},{"text":"beforePrintInstructions","id":"beforeprintinstructions","depth":3,"charIndex":5858},{"text":"beforeBuild","id":"beforebuild","depth":3,"charIndex":6465},{"text":"afterBuild","id":"afterbuild","depth":3,"charIndex":6979},{"text":"modifyEntryImports","id":"modifyentryimports","depth":3,"charIndex":7388},{"text":"modifyEntryExport","id":"modifyentryexport","depth":3,"charIndex":8117},{"text":"modifyEntryRuntimePlugins","id":"modifyentryruntimeplugins","depth":3,"charIndex":8741},{"text":"modifyEntryRenderFunction","id":"modifyentryrenderfunction","depth":3,"charIndex":9540},{"text":"modifyFileSystemRoutes","id":"modifyfilesystemroutes","depth":3,"charIndex":10162},{"text":"modifyServerRoutes","id":"modifyserverroutes","depth":3,"charIndex":10994},{"text":"modifyAsyncEntry","id":"modifyasyncentry","depth":3,"charIndex":11697},{"text":"htmlPartials","id":"htmlpartials","depth":3,"charIndex":12333},{"text":"Runtime","id":"runtime","depth":2,"charIndex":12897},{"text":"init","id":"init","depth":3,"charIndex":13127},{"text":"hoc","id":"hoc","depth":3,"charIndex":13498}],"domain":"","content":"#\n\nModern.js exposes three types of plugins: CLI, Runtime, and Server.\n\n\nCLI#\n\n\nbeforeConfig#\n\n * Functionality: Running tasks before the config process\n * Execution phase: Before the config process\n * Hook model: AsyncWorkflow\n * Type: AsyncWorkflow\n * Example usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      beforeConfig: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nconfig#\n\n * Functionality: Collect configuration\n * Execution phase: After parsing the configuration in modern.config.ts\n * Hook model: ParallelWorkflow\n * Type: ParallelWorkflow\n * Example usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      config: () => {\n        return {\n          /** some config */\n        };\n      },\n    };\n  },\n});\n\n\nThe collected configuration information will be collected and processed\nuniformly.\n\n\nvalidateSchema#\n\n * Functionality: Collect the JSON schema used to validate user configurations\n   in various plugins.\n * Execution phase: After the config Hook has run.\n * Hook model: ParallelWorkflow\n * Type: ParallelWorkflow\n * Example usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      validateSchema: () => {\n        return {\n          // target is field\n          target: 'foo',\n          schema: {\n            type: 'string',\n          },\n        };\n      },\n    };\n  },\n});\n\n\nThe returned JSON Schema here is used to validate the configuration information\nin modern.config.js.\n\nFor example, the following JSON Schema is returned:\n\n{\n  \"target\": \"foo\",\n  \"schema\": {\n    \"type\": \"string\"\n  }\n}\n\n\nYou can configure it in modern.config.ts like this:\n\nexport default defineConfig({\n  foo: 'test',\n});\n\n\nIf it is another type, validation will fail and an error will be reported. For\nexample:\n\nexport default defineConfig({\n  foo: {},\n});\n\n\nthen throw error:\n\n$ modern dev\n  1 | {\n> 2 |   \"foo\": {},\n    |   ^^^^^  Property foo is not expected to be here\n\n\n\nprepare#\n\n * Functionality: Preparatory process for running the main process.\n * Execution phase: After configuration validation.\n * Hook model: AsyncWorkflow\n * Type: AsyncWorkflow\n * Example usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      prepare: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nafterPrepare#\n\n * function: Running tasks after the prepare process\n * Execution Phase: After the prepare process\n * Hook model: AsyncWorkflow\n * type: AsyncWorkflow\n * Usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      afterPrepare: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\ncommands#\n\n * Functionality: Add new commands for the command.\n * Execution phase: After the prepare Hook has run.\n * Hook model: AsyncWorkflow\n * Type: AsyncWorkflow<{ program: Command; }, void>\n * Example usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      commands: ({ program }) => {\n        program.command('foo').action(async () => {\n          // do something\n          console.log('foo');\n        });\n      },\n    };\n  },\n});\n\n\nMove the plugin to modern.config.ts:\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin()],\n});\n\n\nrun modern foo:\n\n$ modern foo\nfoo\n\n\n\nbeforeExit#\n\n * Functionality: Reset some file states before exiting the process.\n * Execution phase: Before the process exits.\n * Hook model: Workflow\n * Type: Workflow\n * Example usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      beforeExit: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\nTIP\n\nSince the callback function when exiting the process in Node.js is synchronous,\nthe type of beforeExit Hook is Workflow and cannot perform asynchronous\noperations.\n\n\nbeforeDev#\n\n * Functionality: Tasks before running the main dev process.\n * Execution phase: Before the project starts when the dev command is run.\n * Hook model: AsyncWorkflow\n * Type: AsyncWorkflow\n * Example usage:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      beforeDev: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nafterDev#\n\n * Function: Tasks to be executed after the main process of dev command\n * Execution Stage: It is executed after each compilation is completed when\n   running the dev command\n * Hook Model: AsyncWorkflow\n * Type: AsyncWorkflow<{ isFirstCompile: boolean }, unknown>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      afterDev: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\nafterDev will be executed after each compilation is completed, you can use the\nisFirstCompile param to determine whether it is the first compilation:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      afterDev: ({ isFirstCompile }) => {\n        if (isFirstCompile) {\n          // do something\n        }\n      },\n    };\n  },\n});\n\n\n\nbeforeCreateCompiler#\n\n * Function: Provides access to the Webpack configuration used to create the\n   Webpack Compiler within middleware functions.\n * Execution Stage: Executed before creating the Webpack Compiler.\n * Hook Model: AsyncWorkflow.\n * Type: AsyncWorkflow<{ webpackConfigs: Configuration[];}, unknown>.\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      beforeCreateCompiler: ({ webpackConfigs }) => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nafterCreateCompiler#\n\n * Function: Provides access to the created Webpack Compiler within middleware\n   functions.\n * Execution Stage: Executed after creating the Webpack Compiler.\n * Hook Model: AsyncWorkflow.\n * Type: AsyncWorkflow<{ compiler: Compiler | MultiCompiler | undefined; },\n   unknown>.\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      afterCreateCompiler: ({ compiler }) => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nbeforePrintInstructions#\n\n * Function: Provides access to the log information that will be printed within\n   middleware functions and allows modification of the log information.\n * Execution Stage: Executed before printing the log information.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ instructions: string }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      beforePrintInstructions: ({ instructions }) => {\n        // do something\n        return {\n          instructions: [...instructions, 'some new message'],\n        };\n      },\n    };\n  },\n});\n\n\n\nbeforeBuild#\n\n * Function: Tasks to be executed before the main process of the build command,\n   provides access to the Webpack configuration used for building.\n * Execution Stage: Executed before starting the project build when running the\n   build command.\n * Hook Model: AsyncWorkflow.\n * Type: AsyncWorkflow<{ webpackConfigs: Configuration[]; }>.\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      beforeBuild: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nafterBuild#\n\n * Function: Tasks to be executed after the main process of the build command.\n * Execution Stage: Executed after the project build is completed when running\n   the build command.\n * Hook Model: AsyncWorkflow.\n * Type: AsyncWorkflow.\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      afterBuild: () => {\n        // do something\n      },\n    };\n  },\n});\n\n\n\nmodifyEntryImports#\n\n * Function: Used for modifying or adding import statements in the generated\n   entry files.\n * Execution Stage: Executed before generating the entry files, triggered during\n   the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ imports: ImportStatement[]; entrypoint: Entrypoint; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyEntryImports({ entrypoint, imports }) {\n        // add ``\n        imports.push({\n          value: 'react',\n          specifiers: [\n            {\n              imported: 'unmountComponentAtNode',\n            },\n          ],\n        });\n\n        return { entrypoint, imports };\n      },\n    };\n  },\n});\n\n\n\nmodifyEntryExport#\n\n * Function: used to modify the export statement in the generated entry file\n * Execution Stage: Before the entry file is generated, the prepare phase\n   triggers\n * Hook Model: AsyncWaterfall\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; exportStatement: string; }>\n * Example of use:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyEntryExport({ entrypoint, exportStatement }) {\n        return {\n          entrypoint,\n          exportStatement: [`export const foo = 'test'`, exportStatement].join(\n            '\\n',\n          ),\n        };\n      },\n    };\n  },\n});\n\n\n\nmodifyEntryRuntimePlugins#\n\n * Function: Used for adding or modifying Runtime plugins in the generated entry\n   files.\n * Execution Stage: Executed before generating the entry files, triggered during\n   the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; plugins: RuntimePlugin[]; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyEntryRuntimePlugins({ entrypoint, plugins }) {\n        const name = 'customPlugin';\n        const options = {\n          /** serializable content */\n        };\n\n        return {\n          plugins: [\n            ...plugins,\n            {\n              name,\n              options: JSON.stringify(options),\n            },\n          ],\n        };\n      },\n    };\n  },\n});\n\n\n\nmodifyEntryRenderFunction#\n\n * Function: Used for modifying the render function in the generated entry\n   files.\n * Execution Stage: Executed before generating the entry files, triggered during\n   the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; code: string; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyEntryRenderFunction({ entrypoint, code }) {\n        const customRender = `/** render function body */`;\n        return {\n          entrypoint,\n          code: customRender,\n        };\n      },\n    };\n  },\n});\n\n\n\nmodifyFileSystemRoutes#\n\n * Function: Used for modifying the content of the generated front-end page\n   routing files, which must be serializable.\n * Execution Stage: Executed before generating the front-end routing files,\n   triggered during the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; routes: Route[]; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyFileSystemRoutes({ entrypoint, routes }) {\n        return {\n          entrypoint,\n          routes: [\n            ...routes,\n            {\n              path: '/custom_page',\n              component: require.resolve('./Component'),\n              exact: true,\n            },\n          ],\n        };\n      },\n    };\n  },\n});\n\n\nThis adds a new page route for the front-end.\n\n\nmodifyServerRoutes#\n\n * Function: Used for modifying the content of the generated server routes.\n * Execution Stage: Executed before generating the server routing files,\n   triggered during the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ routes: ServerRoute[]; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyServerRoutes({ routes }) {\n        return {\n          routes: [\n            ...routes,\n            {\n              urlPath: '/api/foo',\n              isApi: true,\n              entryPath: '',\n              isSPA: false,\n              isSSR: false,\n            },\n          ],\n        };\n      },\n    };\n  },\n});\n\n\n\nmodifyAsyncEntry#\n\n * Function: Used for modifying the asynchronous module that wraps the entry\n   file, see source.enableAsyncEntry.\n * Execution Stage: Executed before generating the entry files, triggered during\n   the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; code: string; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      modifyAsyncEntry({ entrypoint, code }) {\n        const customCode = `console.log('hello');`;\n        return {\n          entrypoint,\n          code: `${customCode}${code}`,\n        };\n      },\n    };\n  },\n});\n\n\n\nhtmlPartials#\n\n * Function: Used for customizing the generated HTML page template.\n * Execution Stage: Triggered during the prepare stage.\n * Hook Model: AsyncWaterfall.\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; partials: HtmlPartials; }>\n * Usage Example:\n\n\n\nexport default (): CliPlugin => ({\n  setup(api) {\n    return {\n      async htmlPartials({ entrypoint, partials }) {\n        partials.head.push('');\n        return {\n          entrypoint,\n          partials,\n        };\n      },\n    };\n  },\n});\n\n\nThis adds a new Script tag to the HTML template.\n\n\nRuntime#\n\nNOTE\n\nThe Runtime plugin is currently not fully opened, and the API is not guaranteed\nto be stable. Use with caution.\n\nThe Runtime plugin is mainly used for developers to modify the component that\nneed to be rendered.\n\n\ninit#\n\n * Function: Executes App.init.\n * Execution Stage: Rendering (SSR/CSR).\n * Hook Model: AsyncPipeline.\n * Type: AsyncPipeline<{ context: RuntimeContext; }, unknown>\n * Usage Example:\n\n\n\nexport default (): Plugin => ({\n  setup(api) {\n    return {\n      init({ context }, next) {\n        // do something\n        return next({ context });\n      },\n    };\n  },\n});\n\n\n\nhoc#\n\n * Function: Modifies the components that need to be rendered.\n * Execution Stage: Rendering (SSR/CSR).\n * Hook Model: Pipeline.\n * Type: Pipeline<{ App: React.ComponentType; }, React.ComponentType>\n * Usage Example:\n\nNOTE\n\nWhen using the hoc hook, you need to copy the static properties of the original\nApp component to the new component and pass through the props.\n\n\n\n\n\nexport default (): Plugin => ({\n  setup(api) {\n    const FooContext = createContext('');\n    return {\n      hoc({ App }, next) {\n        const AppWrapper = (props: any) => {\n          return (\n            \n              \n            \n          );\n        };\n        return next({\n          App: hoistNonReactStatics(AppWrapper, App),\n        });\n      },\n    };\n  },\n});\n","frontmatter":{"title":"Hook List","sidebar_position":8},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/hook-list.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/hook-list.mdx"},{"id":233,"title":"Hook Model","routePath":"/en/guides/topic-detail/framework-plugin/hook","lang":"en","toc":[{"text":"Basic Working Mode","id":"basic-working-mode","depth":2,"charIndex":286},{"text":"Differences between different Hook models","id":"differences-between-different-hook-models","depth":2,"charIndex":2559},{"text":"Pipeline","id":"pipeline","depth":3,"charIndex":2811},{"text":"Waterfall","id":"waterfall","depth":3,"charIndex":3279},{"text":"Workflow","id":"workflow","depth":3,"charIndex":4522},{"text":"Comparison of Hook models","id":"comparison-of-hook-models","depth":2,"charIndex":5848}],"domain":"","content":"#\n\nFirst, let's introduce some content about the basic plugin system in Modern.js,\nincluding the working mode of the Hook model, the operating mode of each Hook\nmodel, and the working mode of the Manager.\n\nEach Hook model is independent and can manage running functions independently.\n\n\nBasic Working Mode#\n\nTaking the Pipeline as an example, let's briefly introduce the working mode of\nthe Hook model. Let's take a look at a simple example:\n\n\n\n// 1. create\nconst pipeline = createPipeline();\n\n// 2. add function\npipeline.use((count, next) => {\n  return next(count + 1);\n});\npipeline.use((count, next) => {\n  return count * 2;\n});\n\n// 3. exec\npipeline.run(1); // 4\npipeline.run(5); // 12\n\n\nIn this example, a Pipeline is created on line 3. This means that when you run\nit, you need to pass in a number, and you will get a number as a result, the\ntype is:\n\n(count: number, next: (nextCount: number) => number) => number;\n\n\nThe reason why there are only numbers here is because we created a Pipeline. If\nwe had created a Pipeline, then when we run it, we would pass in a number and\nget back a string. the type is:\n\n(count: number, next: (nextCount: number) => string) => string;\n\n\nAfter creating a Pipeline, you can add functions using the use method (lines 5\nand 8). It is important to note that the order in which you add the functions is\nthe order in which they will run by default.\n\nWithin these functions, you can manipulate the count value and return a value.\nIf you call the next function, the next function in the pipeline will run. For\nexample, if you add three functions: A, B, and C, and you call next in function\nA, then function B will run. Similarly, if you call next in function B, then\nfunction C will run.\n\nIn the example above, the first function added on line 5 calls next, which\ncauses the second function added on line 8 to run. The return value of this\nfunction is the return value of the entire pipeline. If the first function does\nnot call next and simply returns a value, then the pipeline will return that\nvalue without running any other functions.\n\nFor example:\n\n\n\n// 1. create\nconst pipeline = createPipeline();\n\n// 2. add function\npipeline.use((count, next) => {\n  return count + 1;\n});\npipeline.use((count, next) => {\n  return count * 2;\n});\n\n// 3. 执行\npipeline.run(1); // 2\npipeline.run(5); // 6\n\n\nIf the first function does not call next, the second function will not run and\nthe return value of the pipeline will be the return value of the first function.\n\nFinally, the way to run the Pipeline is simply to call pipeline.run().\n\n\nDifferences between different Hook models#\n\nThe above section describes the general working mode of the Pipeline, and the\nworking modes of other Hook models are similar. The main differences lie in the\nfunction type, execution order, and parameters.\n\n\nPipeline#\n\nThe example above describes the Pipeline, so we won't go into details here. In\nthe Pipeline category, there are two subcategories: Sync and Async, which manage\nfunctions of either Sync or Async type, respectively.\n\nINFO\n\nIf there are no functions in the Pipeline or all functions have called the next\nfunction, then you need to provide a value when running the Pipeline.\n\npipeline(\n  {},\n  {\n    onLast: () => {\n      // do something\n    },\n  },\n);\n\n\n:::\n\n\nWaterfall#\n\nThis model, as the name suggests, is characterized by the sequential passing of\nparameters, where the return value of the previous function becomes the input\nparameter of the next function. Let's look at an example::\n\n\n\n// 1. create\nconst waterfall = createWaterfall();\n\n// 2. add function\nwaterfall.use(count => {\n  return count + 1;\n});\nwaterfall.use(count => {\n  return count * 2;\n});\n\n// 3. exec\nwaterfall.run(1); // 4\nwaterfall.run(5); // 12\n\n\nIn this example, a Waterfall type is created, which means that the input and\noutput types of this model are the same. In this case, both the input and output\ntypes are number, the type is:\n\n(count: number) => number;\n\n\nAt first glance, this example may seem to have the same functionality as the\nPipeline above, but there are some important differences to note. Firstly, the\nfunctions managed by Waterfall do not have a next function as the second\nargument, so they cannot modify the execution order by calling next within the\nfunction. Secondly, the input and output types of the functions must be the same\n(unlike in the Pipeline where they can be different).\n\nSimilarly to Pipeline, Waterfall has Sync and Async subcategories that\nrespectively manage Sync and Async functions.\n\n\nWorkflow#\n\nThis Hook model is different from the two Hook models above in that there is no\nstrong concept of passing parameters and return values in a sequential order. In\nthis model, each function runs independently based on the same input parameter.\n\nfor example:\n\n\n\n// 1. create\nconst workflow = createWorkflow();\n\n// 2. add plugin\nworkflow.use(count => {\n  return count + 1;\n});\nworkflow.use(count => {\n  return count * 2;\n});\n\n// 3. 执行\nworkflow.run(1); // [2, 2]\nworkflow.run(5); // [6, 10]\n\n\nIn this example, two functions are added to the Workflow, so the result of\nrunning the Workflow is an array of the results of these two functions.\n\nAlthough there is no strong concept of passing parameters and return values in a\nsequential order in this model, there are still differences in the execution\norder. In the Workflow category, there are three subcategories: Sync, Async, and\nParallel.\n\nThe difference between them lies in the execution order of the functions. By\ndefault, they are all executed in the order they are added, but in Sync and\nAsync mode, the execution order is strictly based on the order in which they are\nadded, while in Parallel mode, a variant of Async mode, Promise.all is used to\nexecute all the functions, while in Async mode, await is used to wait for the\nprevious function to finish running.\n\n\nComparison of Hook models#\n\n\"Workflow\" and \"Waterfall\" are actually variants of the \"Pipeline\" model. While\nit's possible to implement \"Workflow\" and \"Waterfall\" using a specific writing\nstyle with \"Pipeline\", it can be more complicated with many implicit\nconventions. To make it easier to use, these two variants are provided to\nsatisfy specific use cases.","frontmatter":{"title":"Hook Model","sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/hook.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/hook.mdx"},{"id":234,"title":"Develop Plugins","routePath":"/en/guides/topic-detail/framework-plugin/implement","lang":"en","toc":[{"text":"Implementing a Plugin","id":"implementing-a-plugin","depth":2,"charIndex":132},{"text":"Plugin Types","id":"plugin-types","depth":3,"charIndex":767},{"text":"Plugin Configuration","id":"plugin-configuration","depth":3,"charIndex":2470},{"text":"Plugin API","id":"plugin-api","depth":3,"charIndex":2819},{"text":"Async setup","id":"async-setup","depth":3,"charIndex":3338},{"text":"Adding Plugins","id":"adding-plugins","depth":2,"charIndex":3610},{"text":"Developing Local Plugins","id":"developing-local-plugins","depth":3,"charIndex":3795},{"text":"Publishing a Plugin on npm","id":"publishing-a-plugin-on-npm","depth":3,"charIndex":4137}],"domain":"","content":"#\n\nThe previous section introduced the Hook models used by Modern.js plugins, while\nthis section describes how to develop plugins.\n\n\nImplementing a Plugin#\n\nA Modern.js plugin is an object that includes the following properties:\n\n * name: The name of the plugin, a unique identifier.\n * setup: The initialization function for the plugin, which only runs once. The\n   setup function can return a Hooks object, which Modern.js executes at\n   specific times.\n\nconst myPlugin = {\n  name: 'my-plugin',\n\n  setup() {\n    const foo = '1';\n\n    // return hook object\n    return {\n      afterBuild: () => {\n      },\n    };\n  },\n};\n\n\nIn addition, plugins allow configuration of the execution order with other\nplugins. For more information, please refer to Plugin Relationship.\n\n\nPlugin Types#\n\nModern.js supports various types of project development, such as application\ndevelopment (app-tools), module development (module-tools), etc.\n\nTo balance the differences and commonalities between various types of project\ndevelopment, Modern.js organizes plugins as shown in the following figure:\n\n\n\nAs shown in the figure, Modern.js roughly divides plugins into two categories:\n\n 1. Common plugins: Plugins that only include some basic Hooks.\n\n 2. Project plugins: Different project developments will extend their own Hooks,\n    Config, etc. on the basis of common plugins.\n\nWhen using TypeScript, you can import built-in types such as CliPlugin to\nprovide correct type inference for plugins.\n\n\n\nconst myPlugin: CliPlugin = {\n  name: 'my-plugin',\n\n  setup() {\n    const foo = '1';\n\n    return {\n      afterBuild: () => {\n      },\n    };\n  },\n};\n\n\nThe above code is a general-purpose plugin, containing only some basic Hooks.\nModern.js supports extending the definition of plugins through generics:\n\n\n\nconst myPlugin: CliPlugin = {\n  name: 'my-plugin',\n\n  setup() {\n    const foo = '1';\n\n    return {\n      afterBuild: () => {\n      },\n    };\n  },\n};\n\n\nIf you look closely at the type AppTools, you can see that AppTools consists of\n3 types.\n\ntype AppTools = {\n  hooks: AppToolsHooks;\n  userConfig: AppToolsUserConfig;\n  normalizedConfig: AppToolsNormalizedConfig;\n};\n\n\nWhen writing plugins, plugins extend their own types like Hooks on different\nbases through generic extensions:\n\n// common plugin\n\n\n\nconst myPlugin: CliPlugin<{ hooks: MyPluginHook }> = {};\n\n\n// extend from app-tools hook\n\n\n\nconst myPlugin: CliPlugin = {};\n\n\nPlease refer to Extending Hooks for detailed explanations.\n\n\nPlugin Configuration#\n\nIt is recommended to develop plugins in the form of functions, so that plugins\ncan receive configuration options through function parameters:\n\n\n\ntype MyPluginOptions = {\n  foo: string;\n};\n\nconst myPlugin = (options: MyPluginOptions): CliPlugin => ({\n  name: 'my-plugin',\n\n  setup() {\n    console.log(options.foo);\n  },\n});\n\n\n\nPlugin API#\n\nThe setup function of a plugin receives an api parameter, and you can call some\nmethods provided on the api to get configuration, application context, and other\ninformation.\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  setup(api) {\n    // get user set config\n    const config = api.useConfigContext();\n    // get context\n    const appContext = api.useAppContext();\n    // get final config\n    const resolvedConfig = api.useResolvedConfigContext();\n  },\n});\n\n\nFor more detail Plugin API.\n\n\nAsync setup#\n\nThe setup function of a CLI plugin can be an asynchronous function, which can\nexecute asynchronous logic during the initialization process.\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  async setup(api) {\n    await doSomething();\n  },\n});\n\n\n\nAdding Plugins#\n\nCustom plugins can be used by following the instructions in the plugins section\nof the documentation. Below is the recommended way to implement plugins in\nModern.js.\n\n\nDeveloping Local Plugins#\n\nIt is recommended to write local plugins in the config/plugin directory and\nexport them using export default:\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  setup() {\n    // init plugin\n  },\n});\n\n\nregister plugin in modern.config.ts:\n\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin()],\n});\n\n\n\nPublishing a Plugin on npm#\n\nIf you want to publish your Modern.js plugin on npm, it's recommended to use the\nmodule project solution provided by Modern.js to manage and build the plugin.\n\nFirst, create an empty module project solution and adjust the package name:\n\n{\n  \"name\": \"my-plugin\"\n  ...\n}\n\n\ncreate plugin main file:\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  setup() {\n    // plugin init\n  },\n});\n\n\nAfter publishing, install it to the project you need to use pnpm add my-plugin,\ntake an application project as an example, and then add it in modern.config.ts:\n\n\n\n\nexport default defineConfig({\n  plugins: [myPlugin()],\n});\n\n\nIf you find that there are currently unsatisfactory scenarios in Modern.js,\nwelcome to build the Modern.js ecosystem together by writing custom plugins.","frontmatter":{"title":"Develop Plugins","sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/implement.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/implement.mdx"},{"id":235,"title":"Introduction","routePath":"/en/guides/topic-detail/framework-plugin/introduction","lang":"en","toc":[{"text":"Modern.js Plugin System","id":"modernjs-plugin-system","depth":2,"charIndex":3},{"text":"What Plugins Can Do","id":"what-plugins-can-do","depth":2,"charIndex":1298}],"domain":"","content":"#\n\n\nModern.js Plugin System#\n\nModern.js is a system used for extending the functionality of a project at\ndifferent stages such as running, requesting, and rendering. It mainly consists\nof three parts: the Hook model, the Manager, and the Context Sharing mechanism.\n\nThe Hook model is used to determine the execution method of the current Hook,\nand functions with different Hook models have different execution logics. The\nManager is used to control the execution and scheduling of Hooks. The Context\nSharing mechanism is used to pass information between different Hooks.\n\nCurrently, Modern.js provides several different Hook models:\n\n * Pipeline\n   * Sync\n   * Async\n * Waterfall\n   * Sync\n   * Async\n * Workflow\n   * Sync\n   * Async\n   * Parallel(Async)\n\nNOTE\n\nSubsequent chapters will introduce the execution methods of each model in\ndetail.\n\nBased on the Hook model and Manager, Modern.js exposes three sets of plugins:\nCLI, Runtime, and Server.\n\nAmong them, the CLI plugin is the main running flow control model in Modern.js,\nand most of the features in Modern.js are mainly run through this set of models.\nThe Runtime plugin is mainly responsible for processing the rendering logic of\nReact components. The Server plugin is mainly used for controlling the server\nlifecycle and user requests.\n\n\nWhat Plugins Can Do#\n\nAll of Modern.js's features are implemented through this set of plugins, which\nmeans that all of Modern.js's capabilities are open to developers. Developers\ncan develop plugins to extend more functionality and adapt to complex scenarios,\nincluding but not limited to:\n\n * Registering commands\n * Modifying Modern.js configuration and validation schema\n * Modifying compilation configurations for Webpack/Babel/Less/Sass/Tailwind\n   CSS/...\n * Modifying the React components/elements to be rendered at runtime\n * Modifying page routing\n * Modifying server routing\n * Customizing console output\n * Customizing dynamic HTML templates\n * Customizing Node.js server frameworks\n * Customizing React component client/server rendering\n * ...\n\nWhen Modern.js does not currently cover the functionality or scenario that you\nneed, you can develop a custom plugin to implement the related functionality for\nadapting to special scenarios.","frontmatter":{"title":"Introduction","sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/introduction.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/introduction.mdx"},{"id":236,"title":"Lifecycle","routePath":"/en/guides/topic-detail/framework-plugin/lifecycle","lang":"en","toc":[],"domain":"","content":"#\n\nModern.js application has a complete lifecycle, including CLI, Server Side and\nRuntime three stages.\n\nModern.js lifecycle is as follows:\n\nNOTE\n\nThe rectangle of the pink box represents the plugin hook provided by the\nModern.js, and the light yellow base color ellipse represents the linkage point\nwith the next stage.\n\n","frontmatter":{"title":"Lifecycle","sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/lifecycle.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/lifecycle.mdx"},{"id":237,"title":"Plugin API","routePath":"/en/guides/topic-detail/framework-plugin/plugin-api","lang":"en","toc":[{"text":"API","id":"api","depth":2,"charIndex":503},{"text":"useConfigContext","id":"useconfigcontext","depth":3,"charIndex":510},{"text":"useResolvedConfigContext","id":"useresolvedconfigcontext","depth":3,"charIndex":1009},{"text":"useAppContext","id":"useappcontext","depth":3,"charIndex":1612},{"text":"useHookRunners","id":"usehookrunners","depth":3,"charIndex":2147}],"domain":"","content":"#\n\nThe setup function of the plugin will receive an api imported parameter, and you\ncan call some methods provided on the api to obtain information such as\nconfiguration and application context.\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  setup(api) {\n    // get user config\n    const config = api.useConfigContext();\n    // get plugin context\n    const appContext = api.useAppContext();\n    // get resolved config\n    const resolvedConfig = api.useResolvedConfigContext();\n  },\n});\n\n\n\nAPI#\n\n\nuseConfigContext#\n\nUsed to retrieve the original configuration of the application.\n\nconst useConfigContext: () => UserConfig;\n\ninterface UserConfig {\n  source?: SourceConfig;\n  output?: OutputConfig;\n  server?: ServerConfig;\n  deploy?: DeployConfig;\n  // ...other fields\n}\n\n\nPlease refer to Configuration for the specific meanings of configuration fields.\n\nTIP\n\nThis method returns a read-only configuration and cannot be modified. If you\nneed to modify the configuration, please use config hook.\n\n\nuseResolvedConfigContext#\n\nUsed to retrieve the final configuration after parsing.\n\nconst useResolvedConfigContext: () => NormalizedConfig;\n\ninterface NormalizedConfig {\n  source: NormalizedSourceConfig;\n  output: NormalizedOutputConfig;\n  server: NormalizedServerConfig;\n  deploy: NormalizedDeployConfig;\n  _raw: UserConfig; // the original user config\n  // ...other fields\n}\n\n\nPlease refer to Configuration for the specific meanings of configuration fields.\n\nTIP\n\nThis method returns a read-only configuration and cannot be modified. If you\nneed to modify the configuration, please use config hook.\n\n\nuseAppContext#\n\nUsed to retrieve the runtime context of the application.\n\nconst useAppContext: () => IAppContext;\n\ninterface IAppContext {\n  appDirectory: string;\n  configFile: string | false;\n  ip?: string;\n  port?: number;\n  distDirectory: string;\n  packageName: string;\n  srcDirectory: string;\n  sharedDirectory: string;\n  nodeModulesDirectory: string;\n  internalDirectory: string;\n  plugins: {\n    cli?: any;\n    server?: any;\n  }[];\n  entrypoints: Entrypoint[];\n  serverRoutes: ServerRoute[];\n  htmlTemplates: HtmlTemplates;\n}\n\n\n\nuseHookRunners#\n\nUsed to retrieve the executor of Hooks and trigger the execution of specific\nHooks.\n\n\n\nexport default (): CliPlugin => ({\n  name: 'my-plugin',\n\n  async setup(api) {\n    const hookRunners = api.useHookRunners();\n    // invoke afterBuild Hook\n    await hookRunners.afterBuild();\n  },\n});\n","frontmatter":{"title":"Plugin API","sidebar_position":6},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/plugin-api.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/plugin-api.mdx"},{"id":238,"title":"Relationship","routePath":"/en/guides/topic-detail/framework-plugin/relationship","lang":"en","toc":[{"text":"Plugin Sorting","id":"plugin-sorting","depth":2,"charIndex":820},{"text":"Pre","id":"pre","depth":3,"charIndex":931},{"text":"Post","id":"post","depth":3,"charIndex":1349},{"text":"rivals","id":"rivals","depth":2,"charIndex":1678},{"text":"required","id":"required","depth":2,"charIndex":2078},{"text":"Register Plugin","id":"register-plugin","depth":2,"charIndex":2486}],"domain":"","content":"#\n\nThe plugin configuration object in Modern.js provides a series of fields to\ncontrol plugin order, mutual exclusion, and other capabilities. The available\nfields are as follows:\n\n * name: string, sets the name of the current plugin.\n * pre: string[], these plugins will be adjusted to be executed before the\n   current plugin.\n * post: string[], these plugins will be adjusted to be executed after the\n   current plugin.\n * rivals: string[], mutually exclusive plugins, an error will be thrown when\n   encountering these plugins.\n * required: string[], required plugins, an error will be thrown when the\n   corresponding plugin is not found in the plugin list.\n * usePlugin: CliPlugin[], registers other plugins.\n\nThe above parameters can be used to achieve plugin front, back, mutual\nexclusion, and mandatory logic.\n\n\nPlugin Sorting#\n\nModern.js plugins achieve plugin sorting functionality through the pre and post\nparameters.\n\n\nPre#\n\nBy default, plugins are executed in the order they are added. You can declare\npreceding plugins to be executed by using the pre field.\n\nFor example, there are the following two plugins:\n\nconst foo = {\n  name: 'plugin-foo',\n};\n\n\nconst bar = {\n  name: 'plugin-bar',\n  pre: ['plugin-foo'],\n};\n\n\nThe bar plugin configures the foo plugin in the pre field, so the'foo' plugin\nmust be executed before the bar plugin.\n\n\nPost#\n\nDeclare succeeding plugins to be executed by using the post field.\n\nconst foo = {\n  name: 'plugin-foo',\n};\n\n\nconst bar = {\n  name: 'plugin-bar',\n  post: ['plugin-foo'],\n};\n\n\nIf you use the post parameter in the bar plugin's configuration and set it to\n['foo'], then the foo plugin will be executed after the bar plugin.\n\n\nrivals#\n\nThe rivals field can be used to declare a mutual exclusion relationship between\nplugins.\n\nthere are two plugin:\n\nconst foo = {\n  name: 'plugin-foo',\n};\n\n\nconst bar = {\n  name: 'plugin-bar',\n  rivals: ['plugin-foo'],\n};\n\n\nThe bar plugin has been configured with the foo plugin in the rivals field,\ntherefore an error will be thrown if both the foo and bar plugins are added\nsimultaneously.\n\n\nrequired#\n\nThe required field can be used to declare a dependency relationship between\nplugins.\n\nthere are two plugin:\n\nconst foo = {\n  name: 'plugin-foo',\n};\n\n\nconst bar = {\n  name: 'plugin-bar',\n  required: ['plugin-foo'],\n};\n\n\nThe bar plugin has been configured with the foo plugin in the required field.\nTherefore, an error will be thrown when using the bar plugin if the foo plugin\nis not configured.\n\n\nRegister Plugin#\n\nWhen there is a dependency relationship between plugins, we can also actively\nregister another plugin in a plugin by using usePlugin.\n\nconst foo = () => ({\n  name: 'plugin-foo',\n});\n\nconst bar = () => ({\n  name: 'plugin-bar',\n  usePlugin: [foo()],\n});\n\n\nWhen the user configures the bar plugin, the foo plugin will also be\nautomatically registered and activated. The user does not need to register the\nfoo plugin separately.","frontmatter":{"title":"Relationship","sidebar_position":4},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/framework-plugin/relationship.mdx","_relativePath":"en/guides/topic-detail/framework-plugin/relationship.mdx"},{"id":239,"title":"Configuration Parameters","routePath":"/en/guides/topic-detail/generator/create/config","lang":"en","toc":[{"text":"General Configuration","id":"general-configuration","depth":2,"charIndex":274},{"text":"solution","id":"solution","depth":3,"charIndex":299},{"text":"scenes","id":"scenes","depth":3,"charIndex":475},{"text":"Web App","id":"web-app","depth":2,"charIndex":604},{"text":"language","id":"language","depth":3,"charIndex":615},{"text":"packageManager","id":"packagemanager","depth":3,"charIndex":716},{"text":"buildTools","id":"buildtools","depth":3,"charIndex":839},{"text":"Npm Module","id":"npm-module","depth":2,"charIndex":945},{"text":"packageName","id":"packagename","depth":3,"charIndex":959},{"text":"Modern Doc","id":"modern-doc","depth":2,"charIndex":1121},{"text":"Monorepo","id":"monorepo","depth":2,"charIndex":-1}],"domain":"","content":"#\n\n@modern-js/create provides the --config parameter, which is used to specify the\nanswers to interactive questions in advance during the execution process.\n\nHere, we will introduce the fields and field values that can be configured in\nthe config under different scenario.\n\n\nGeneral Configuration#\n\n\nsolution#\n\nQuestion: Please select the type of project you want to create.\n\nOptions:\n\n * Web App -- mwa\n\n * Npm Module -- module\n\n * Doc Site -- doc\n\n * Monorepo -- monorepo\n\n\nscenes#\n\nQuestion: Please select the project scenario.\n\nOptions:\n\nList of plugin keywords when using custom generator plugins.\n\n\nWeb App#\n\n\nlanguage#\n\nQuestion: Please select the programming language.\n\nOptions:\n\n * TS -- ts\n\n * ES6+ -- js\n\n\npackageManager#\n\nQuestion: Please select the package manager.\n\nOptions:\n\n * pnpm -- pnpm\n\n * Yarn -- yarn\n\n * npm -- npm\n\n\nbuildTools#\n\nQuestion: Please select the bundler.\n\nOptions:\n\n * webpack -- webpack\n\n * Rspack -- rspack\n\n\nNpm Module#\n\n\npackageName#\n\nQuestion: Please fill in the project name.\n\nINFO\n\nThe value of the name field in the package.json file of the Npm module, which is\na string type.\n\n\nModern Doc#\n\n\nMonorepo#","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/create/config.mdx","_relativePath":"en/guides/topic-detail/generator/create/config.mdx"},{"id":240,"title":"CLI Options","routePath":"/en/guides/topic-detail/generator/create/option","lang":"en","toc":[{"text":"[projectDir]","id":"[projectdir]","depth":2,"charIndex":1444},{"text":"--version","id":"--version","depth":2,"charIndex":1979},{"text":"--lang <lang>","id":"--lang-<lang>","depth":2,"charIndex":-1},{"text":"-c, --config <config>","id":"-c,---config-<config>","depth":2,"charIndex":-1},{"text":"-d,--debug","id":"-d,--debug","depth":2,"charIndex":2965},{"text":"--mwa","id":"--mwa","depth":2,"charIndex":3173},{"text":"--module","id":"--module","depth":2,"charIndex":3217},{"text":"--monorepo","id":"--monorepo","depth":2,"charIndex":3267},{"text":"-p, --plugin <plugin>","id":"-p,---plugin-<plugin>","depth":2,"charIndex":-1},{"text":"--generator <generator>","id":"--generator-<generator>","depth":2,"charIndex":-1},{"text":"--dist-tag <distTag>","id":"--dist-tag-<disttag>","depth":2,"charIndex":-1},{"text":"--packages <packages>","id":"--packages-<packages>","depth":2,"charIndex":-1},{"text":"--registry <registry>","id":"--registry-<registry>","depth":2,"charIndex":-1},{"text":"--no-need-install","id":"--no-need-install","depth":2,"charIndex":4859},{"text":"clean-cache","id":"clean-cache","depth":2,"charIndex":5091}],"domain":"","content":"#\n\n@modern-js/create provides many configuration parameters to configure its\nbehavior during execution, which can be viewed using the --help parameter:\n\nnpx @modern-js/create@latest --help\n\nUsage: npx @modern-js/create@latest [projectDir]\n\ncreate Modern.js solution project\n\nOptions:\n  --version                show create tools version\n  --lang             set create tools language(en or zh)\n  -c, --config     set default project config(json string) (default: \"{}\")\n  -d,--debug               using debug mode to log something (default: false)\n  --mwa                    create mwa application using default config (default: false)\n  --module                 create module application using default config (default: false)\n  --monorepo               create monorepo application using default config (default: false)\n  --generator   run custom generator\n  -p, --plugin     use generator plugin to create new solution or customize Modern.js solution (default: [])\n  --dist-tag      use specified tag version for it\\'s generator (default: \"\")\n  --packages     set project specific dependency version information (default: \"{}\")\n  --registry     set npm registry url to run npm command (default: \"\")\n  --no-need-install        not run install command\n  -h, --help               display help for command\n\nCommands:\n  clean-cache              clean locale generator cache\n\n\nThe following will provide a detailed introduction to these parameters:\n\n\n[projectDir]#\n\nThe project directory name.\n\nWhen executing @modern-js/create, a projectDir folder will be created in the\ncurrent directory by default, and the project will be initialized in this\nfolder. If this parameter is empty, the initialization project will be directly\ngenerated in the current directory.\n\nINFO\n\nIf the contents of the directory where projectDir is located are not empty, a\nprompt will be given whether to continue creating. It is recommended to perform\nproject initialization operations in an empty directory.\n\n\n--version#\n\nGet the version of the @modern-js/create tool.\n\nnpx @modern-js/create@latest --version\n\n[INFO] @modern-js/create v2.21.1\n\n\n\n--lang #\n\nThe execution language, supports zh and en.\n\nBy default, @modern-js/create will automatically identify the user's system\nlanguage and choose to use Chinese or English. If the identification fails or\ndoes not meet usage habits, you can manually specify it using this parameter.\n\n\n-c, --config #\n\nSpecify the default project configuration.\n\nBy default, @modern-js/create will prompt for interactive questions such as\nlanguage selection and package management tools during the execution process.\nWhen it is necessary to specify these configuration contents in advance, they\ncan be passed in through this field.\n\nThis field is a JSON string. For example, when specifying a package management\ntool:\n\nnpx @modern-js/create@latest --config '{\"packageManager\": \"pnpm\"}'\n\n\nSupported parameters for config can be found at Configuration Parameters。\n\n\n-d,--debug#\n\nDisplay debug logs.\n\nWhen encountering problems during use, you can use this parameter to display\ndebug logs, which is convenient for quickly locating the problem position and\ntroubleshooting.\n\n\n--mwa#\n\nQuickly create a Web App project.\n\n\n--module#\n\nQuickly create a Npm Module project.\n\n\n--monorepo#\n\nQuickly create a Monorepo project.\n\n\n-p, --plugin #\n\nSpecify a generator plugin.\n\n@modern-js/create supports customizing the default project solution type of\nModern.js or adding project solution type scenarios using generator plugin. For\ndetails, please refer to Developing Generator Plugin.\n\n\n--generator #\n\nSpecify a micro-generator.\n\n@modern-js/create supports completely customizing the project generation process\nusing micro-generator.\n\n\n--dist-tag #\n\nSpecify the version of the generator and Modern.js-related dependencies.\n\nDuring the execution of @modern-js/create, a smaller micro-generator will be\nexecuted by default, and the latest version of the micro-generator will be used\nby default. This parameter can be used to specify the version number of the\nmicro-generator to be executed and the version of the installed\nModern.js-related dependencies.\n\nFor example, use the next version:\n\nnpx @modern-js/create@next --dist-tag next\n\n\n\n--packages #\n\nSpecify specific package version dependencies when creating a project.\n\nIf you need to specify a specific package version when creating a project, you\ncan use this parameter. This parameter will configure pnpm.overrides (if the\npackage management tool is pnpm) or resolutions to lock the package version\nnumber in the package.json file in the project root directory.\n\nThe parameter value is a JSON string.\n\nFor example, specify the react version:\n\nnpx @modern-js/create@latest --packages '{\"react\":\"^17\"}'\n\n\n\n--registry #\n\nSpecify the sub-generator to execute and the npm registry to fetch project\ndependencies version.\n\n\n--no-need-install#\n\nIgnore automatic installation of dependencies.\n\nBy default, @modern-js/create will automatically install dependencies after\ncreating a project. Using this parameter can ignore the installation of\ndependencies.\n\n\nclean-cache#\n\nThe @modern-js/create command generates sub-generators cache in the tmp\ndirectory of the execution machine by default to speed up the generator\nexecution. This command can be used to delete the cache when it needs to be\nrefreshed or when there are problems with the cache.\n\nnpx @modern-js/create@latest clean-cache\n","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/create/option.md","_relativePath":"en/guides/topic-detail/generator/create/option.md"},{"id":241,"title":"Usage","routePath":"/en/guides/topic-detail/generator/create/use","lang":"en","toc":[{"text":"Environment Preparation","id":"environment-preparation","depth":2,"charIndex":213},{"text":"Node.js","id":"nodejs","depth":3,"charIndex":240},{"text":"pnpm","id":"pnpm","depth":3,"charIndex":1182},{"text":"Create a Project with @modern-js/create","id":"create-a-project-with-@modern-js/create","depth":2,"charIndex":1341},{"text":"Create an Web APP Project","id":"create-an-web-app-project","depth":3,"charIndex":1759},{"text":"Create an Npm Module Project","id":"create-an-npm-module-project","depth":3,"charIndex":2015},{"text":"Create a Modern Doc Project","id":"create-a-modern-doc-project","depth":3,"charIndex":2289},{"text":"Create Monorepo Project","id":"create-monorepo-project","depth":3,"charIndex":2470}],"domain":"","content":"#\n\nModern.js provides @modern-js/create tool for creating project templates\nprovided by Modern.js, including Web App, Npm Module, Modern Doc, Monorepo.\n\nThe following will introduce how to use @modern-js/create.\n\n\nEnvironment Preparation#\n\n\nNode.js#\n\nBefore getting started, you will need to install Node.js, and ensure that your\nNode.js version is higher than 14.17.6. We recommend using the LTS version of\nNode.js 16.\n\nYou can check the currently used Node.js version with the following command:\n\nnode -v\n# v16.19.1\n\n\nIf you do not have Node.js installed in your current environment, or the\ninstalled version is lower than 14.17.6, you can use nvm or fnm to install the\nrequired version.\n\nHere is an example of how to install the Node.js 16 LTS version via nvm:\n\n# Install the long-term support version of Node.js 16\nnvm install 16 --lts\n\n# Make the newly installed Node.js 16 as the default version\nnvm alias default 16\n\n# Switch to the newly installed Node.js 16\nnvm use 16\n\n\nnvm and fnm\n\nBoth nvm and fnm are Node.js version management tools. Relatively speaking, nvm\nis more mature and stable, while fnm is implemented using Rust, which provides\nbetter performance than nvm.\n\n\npnpm#\n\nIt is recommended to use pnpm to manage dependencies:\n\nnpm install -g pnpm@7\n\n\nNOTE\n\nModern.js also supports dependency management with yarn and npm.\n\n\nCreate a Project with @modern-js/create#\n\nYou do not need to install @modern-js/create globally, just use npx to run it:\n\nnpx @modern-js/create@latest [projectDir]\n\n\nINFO\n\n[projectDir] is the project directory name. If it is not filled in, the project\nwill be created in the current directory.\n\nDuring the execution, complete the interaction according to the prompt to create\na project that meets your requirements.\n\n\nCreate an Web APP Project#\n\nnpx @modern-js/create@latest web-app\n? Please select the type of project you want to create: Web App\n? Please select the programming language: TS\n? Please select the package manager: pnpm\n? Please select the bundler: webpack\n\n\n\nCreate an Npm Module Project#\n\nnpx @modern-js/create@latest npm-module\n? Please select the type of project you want to create: Npm Module\n? Please fill in the project name: npm-module\n? Please select the programming language: TS\n? Please select the package manager: pnpm\n\n\n\nCreate a Modern Doc Project#\n\nnpx @modern-js/create@latest doc-website\n? Please select the type of project you want to create: Doc Site\n? Please select the package manager: pnpm\n\n\n\nCreate Monorepo Project#\n\nnpx @modern-js/create@latest monorepo\n? Please select the type of project you want to create: Doc Site\n? Please select the package manager: pnpm\n","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/create/use.mdx","_relativePath":"en/guides/topic-detail/generator/create/use.mdx"},{"id":242,"title":"Configuration Parameters","routePath":"/en/guides/topic-detail/generator/new/config","lang":"en","toc":[{"text":"General Configuration","id":"general-configuration","depth":2,"charIndex":272},{"text":"actionType","id":"actiontype","depth":3,"charIndex":297},{"text":"Web App","id":"web-app","depth":2,"charIndex":477},{"text":"element","id":"element","depth":3,"charIndex":488},{"text":"name","id":"name","depth":3,"charIndex":650},{"text":"function","id":"function","depth":3,"charIndex":818},{"text":"bffType","id":"bfftype","depth":3,"charIndex":1259},{"text":"framework","id":"framework","depth":3,"charIndex":1436},{"text":"refactor","id":"refactor","depth":3,"charIndex":1607},{"text":"Npm Module","id":"npm-module","depth":2,"charIndex":1721},{"text":"function","id":"function-1","depth":3,"charIndex":1735},{"text":"Monorepo","id":"monorepo","depth":2,"charIndex":1959},{"text":"sub_solution","id":"sub_solution","depth":3,"charIndex":1971},{"text":"packageName","id":"packagename","depth":3,"charIndex":2175},{"text":"packagePath","id":"packagepath","depth":3,"charIndex":2337}],"domain":"","content":"#\n\nThe new command provides the --config parameter, which is used to specify the\nanswers to interactive questions in advance during the execution process.\n\nHere, we will introduce the fields and field values that can be configured in\nthe config under different scenario.\n\n\nGeneral Configuration#\n\n\nactionType#\n\nQuestion: Please select the operation you wants.\n\nOptions:\n\n * Create project element -- element\n\n * Enable features -- function\n\n * Automatic refactors -- refactor\n\n\nWeb App#\n\n\nelement#\n\nQuestion: Please select the type of element to create.\n\nOptions:\n\n * New \"entry\" -- entry\n\n * New \"Custom Web Server\" source code directory -- server\n\n\nname#\n\nQuestion: Please fill in the entry name.\n\nINFO\n\nThis configuration is required when creating a new application entry, and the\nconfiguration value is a string.\n\n\nfunction#\n\nQuestion: Please select the feature name.\n\nOptions:\n\n * Enable Rspack Build -- rspack\n\n * Enable Tailwind CSS -- tailwindcss\n\n * Enable BFF -- bff\n\n * Enable SSG -- ssg\n\n * Enable SWC Compile -- swc\n\n * Enable Micro Frontend -- micro_frontend\n\n * Enable Unit Test / Integration Test -- test\n\n * Enable UA-based Polyfill Feature -- polyfill\n\n * Enable Global Proxy -- proxy\n\n * Enable Visual Testing (Storybook) -- mwa_storybook\n\n\nbffType#\n\nQuestion: Please select the BFF type\n\nOptions:\n\n * Function -- func\n\n * Framework -- framework\n\nINFO\n\nThis configuration is required when enabling the BFF function.\n\n\nframework#\n\nQuestion: Please select the framework.\n\nOptions:\n\n * Express -- express\n\n * Koa -- koa\n\nINFO\n\nThis configuration is required when enabling the BFF function.\n\n\nrefactor#\n\nQuestion: Please select the type of refactoring.\n\nOptions:\n\n * Use React Router v5 -- react_router_5\n\n\nNpm Module#\n\n\nfunction#\n\nQuestion: Please select the feature name.\n\nOptions:\n\n * Enable Unit Test / Integration Test -- test\n\n * Enable Tailwind CSS -- tailwindcss\n\n * Enable Storybook -- storybook\n\n * Enable Runtime API -- runtime_api\n\n\nMonorepo#\n\n\nsub_solution#\n\nQuestion: Please select the type of project you want to create.\n\nOptions:\n\n * Web App -- mwa\n\n * Web App (Test)-- mwa_test\n\n * Npm Module -- module\n\n * Npm Module (Inner) -- inner_module\n\n\npackageName#\n\nQuestion: Please fill in the project name\n\nINFO\n\nThe value of the name field in the package.json file of the sub-project, which\nis a string type.\n\n\npackagePath#\n\nQuestion: Please fill in the sub-project directory name\n\nINFO\n\nThe name of the subdirectory in the apps or packages directory on which the\nsub-project is based, which is a string type.","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/new/config.md","_relativePath":"en/guides/topic-detail/generator/new/config.md"},{"id":243,"title":"CLI Parameters","routePath":"/en/guides/topic-detail/generator/new/option","lang":"en","toc":[{"text":"--lang <lang>","id":"--lang-<lang>","depth":2,"charIndex":-1},{"text":"-c, --config <config>","id":"-c,---config-<config>","depth":2,"charIndex":-1},{"text":"-d,--debug","id":"-d,--debug","depth":2,"charIndex":1512},{"text":"--registry <registry>","id":"--registry-<registry>","depth":2,"charIndex":-1},{"text":"--dist-tag <distTag>","id":"--dist-tag-<disttag>","depth":2,"charIndex":-1}],"domain":"","content":"#\n\nThe new command provides many configuration parameters to configure its behavior\nduring execution, which can be viewed using the --help parameter:\n\nnpm run new --help\n\nUsage: modern new [options]\n\nenable optional features or add a new entry\n\nOptions:\n  --lang           set new command language(en or zh)\n  -c, --config   set default generator config(json string)\n  -d, --debug            using debug mode to log something (default: false)\n  --dist-tag        use specified tag version for it's generator\n  --registry   set npm registry url to run npm command\n  -h, --help             display help for command\n\n\nThe following will provide a detailed introduction to these parameters:\n\n\n--lang #\n\nThe language used for execution, supports zh and en.\n\nBy default, the new command will automatically recognize the user's system\nlanguage and choose to use Chinese or English. If recognition fails or does not\nmeet usage habits, this parameter can be used to manually specify it.\n\n\n-c, --config #\n\nSpecify the default configuration for the project.\n\nBy default, the new command will prompt interactive questions during the\nexecution process for selecting operation types, enabling features, etc. When it\nis necessary to specify these configuration contents in advance, they can be\npassed in through this field.\n\nThis field is a JSON string. For example, to specify the BFF framework:\n\nnpm run new --config '{\"framework\": \"express\"}'\n\n\nThe parameters supported by config can be viewed in Configuration Parameters。\n\n\n-d,--debug#\n\nDisplays debug logs.\n\nWhen encountering problems during use, this parameter can be used to display\ndebug logs, which is convenient for quickly locating the problem location and\ntroubleshooting the problem.\n\n\n--registry #\n\nSpecify the sub-generator to execute and the npm registry to fetch project\ndependencies version.\n\n\n--dist-tag #\n\nSpecify the generator version.\n\nDuring the execution process of the new command, smaller micro-generator will be\nexecuted by default, and the latest micro-generator version will be used by\ndefault. This parameter can be used to specify the version number of the\nmicro-generator to be executed.\n\nFor example, using the next version:\n\nnpm run new --dist-tag next\n","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/new/option.md","_relativePath":"en/guides/topic-detail/generator/new/option.md"},{"id":244,"title":"Usage","routePath":"/en/guides/topic-detail/generator/new/use","lang":"en","toc":[{"text":"Web App","id":"web-app","depth":2,"charIndex":145},{"text":"Npm Module","id":"npm-module","depth":2,"charIndex":2233},{"text":"Monorepo","id":"monorepo","depth":2,"charIndex":2813}],"domain":"","content":"#\n\nIn Web App, Npm Module and Monorepo projects, we provide the new command to\ncreate project elements, enable features and create sub-project.\n\n\nWeb App#\n\nWeb App projects use the new command provided by @modern-js/app-tools.\n\nThe new command provides three types of operations:\n\n * Create project elements\n\n * Enable optional features\n\n * Automatic refactoring\n\nEach type of operation provides a corresponding list of supported options, which\ncan be selected based on the project situation.\n\nFor example:\n\nCreate a new application entry:\n\nnpm run new\n? Please select the operation you want: Create Element\n? Please select the type of element to create: New \"entry\"\n? Please fill in the entry name: entry\n\n\nAfter running, a new folder with the corresponding name of the entry will be\ncreated in the src directory of the project, along with the default entry file.\nThe previous entry files under the src directory will be sorted into the folder\ncorresponding to the name field in package.json.\n\nEnable BFF function:\n\nnpm run new\n? Please select the operation you want: Enable Features\n? Please select the feature name: Enable BFF\n? Please select the BFF type: Function\n? Please select the framework: Express\n\n\nAfter running, BFF-related dependencies will be installed in the project, and an\napi directory will be created for BFF module development, along with prompt\ninformation for registering BFF plugins.\n\nINFO\n\nWe did not automatically register the plugin for the user here because the\nmodern.config.[tj]s may change during the project lifecycle, and there may be\nproblems with mutual references between modules, so allowing the user to\nmanually register can ensure the correctness of modifying the configuration.\n\nIn subsequent customized development, if there are similar needs, you can also\nprovide users with operational guidance through prompts, allowing users to\nmanually operate on files.\n\nWARNING\n\nWhen running the new command, it may be necessary to enable a feature that is\nnot in the list. Check whether the corresponding plugin for the feature has been\ninstalled in the package.json file of the project. If you still need to use the\nnew command to enable it, you need to manually remove the plugin dependency\nfirst.\n\n\nNpm Module#\n\nNpm Module projects use the new command provided by @modern-js/module-tools.\n\nThe new command provides the ability to enable optional features.\n\nFor example:\n\nEnable Storybook capability:\n\nnpm run new\n? Please select the operation you want: Enable Features\n? Please select the feature name: Enable Storybook\n\n\nAfter running, Storybook plugin dependencies will be installed in the project,\nand the storybook command will be added. A stories directory will be created for\nStorybook module development, along with prompt information for registering\nStorybook plugins.\n\n\nMonorepo#\n\nMonorepo projects use the new command provided by @modern-js/monorepo-tools.\n\nThe new command provides the ability to create sub-project.\n\nFor example:\n\nCreate Web App Sub-project:\n\n? Please select the type of project you want to create: Web App\n? Please fill in the sub-project name: web_app\n? Please fill in the sub-project directory name: web_app\n? Please select the programming language: TS\n? Please select the bundler: webpack\n\n\nAfter running, a sub-project named web_app will be created in the apps directory\nof the project. In the sub-project directory, you can still run the new command\nto create project elements and enable features.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/new/use.md","_relativePath":"en/guides/topic-detail/generator/new/use.md"},{"id":245,"title":"afterForged","routePath":"/en/guides/topic-detail/generator/plugin/api/afterForged","lang":"en","toc":[{"text":"Types","id":"types","depth":2,"charIndex":114},{"text":"API","id":"api","depth":2,"charIndex":488},{"text":"isInGitRepo","id":"isingitrepo","depth":3,"charIndex":561},{"text":"initGitRepo","id":"initgitrepo","depth":3,"charIndex":633},{"text":"gitAddAndCommit","id":"gitaddandcommit","depth":3,"charIndex":702},{"text":"install","id":"install","depth":3,"charIndex":813}],"domain":"","content":"#\n\nafterForged is a lifecycle function used for other step operations after file\noperations in generator plugin.\n\n\nTypes#\n\nexport type AfterForgedAPI = {\n  isInGitRepo: () => Promise;\n  initGitRepo: () => Promise;\n  gitAddAndCommit: (commitMessage: string) => Promise;\n  install: () => Promise;\n};\n\nexport type PluginAfterForgedFunc = (api: AfterForgedAPI, inputData: Record) => Promise;\n\nexport interface IPluginContext {\n   afterForged: (func: PluginAfterForgedFunc) => void;\n  ...\n}\n\n\n\nAPI#\n\nThe APIs provided by the api parameter will be introduced below.\n\n\nisInGitRepo#\n\nChecks whether the current project is a git repository.\n\n\ninitGitRepo#\n\nInitializes the current project as a git repository.\n\n\ngitAddAndCommit#\n\nCommits changes to the current repository.\n\nParameters:\n\n * commitMessage: commit message.\n\n\ninstall#\n\nInstalls dependencies in the root directory of the project. The install function\nwill use the corresponding package management tool according to the value of\npackageManager to install dependencies.","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/afterForged.md","_relativePath":"en/guides/topic-detail/generator/plugin/api/afterForged.md"},{"id":246,"title":"context","routePath":"/en/guides/topic-detail/generator/plugin/api/context","lang":"en","toc":[{"text":"Types","id":"types","depth":2,"charIndex":184},{"text":"Get Information","id":"get-information","depth":3,"charIndex":1092},{"text":"locale","id":"locale","depth":4,"charIndex":1110},{"text":"isFileExist","id":"isfileexist","depth":4,"charIndex":1276},{"text":"readDir","id":"readdir","depth":4,"charIndex":1637},{"text":"Input Operations","id":"input-operations","depth":3,"charIndex":1987},{"text":"addInputBefore","id":"addinputbefore","depth":4,"charIndex":2275},{"text":"addInputAfter","id":"addinputafter","depth":4,"charIndex":2645},{"text":"setInput","id":"setinput","depth":4,"charIndex":3594},{"text":"setInputValue","id":"setinputvalue","depth":4,"charIndex":3914},{"text":"setDefaultConfig","id":"setdefaultconfig","depth":4,"charIndex":4229},{"text":"setGitMessage","id":"setgitmessage","depth":4,"charIndex":4620},{"text":"Lifecycle Functions","id":"lifecycle-functions","depth":3,"charIndex":4790}],"domain":"","content":"#\n\nThe generator plugin exports a function by default in the main file, and the\nfunction parameter is context. All APIs provided by the generator plugin are\nprovided by this context.\n\n\nTypes#\n\nLet's first understand the type definition of context:\n\nexport interface IPluginContext {\n  locale?: string;\n  addInputBefore: (key: string, input: Schema) => void;\n  addInputAfter: (key: string, input: Schema) => void;\n  setInput: (key: string, field: string, value: unknown) => void;\n  setInputValue: (value: Record) => void;\n  setDefaultConfig: (value: Record) => void;\n  isFileExist: (fileName: string) => Promise;\n  readDir: (dir: string) => Promise;\n  setGitMessage: (gitMessage: string) => void;\n  onForged: (func: PluginForgedFunc) => void;\n  afterForged: (func: PluginAfterForgedFunc) => void;\n}\n\n\nThe contents provided by context can be mainly divided into three categories:\n\n * Get the information of the current generator execution environment.\n\n * Operate input.\n\n * Generator plugin lifecycle function.\n\nThe generator plugin APIs will be introduced from these three categories below.\n\n\nGet Information#\n\nlocale#\n\nGets the language of the generator plugin execution environment.\n@modern-js/create provides two languages, zh and en, which correspond to these\ntwo values.\n\nisFileExist#\n\nChecks whether a file exists. We often need to confirm whether the target\nproject file exists before defining the operation. This API can be used directly\nfor this purpose.\n\nFor example, we need to find out if the package.json file exists and then do\nsomeing:\n\nconst isExist = await context.isFileExist('package.json');\nif (isExist) {\n    ...\n}\n\n\nreadDir#\n\nGets the file list in a folder. We often need to get the file list under the\ntarget project folder before defining the operation. This API can be used\ndirectly for this purpose.\n\nFor example, we need to get all files under the src folder and then do someing:\n\nconst files = await context.readDir('src');\n\nfiles.map(name => {\n    ...\n});\n\n\n\nInput Operations#\n\nThe key parameter used in input operations can refer to Configuration Parameters\nand use the key under the solution’s scheme, that is, it does not support\nsolution and scenes.\n\nThe input parameter in input operations corresponds to the schema type described\nin Input.\n\naddInputBefore#\n\nAdds a question before the specified input key.\n\nFor example:\n\ncontext.addInputBefore('packageManager', {\n  type: 'object',\n  properties: {\n    language: {\n      type: 'string',\n      title: 'Please select the programming language:',\n      enum: [\n        { label: 'TS', value: 'ts' },\n        { label: 'ES6+', value: 'js' },\n      ],\n    },\n  },\n});\n\n\naddInputAfter#\n\nAdds a question after the specified input key.\n\nFor example:\n\ncontext.addInputAfter('packageManager', {\n  type: 'object',\n  properties: {\n    language: {\n      type: 'string',\n      title: 'Please select the programming language:',\n      enum: [\n        { label: 'TS', value: 'ts' },\n        { label: 'ES6+', value: 'js' },\n      ],\n    },\n  },\n});\n\n\nINFO\n 1. The key for adding a question cannot be the same as the key of the question\n    provided by Modern.js solution scheme itself.\n 2. The priority of adding a question with addInputAfter is higher than that of\n    addInputBefore. When adding an After question to a key and adding a Before\n    question to the next key, the After question will be before the Before\n    question.\n 3. When adding multiple questions before or after the same key, this method can\n    be called multiple times, and the order of the questions will be arranged\n    according to the calling sequence.\n\nsetInput#\n\nSets the attributes of the specified input key.\n\nFor example, set the title attribute of packageName:\n\ncontext.setInput('packageName', 'title', \"Name\");\n\n\nINFO\n\nFor input options provided by Modern.js solution schemes, only deletion is\nsupported, and adding will cause logical judgment problems in the code.\n\nsetInputValue#\n\nSets the default value of the specified input key.\n\nFor example, set the default value of packageManager:\n\ncontext.setInputValue({\n  packageManager: 'npm',\n});\n\n\nINFO\n\nAfter setting, the question still needs to be interactive, but the default value\nconfigured by the generator plugin will be used.\n\nsetDefaultConfig#\n\nSets the default value of the specified input key.\n\nFor example, set the default value of packageManager:\n\ncontext.setDefaultConfig({\n  packageManager: 'npm',\n});\n\n\nINFO\n\nAfter setting, the corresponding question will no longer be displayed, which is\nconsistent with the --config behavior specified by @modern-js/create. Does not\nsupport setting vertical and projectOrg.\n\nsetGitMessage#\n\nSets the initial git commit message. Modern.js defaults to the git\ninitialization commit message as feat: init, which can be modified by this\nfunction.\n\n\nLifecycle Functions#\n\nThe lifecycle functions are relatively complex and will be introduced separately\nin the following two sections, onForged and afterForged.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/context.md","_relativePath":"en/guides/topic-detail/generator/plugin/api/context.md"},{"id":247,"title":"Input","routePath":"/en/guides/topic-detail/generator/plugin/api/input","lang":"en","toc":[{"text":"type","id":"type","depth":2,"charIndex":498},{"text":"title","id":"title","depth":2,"charIndex":757},{"text":"default","id":"default","depth":2,"charIndex":815},{"text":"enum","id":"enum","depth":2,"charIndex":876},{"text":"x-validator","id":"x-validator","depth":2,"charIndex":1224},{"text":"x-reactions","id":"x-reactions","depth":2,"charIndex":2066},{"text":"properties","id":"properties","depth":2,"charIndex":2555}],"domain":"","content":"#\n\nGenerator plugin provides a way to interact with users through Input, which is\ndefined using JSON Schema:\n\nFor example:\n\nconst schema = {\n  type: 'object',\n  properties: {\n    language: {\n      type: 'string',\n      title: 'Please select the programming language:',\n      enum: [\n        { label: 'TS', value: 'ts' },\n        { label: 'ES6+', value: 'js' },\n      ],\n    },\n  },\n};\n\n\nJSON Schema format is based on the open source Formily Schema format. The\nfollowing are the supported fields:\n\n\ntype#\n\nDefines the type of the current schema. Currently supported types are string,\nnumber, and object. string type is used for string inputs and dropdown options.\nobject type is used for nesting schemas and needs to be used with the properties\nattribute.\n\n\ntitle#\n\nDefines the display name of the current schema.\n\n\ndefault#\n\nDefines the default value of the current schema.\n\n\nenum#\n\nDefines the options when the current schema is a dropdown selection.\n\nThe sub-items support string or { label: string; value: string} types. When the\nvalue and display value are the same in the dropdown options, string can be used\ndirectly to define the options.\n\nWhen representing multiple selection options, set the default field to [].\n\n\nx-validator#\n\nDefines the validation rules for the current schema. When the schema is an input\ntype, validation will be automatically performed after input completion.\n\nThe validation rules supported here are provided by Formily, for example, the\nmaximum value is 5:\n\nconst schema = {\n  type: 'object',\n  properties: {\n    max_5: {\n      type: 'number',\n      title: 'Maximum value (>5 will cause an error)',\n      'x-validator': {\n        maximum: 5,\n      },\n    },\n  },\n};\n\n\nIt also supports using validation functions directly:\n\nconst schema = {\n  type: 'object',\n  properties: {\n    path: {\n      type: 'string',\n      title: 'Can only contain numbers and letters',\n      'x-validator': value => {\n        if (!/^[0-9a-zA-Z]*$/g.test(value)) {\n          return 'Incorrect format';\n        }\n        return '';\n      },\n    },\n  },\n};\n\n\n\nx-reactions#\n\nUse linkage between schemas. This is exactly the same as Formily linkage rules.\n\nFor example:\n\nconst schema = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n      title: 'Name',\n    },\n    path: {\n      type: 'string',\n      title: 'Path',\n      'x-reactions': [\n        {\n          dependencies: ['name'],\n          fulfill: {\n            state: {\n              value: '{{$deps[0]}}',\n            },\n          },\n        },\n      ],\n    },\n  },\n};\n\n\n\nproperties#\n\nOrganize the structure of the current schema and define sub-forms. properties is\nan object, where the key is the schema keyword and the value is a schema object\nas described above.","frontmatter":{"sidebar_position":4},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/input.md","_relativePath":"en/guides/topic-detail/generator/plugin/api/input.md"},{"id":248,"title":"onForged","routePath":"/en/guides/topic-detail/generator/plugin/api/onForged","lang":"en","toc":[{"text":"Types","id":"types","depth":2,"charIndex":83},{"text":"Concepts","id":"concepts","depth":2,"charIndex":1169},{"text":"File Types","id":"file-types","depth":3,"charIndex":1181},{"text":"API","id":"api","depth":2,"charIndex":1715},{"text":"addFile","id":"addfile","depth":3,"charIndex":1788},{"text":"addManyFiles","id":"addmanyfiles","depth":3,"charIndex":2802},{"text":"updateJSONFile","id":"updatejsonfile","depth":3,"charIndex":4038},{"text":"updateTextRawFile","id":"updatetextrawfile","depth":3,"charIndex":4747},{"text":"updateModernConfig (not recommended)","id":"updatemodernconfig-(not-recommended)","depth":3,"charIndex":5425},{"text":"rmFile","id":"rmfile","depth":3,"charIndex":6081},{"text":"rmDir","id":"rmdir","depth":3,"charIndex":6233},{"text":"addHelper","id":"addhelper","depth":3,"charIndex":6387},{"text":"addPartial","id":"addpartial","depth":3,"charIndex":6578},{"text":"createElement","id":"createelement","depth":3,"charIndex":6753},{"text":"enableFunc","id":"enablefunc","depth":3,"charIndex":7057}],"domain":"","content":"#\n\nonForged is a lifecycle function used for file operations in generator plugin.\n\n\nTypes#\n\nexport type ForgedAPI = {\n  addFile: (params: AddFileParams) => Promise;\n  addManyFiles: (params: AddManyFilesParams) => Promise;\n  updateJSONFile: (fileName: string, updateInfo: Record) => Promise;\n  updateTextRawFile: (fileName: string, update: (content: string[]) => string[]) => Promise;\n  updateModernConfig: (updateInfo: Record) => Promise;\n  rmFile: (fileName: string) => Promise;\n  rmDir: (dirName: string) => Promise;\n  addHelper: (name: string, fn: Handlebars.HelperDelegate) => void;\n  addPartial: (name: string, str: Handlebars.Template) => void;\n  createElement: (element: ActionElement, params: Record) => Promise;\n  enableFunc: (func: ActionFunction, params?: Record | undefined) => Promise;\n};\n\nexport type PluginForgedFunc = (\n  api: ForgedAPI,\n  inputData: Record,\n) => void | Promise;\n\nexport interface IPluginContext {\n  onForged: (func: PluginForgedFunc) => void;\n  ...\n}\n\n\nThe onForged parameter is a callback function with api and input as parameters,\nwhich are used to provide the APIs and current input information provided by the\nlifecycle function.\n\n\nConcepts#\n\n\nFile Types#\n\nThe generator plugin classifies files into four categories:\n\n * Text files\n\nFiles with pure text content that can be processed using Handlebars or EJS\ntemplates.\n\n * Binary files\n\nFiles such as images, audio, and video.\n\n * JSON files\n\nFiles in JSON format.\n\n * Text list files\n\nFiles composed of lines of text, such as .gitignore, .editorconfig, and .npmrc.\n\nThe type definitions for the four types of files are:\n\nexport enum FileType {\n  Text = 'text',\n  Binary = 'binary',\n  Json = 'json',\n  TextRaw = 'textRaw',\n}\n\n\n\nAPI#\n\nThe APIs provided by the api parameter will be introduced below.\n\n\naddFile#\n\nAdds a single file.\n\nParameter types:\n\nexport interface AddFileParams {\n  type: FileType;\n  file: string;\n  template?: string;\n  templateFile?: string;\n  force?: boolean;\n  data?: Record;\n}\n\n\n * type: File type.\n * file: Target file path, relative to the target project directory.\n * template: Template content, the value of this field can be directly used to\n   render the file. Lower priority than templateFile.\n * templateFile: Template file path, relative to the templates directory.\n * force: Whether to force overwrite when the target file exists, default is\n   false.\n * data: Template rendering data.\n\nINFO\n\nText files are processed using Handlebars by default. If the template file ends\nwith .ejs, EJS will be used for template rendering.\n\nFor example, add the template file App.tsx.hanlebars to src/App.tsx:\n\ncontext.onForged(async (api: ForgedAPI, _input: Record) => {\n  await api.addFile({\n    type: FileType.Text,\n    file: `src/App.tsx`,\n    templateFile: `App.tsx.handlebars`,\n  });\n})\n\n\n\naddManyFiles#\n\nAdds multiple files, usually used to add multiple files to the same target\ndirectory.\n\nParameter types:\n\nexport interface AddManyFilesParams {\n  type: FileType;\n  destination: string;\n  templateFiles: string[] | (() => string[]);\n  templateBase?: string;\n  fileNameFunc?: (name: string) => string;\n  data?: Record;\n}\n\n\n * type: File type.\n * destination: Target folder, relative path to the target project directory.\n * templateFiles: Template file list, supporting regular expressions from\n   globby.\n * templateBase: Common path of template files. When using this parameter, the\n   target file will automatically delete this path.\n * fileNameFunc: Function to rename files. During the file addition process, the\n   file name will be passed to this function in turn, and the renaming can be\n   performed as needed.\n * data: Template rendering data.\n\nFor example, render all files in the src-ts directory of the template file to\nthe src directory:\n\ncontext.onForged(async (api: ForgedAPI, _input: Record) => {\n  await api.addManyFiles({\n    type: FileType.Text,\n    destination: 'src',\n    templateFiles: ['src-ts/**/*'],\n    templateBase: 'src-ts',\n    fileNameFunc: name => name.replace('.handlebars', ''),\n  });\n})\n\n\n\nupdateJSONFile#\n\nUpdate fields in a JSON file.\n\nParameter types:\n\nfileName: strings\nupdateInfo: Record\n\n\n * fileName: JSON file path, relative to the target project path.\n * updateInfo: Update information. Nested field updates need to be flattened,\n   otherwise the entire update will cause content loss.\n\nFor example, update the name field of package.json:\n\ncontext.onForged(async (api: ForgedAPI, _input: Record) => {\n  await api.updateJSONFile('package.json', { name: 'new_name' });\n})\n\n\nFor example, update the version of react-dom in dependencies:\n\ncontext.onForged(async (api: ForgedAPI, _input: Record) => {\n  await api.updateJSONFile('package.json', {\n    'dependencies.react-dom': '^18',\n  });\n})\n\n\n\nupdateTextRawFile#\n\nUpdate the contents of a text list file.\n\nParameter types:\n\nfileName: string\nupdate: (content: string[]) => string[]\n\n\n * fileName: Text list file path, relative to the target project path.\n * update: Update function. The parameter is an array divided by \\n of the\n   current file content, and the return value is also the modified array after\n   modification. @modern-js/create will automatically merge it with \\n and write\n   it to the source file.\n\nFor example, add the dist directory to the .gitinore file:\n\ncontext.onForged(async (api: ForgedAPI, _input: Record) => {\n  await api.updateTextRawFile('.gitinore', (content) => [...content, 'dist']);\n})\n\n\n\nupdateModernConfig (not recommended)#\n\nIn addition to configuring in modern.config.[tj]s, Modern.js configuration also\nsupports configuring modernConfig in package.json. This function is used to\nupdate this field.\n\nParameter types:\n\nupdateInfo: Record\n\n\n * updateInfo: Update content information. updateModernConfig is a package based\n   on updateJSONFile, which will automatically update under the edenxConfig\n   field. Only the configuration fields under modernConfig need to be filled in\n   updateInfo.\n\nFor example, enable SSR:\n\ncontext.onForged(async (api: ForgedAPI, _input: Record) => {\n  await api.updateModernConfig({ 'server.ssr': true });\n})\n\n\n\nrmFile#\n\nDelete files.\n\nParameter types:\n\nfileName: string\n\n\n * fileName: The path of the file to be deleted, relative to the target project\n   path.\n\n\nrmDir#\n\nDelete a folder.\n\nParameter types:\n\ndirName: string\n\n\n * dirName: The path of the folder to be deleted, relative to the target project\n   path.\n\n\naddHelper#\n\nAdd a custom helper rendered by handlebrs.\n\nParameter types:\n\nname: string\nfn: Handlebars.HelperDelegate\n\n\n * name: Helper function name.\n * fn: Helper function implementation.\n\n\naddPartial#\n\nAdd a Partial rendered by Handlebars.\n\nParameter types:\n\nname: string\nstr: Handlebars.Template\n\n\n * name: Partial name.\n * str: Template string of the Partial.\n\n\ncreateElement#\n\nAutomatically run the new command to create project elements.\n\nParameter types:\n\nelement: ActionElement\nparams: Record\n\n\n * element: Type of project element, new entry or new custom Web Server source\n   directory.\n * params: Other parameters corresponding to creating project elements.\n\n\nenableFunc#\n\nAutomatically run the new command to enable optional features.\n\nParameter types:\n\nfunc: ActionFunction\nparams?: Record\n\n\n * func: Name of the feature to enable.\n * params: Other parameters corresponding to enabling the feature.\n\nINFO\n\nRefer to Configuration Parameters for creating project elements and enabling\nfeature configurations.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/api/onForged.md","_relativePath":"en/guides/topic-detail/generator/plugin/api/onForged.md"},{"id":249,"title":"Creating Initial Project","routePath":"/en/guides/topic-detail/generator/plugin/category","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":-1},{"text":"Identifier","id":"identifier","depth":2,"charIndex":335},{"text":"Extension","id":"extension","depth":3,"charIndex":431},{"text":"Custom","id":"custom","depth":3,"charIndex":494},{"text":"Extension","id":"extension-1","depth":3,"charIndex":926},{"text":"自定义","id":"自定义","depth":3,"charIndex":1392},{"text":"Execution Order","id":"execution-order","depth":2,"charIndex":1954},{"text":"Extension","id":"extension-2","depth":3,"charIndex":2135},{"text":"Custom","id":"custom-1","depth":3,"charIndex":2809}],"domain":"","content":"Introduction#\n\nThere are two types of generator plugin:\n\n * Extension: Web App(Npm Module) = Web App(Npm Module) + Generator Plugin\n\n * Custom: New Application(Npm Module) = Web App(Npm Module) + Generator Plugin\n\nIn simpler terms, extension means using the original project name of Modern.js,\nwhile custom means creating a new name.\n\n\nIdentifier#\n\nThe type of generator plugin is provided through the meta field in package.json:\n\n\nExtension#\n\n{\n \"meta\": {\n    \"extend\": \"mwa\" // module\n }\n}\n\n\n\nCustom#\n\n{\n \"meta\": {\n    \"key\": \"new_app\",\n    \"name\": \"new App\",\n    \"type\": \"mwa\" // module and custom\n }\n}\n\n\nINFO\n\nFor custom type, the type field supports the custom value, which utilizes some\nbest practice templates for project development provided by Modern.js, such as\n.gitignore, .editorConfig, etc. Other business-related code templates need to be\nmanually provided through generator plugin.\n\n\nCreating Initial Project#\n\n\nExtension#\n\nnpx @modern-js/create@latest plugin --plugin @modern-js/generator-plugin-plugin\n? Please select the type of project you want to create: Npm Module\n? Please select the project scenario: Generator Plugin\n? Please fill in the package name of the generator plugin: plugin\n? Please select the programming language: TS\n? Please select the package manager: pnpm\n? Please select the type of plugin: extend\n? Please select the base type of the plugin: Web App\n\n\n\n自定义#\n\nnpx @modern-js/create@latest plugin --plugin @modern-js/generator-plugin-plugin\n? Please select the type of project you want to create: Npm Module\n? Please select the project scenario: Generator Plugin\n? Please fill in the package name of the generator plugin: plugin\n? Please select the programming language: TS\n? Please select the package manager: pnpm\n? Please select the type of plugin: custom\n? Please fill in the plugin keyword: new_app\n? Please fill in the display name of the plugin: new App\n? Please select the base type of the plugin: Web App\n\n\n\nExecution Order#\n\nGenerator plugins support using multiple plugins at the same time, which means\nthat multiple --plugin parameters are supported when executing\n@modern-js/create.\n\n\nExtension#\n\nFor extension generator plugins, when executing with the declared generator\nplugin parameters, the corresponding lifecycle functions of the project scheme\nthat is extended will be executed in order.\n\nFor example, if there are two generator plugins A and B, both of which extend\nthe Modern.js application scheme. A plugin declares to add the a.ts file, and B\nplugin declares to add the b.ts file. When executing npx\n@modern-js/create@latest --plugin A --plugin B, and selecting the Web APP\nscheme, the default project files of the Web APP will be generated first. Then,\nthe A plugin will create the a.ts file, and then the B plugin will generate the\nb.ts file.\n\n\nCustom#\n\nFor custom generator plugins, only one plugin can be executed at a time. When\ndeclaring the --plugin parameter for @modern-js/create, a selection option for\nthe scenario of choosing the project scheme will be added after selecting the\nproject scheme, which is the new name defined in the package.json. Choosing the\ncorresponding generator plugin for the name will execute the corresponding\ngenerator plugin logic after the default project scheme is completed. When\ndeclaring the --plugin parameter, the corresponding generator plugin names will\nbe listed one by one for selection in the project scheme scenario.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/category.md","_relativePath":"en/guides/topic-detail/generator/plugin/category.md"},{"id":250,"title":"Context","routePath":"/en/guides/topic-detail/generator/plugin/context","lang":"en","toc":[{"text":"Customize Input","id":"customize-input","depth":2,"charIndex":559},{"text":"Lifecycle","id":"lifecycle","depth":2,"charIndex":1018},{"text":"onForged","id":"onforged","depth":2,"charIndex":1248},{"text":"afterForged","id":"afterforged","depth":2,"charIndex":2603}],"domain":"","content":"#\n\nBy default, generator plugins will export a function that takes context as a\nparameter. During execution, context will be automatically injected into the\ngenerator plugin.\n\n\n\nexport default function (context: IPluginContext) {\n  context.onForged(async (_api: ForgedAPI, _input: Record) => {\n    /**\n     * Todo\n     */\n  });\n}\n\n\ncontext provides two types of APIs, which are used to customize input and define\ngenerator plugin lifecycle logic.\n\nINFO\n\nOnly some APIs are briefly explained below. For the complete API, please refer\nto Generator Plugin API.\n\n\nCustomize Input#\n\nBoth Modern.js Web App and Npm Module schemes have default input interactions.\nThese APIs can be used to add, modify, hide, and provide default values for\nthese inputs.\n\nFor example:\n\n * Add question\n\ncontext.addInputBefore('packageManager', {\n  type: 'object',\n  properties: {\n    'username': {\n      type: 'string',\n      title: '用户名',\n    },\n  },\n});\n\n\n * Hide question by setting config\n\ncontext.setDefaultConfig({ langauge: 'ts' });\n\n\n\nLifecycle#\n\nGenerator plugin provide two lifecycle hooks to define generator plugin\nbehavior:\n\n * onForged: Lifecycle after file operations are completed.\n\n * afterForged: Lifecycle after the onForged hook function is executed.\n\n\nonForged#\n\nHook function after the Modern.js project scheme generator has completed file\noperations. It is used to complete file operations in the generator plugin, such\nas adding template files, overwriting existing files, deleting existing files,\netc.\n\nWhen multiple generator plugins are executed simultaneously for extension type,\nthe onForged operations of the corresponding generator plugins will be executed\nin order according to the declared order.\n\nThe onForged function takes a callback function as a parameter, with api and\ninput as arguments.\n\ncontext.onForged(async (api: ForgedAPI, input: Record) => {\n  const { language } = input;\n  api.addFile({\n      type: FileType.Text,\n      file: `src/index.${language as string}`,\n      templateFile: `index.${language as string}.handlebars`,\n      force: true,\n  });\n})\n\n\nThe api object provides file operation-related methods supported by generator\nplugin.\n\ninput is the current user input, which includes the --config parameter\ndefinition, the default scheme interaction, and the user input defined by the\ngenerator plugin.\n\nWhen adding a new file template, define the template file in the templates\ndirectory, and then operate on it through the api method above. The generator\nplugin defaults to operating on files in the templates directory, so there is no\nneed to declare the templates path.\n\n\nafterForged#\n\nExecuted after the onForged hook function is completed. It is mainly used to\ninstall dependencies, perform git operations, etc.\n\nBy default, Modern.js project scheme will install dependencies and initialize\nGit after completing file operations, and perform git initial submissions, etc.\nThis hook function can be omitted.\n\nFor custom generator plugins that also support the custom type, which only\nprovides a small number of best practice project configurations, installation of\ndependencies and Git initialization operations need to be completed in this hook\nfunction.\n\nThe afterForged function also takes a callback function as a parameter, with api\nand input as arguments.\n\n  context.afterForged(\n    async (api: AfterForgedAPI, input: Record) => {\n      const { packageManager } = input;\n      console.info('packageManager:', packageManager);\n      await api.install();\n    },\n  );\n","frontmatter":{"sidebar_position":4},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/context.md","_relativePath":"en/guides/topic-detail/generator/plugin/context.md"},{"id":251,"title":"Introduction and Project Creation","routePath":"/en/guides/topic-detail/generator/plugin/structure","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":3},{"text":"Create Project","id":"create-project","depth":2,"charIndex":1170},{"text":"package.json","id":"packagejson","depth":2,"charIndex":2215},{"text":"src/index.ts","id":"src/indexts","depth":2,"charIndex":2557},{"text":"templates","id":"templates","depth":2,"charIndex":3101}],"domain":"","content":"#\n\n\nIntroduction#\n\nModern.js provides engineering solutions such as Web App and Npm Module. By\nusing the @modern-js/create tool, you can create initial project templates for\nengineering solutions. The initial project template provides a basic code\ndevelopment environment, simple example code, and configuration, etc.\n\nThe initial templates provided by Modern.js are generic and can meet some common\nproject development needs.\n\nWhen you use Modern.js deeply, you will inevitably find that each created\nproject will make some specific similar changes for its own project, such as\nmodifying example code, adding some configurations, enabling certain features,\netc.\n\nGenerator plugin can help you to deposit these specific changes for individuals\nor teams. When running npx @modern-js/create@latest, you only need to simply add\nthe --plugin parameter to avoid repetitive modification of the project after\neach project creation.\n\nGenerator plugin is based on the initial template projects provided by\nModern.js, providing methods to add, delete, and modify templates, and modifying\npackage.json, modernConfig configurations, and enabling features through a\nconvenient way.\n\n\nCreate Project#\n\nUse @modern-js/create to create a generator plugin project directly:\n\nnpx @modern-js/create@latest plugin --plugin @modern-js/generator-plugin-plugin\n? Please select the type of project you want to create: Npm Module\n? Please select the project scenario: Generator Plugin\n? Please fill in the package name of the generator plugin: plugin\n? Please select the programming language: TS\n? Please select the package manager: pnpm\n? Please select the type of plugin: extend\n? Please select the base type of the plugin: Web App\n\n\nAfter creating, we can take a look at the directory structure of this project:\n\n.\n├── .changeset\n│   └── config.json\n├── .eslintrc.js\n├── .gitignore\n├── .npmrc\n├── .nvmrc\n├── .prettierrc\n├── README.md\n├── modern.config.ts\n├── package.json\n├── src\n│   ├── modern-app-env.d.ts\n│   └── index.ts\n├── templates\n│   └── .gitkeep\n└── tsconfig.json\n\n\nThe project is based on the Npm module project, and the core files are as\nfollows:\n\n*\n├── package.json\n├── src\n│   └── index.ts\n├── templates\n│   └── .gitkeep\n\n\n\npackage.json#\n\nIn addition to the normal fields of a module project, package.json provides a\nmeta field to describe information about the generator plugin.\n\nGenerator plugin is divided into two categories: extension and custom. For\nspecific classification definitions, please refer to Type.\n\n{\n  ...,\n  \"meta\": {\n    \"extend\": \"mwa\"\n  }\n}\n\n\n\nsrc/index.ts#\n\nThis file is used to complete the content development of the generator plugin.\n\n\n\nexport default function (context: IPluginContext) {\n  context.onForged(async (_api: ForgedAPI, _input: Record) => {\n    /**\n     * todo\n     */\n  });\n}\n\n\nThis file exports a function by default, and the function takes context as a\nparameter. The context object provides API methods supported by the generator\nplugin, which can be used to implement the logic of the generator plugin. The\ncapabilities provided by context can be found in context.\n\n\ntemplates#\n\nThe templates directory contains template files for the current customization\nmethod, supporting Handlebars and EJS formats. Different rendering engines will\nbe used for rendering according to the template file suffix. If there is no\nsuffix, the template file will be copied directly to the target directory.\n\nIf the template file is a js, ts, or json file, it is recommended to use the\n.handlebars or .ejs suffix directly to avoid project eslint errors and\nrecognition issues in Monorepo projects.\n\nThe .gitignore and .npmrc files in the template will be automatically deleted\nwhen publishing the npm package, so it is necessary to use the .handlebars or\n.ejs suffix to keep them.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/structure.md","_relativePath":"en/guides/topic-detail/generator/plugin/structure.md"},{"id":252,"title":"Usage","routePath":"/en/guides/topic-detail/generator/plugin/use","lang":"en","toc":[{"text":"Absolute path","id":"absolute-path","depth":2,"charIndex":125},{"text":"Relative path","id":"relative-path","depth":2,"charIndex":386},{"text":"NPM package","id":"npm-package","depth":2,"charIndex":717}],"domain":"","content":"#\n\n@modern-js/create provides the --plugin parameter to run the generator plugin\nproject.\n\n--plugin supports three formats:\n\n\nAbsolute path#\n\nSuitable for local development and debugging. After development is completed,\nbuild the project by running npm run build in the generator plugin project, and\nthen use the following command for testing:\n\nnpx @modern-js/create@latest --plugin \n\n\n\nRelative path#\n\nSuitable for local development and debugging or when the generator plugin\nproject and the target project to be created are in the same Monorepo and there\nis no need to publish an NPM package. After building the generator plugin\nproject, use the following command:\n\nnpx @modern-js/create@latest --plugin file:../\n\n\n\nNPM package#\n\nSuitable for scenarios where the generator project is published on npm for\nsharing.\n\nnpx @modern-js/create@latest --plugin \n","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/generator/plugin/use.md","_relativePath":"en/guides/topic-detail/generator/plugin/use.md"},{"id":253,"title":"Introduction","routePath":"/en/guides/topic-detail/micro-frontend/c01-introduction","lang":"en","toc":[{"text":"Keyword","id":"keyword","depth":2,"charIndex":591},{"text":"Features","id":"features","depth":2,"charIndex":938}],"domain":"","content":"#\n\nMicro frontend is an architecture similar to microservices. It is an\narchitectural style composed of multiple front-end applications delivered\nindependently. It decomposes the front-end application into some smaller and\nsimpler applications that can be independently developed, tested and deployed.,\nwhile still a cohesive single product in the eyes of users.\n\nIt mainly solves two problems:\n\n * As the iterative application of the project becomes larger and more difficult\n   to maintain.\n * Collaborative development of projects across teams or departments leads to\n   inefficiencies.\n\n\nKeyword#\n\nIn the micro frontend, applications are divided into main application, and\nsub-applications.\n\n * Main application: The base project of the micro frontend project, all\n   sub-applications will be loaded by it.\n * Sub-application: An application developed and deployed independently will\n   eventually be loaded by the main application.\n\n\nFeatures#\n\n * Base on Garfish\n * Generator supports\n * Support React component-based reference micro-front-end sub-application\n * Support loading\n * Support main application online and sub-application offline debugging mode\n\nYou can learn how to develop a micro frontend master app in the section\nExperience micro frontend.","frontmatter":{"sidebar_position":1,"title":"Introduction"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/micro-frontend/c01-introduction.mdx","_relativePath":"en/guides/topic-detail/micro-frontend/c01-introduction.mdx"},{"id":254,"title":"development","routePath":"/en/guides/topic-detail/micro-frontend/c02-development","lang":"en","toc":[{"text":"Create an app","id":"create-an-app","depth":2,"charIndex":189},{"text":"File-based Routing Main App","id":"file-based-routing-main-app","depth":3,"charIndex":619},{"text":"Load file-base routing sub-app","id":"load-file-base-routing-sub-app","depth":4,"charIndex":1966},{"text":"Load self-controlled routing sub-app","id":"load-self-controlled-routing-sub-app","depth":4,"charIndex":2116},{"text":"route link","id":"route-link","depth":4,"charIndex":2281},{"text":"Self-Controlled Main App","id":"self-controlled-main-app","depth":3,"charIndex":2668},{"text":"Load sub-app","id":"load-sub-app","depth":4,"charIndex":3371},{"text":"File-based sub-app","id":"file-based-sub-app","depth":3,"charIndex":3927},{"text":"Self-controlled sub-app","id":"self-controlled-sub-app","depth":3,"charIndex":4718},{"text":"Debug","id":"debug","depth":2,"charIndex":5828},{"text":"FAQ","id":"faq","depth":2,"charIndex":6317}],"domain":"","content":"#\n\nThrough this chapter you can learn:\n\n * How to create the main application and sub-application of the micro frontend\n   project.\n * Basic process of micro frontend project development.\n\n\nCreate an app#\n\nCurrently supports two routing modes\n\n * Self-controlled routing\n * Conventional routing\n\nFirst, clarify the routing mode of the main application create a conventional\nrouting main application or create a self-controlled routing main application\n\nIn this experience we will create two sub-applications Table and Dashboard for\nthe main application (Table is reduced routing, Dashboard is self-controlled\nrouting)\n\n\nFile-based Routing Main App#\n\nInitialize the project with a command line:\n\nmkdir masterApp && cd masterApp\nnpx @modern-js/create@latest\n\n\nAfter the project is created, we can enable the micro frontend through pnpm run\nnew:\n\n? Please select the operation you want: Enable features\n? Please select the feature name: Enable Micro Front-end Feature\n\n\nNext, let's register the micro frontend plugin and add the main micro frontend\napp and add the list of sub-apps:\n\n\n\n\nexport default defineConfig({\n  runtime: {\n    router: true,\n    masterApp: {\n      apps: [{\n        name: 'Table',\n        entry: 'http://localhost:8081',\n        // activeWhen: '/table'\n      }, {\n        name: 'Dashboard',\n        entry: 'http://localhost:8082'\n        // activeWhen: '/dashboard'\n      }]\n    },\n  },\n  plugins: [appTools(), garfishPlugin()],\n});\n\n\n\nThen we create two new directories in the routes folder\n\n * table (for loading conventional routing sub-applications)\n * dashboard (for loading self-controlled routing sub-applications)\n\nIn these two directories, we need to create a $.tsx file as the entry of the\nmain application convention route ($represents fuzzy match, that is, /table and\n/table/test will match this $.tsx as the entry file of the route, which will\nensure that the sub-application route is loaded correctly in the micro frontend\nscenario)\n\nLoad file-base routing sub-app#\n\n\n\nconst Index = () => {\n  const { Table } = useModuleApps();\n\n  return (\n    \n\n      \n  )\n}\n\nexport default Index;\n\n\nLoad self-controlled routing sub-app#\n\n\n\nconst Index = () => {\n  const { Dashboard } = useModuleApps();\n\n  return (\n    \n\n      \n    \n  )\n}\n\nexport default Index;\n\n\nroute link#\n\nAt this time, the main application configuration has been completed, and the\nsub-application can be loaded through the route, and the layout.tsx of the main\napplication can be modified to jump to the route:\n\n\n\nconst Layout = () => (\n  \n\n    \nLoad file-base routing sub-app\n    \nLoad self-controlled routing sub-app\n    \nunmount sub-app\n    \n  \n);\n\nexport default Layout;\n\n\n\nSelf-Controlled Main App#\n\nInitialize the project with a command line:\n\nmkdir masterApp && cd masterApp\nnpx @modern-js/create@latest\n\n\nAfter the project is created, we can enable the micro frontend function through\npnpm run new:\n\n? Please select the operation you want: Enable features\n? Please select the feature name: Enable Micro Front-end Feature\n\n\nNext, let's register the micro frontend plugin and add the main micro frontend\napp and add the list of sub-apps:\n\nSince it is a self-controlled route, we delete the routes/ folder and add the\nApp.tsx file in the src/ directory. If you use a non-MApp component here, you\nneed to use the createBrowserRouter API of '=React Router v6 to create routes.\n\nLoad sub-app#\n\n\n\n\n\nconst AppLayout = () => (\n  <>\n    \n加载约定式路由子应用\n    \n加载自控式路由子应用\n    \n卸载子应用\n    \n  </>\n)\n\nexport default () => {\n  const { apps, MApp, Table, Dashboard } = useModuleApps();\n\n  // 使用的不是 MApp 组件，需要使用 createBrowserRouter 来创建路由\n  const router = createBrowserRouter(\n    createRoutesFromElements(\n      }>\n        } />\n        } />\n      \n    )\n  );\n\n  return (\n    // 方法一：使用 MApp 自动根据配置的 activeWhen 参数加载子应用(本项目配置在 modern.config.ts 中)\n    // \n    //   \n    // \n\n    // 方法二：手动写 Route 组件方式加载子应用，方便于需要鉴权等需要前置操作的场景\n    <>\n      \n    </>\n  );\n};\n\n\n\nFile-based sub-app#\n\nInitialize the project with a command line:\n\nmkdir table && cd table\nnpx @modern-js/create@latest\n\n\nAfter create sub-app. We execute pnpm run new to enable the micro frontend\nfunction:\n\n? Please select the operation you want: Enable features\n? Please select the feature name: Enable Micro Front-end Feature\n\n\nNext, let's register the micro frontend plugin and modify modern.config.ts to\nadd the configuration of the micro frontend sub-app deploy.microFrontend:\n\n\n\n\nexport default defineConfig({\n  dev: {\n    port: 8081\n  },\n  runtime: {\n    router: true,\n    state: true,\n  },\n  deploy: {\n    microFrontend: true,\n  },\n  plugins: [appTools(), garfishPlugin()],\n});\n\n\nadd src/routes/page.tsx:\n\nconst Index = () => {\n  return (\n    \nsubApp\n  )\n}\n\nexport default Index;\n\n\n\nSelf-controlled sub-app#\n\nInitialize the project with a command line:\n\nmkdir table && cd table\nnpx @modern-js/create@latest\n\n\nAfter create sub-app. We execute pnpm run new to enable the micro frontend\nfunction:\n\n? Please select the operation you want: Enable features\n? Please select the feature name: Enable Micro Front-end Feature\n\n\nNext, let's register the micro frontend plugin and modify modern.config.ts to\nadd the configuration of the micro frontend sub-app deploy.microFrontend:\n\n\n\n\nexport default defineConfig({\n  dev: {\n    port: 8082\n  },\n  runtime: {\n    router: true,\n    state: true,\n  },\n  deploy: {\n    microFrontend: true,\n  },\n  plugins: [appTools(), garfishPlugin()],\n});\n\n\nSelf-controlled routing needs to delete the routes/ folder and create a new\nApp.tsx in the src/ directory.\n\nAnd add code in src/App.tsx, note that you need to parse from props and pass\nbasename to BrowserRouter.\n\n\n\nexport default (props: {basename: string}) => {\n  const { basename } = props;\n\n  return (\n    \n      \n        Self-controlled route root} />\n        Self-controlled sub route} />\n      \n    \n  );\n};\n\n\n\nDebug#\n\nStart the application by executing the pnpm run dev command in the directory in\nsequence:\n\n * masterApp http://localhost:8080\n * table subapplication (conventional routing) http://localhost:8081\n * dashboard subapplication (self-controlled routing) http://localhost:8082\n\nAccess the main application address http://localhost:8080\n\nAfter completing the experience of the overall development process of micro\nfrontend, you can learn more about how to develop the main application.\n\n\nFAQ#\n\nGarfish issue: https://www.garfishjs.org/issues/","frontmatter":{"sidebar_position":2,"title":"development"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/micro-frontend/c02-development.mdx","_relativePath":"en/guides/topic-detail/micro-frontend/c02-development.mdx"},{"id":255,"title":"Develop Main App","routePath":"/en/guides/topic-detail/micro-frontend/c03-main-app","lang":"en","toc":[{"text":"Register Sub-app","id":"register-sub-app","depth":2,"charIndex":932},{"text":"Register sub-app info directly","id":"register-sub-app-info-directly","depth":3,"charIndex":1206},{"text":"Custom remote app list","id":"custom-remote-app-list","depth":3,"charIndex":1825},{"text":"Renderer sub-app","id":"renderer-sub-app","depth":2,"charIndex":2360},{"text":"Sub-app component","id":"sub-app-component","depth":3,"charIndex":2786},{"text":"Centralized routing","id":"centralized-routing","depth":3,"charIndex":4582},{"text":"Mix Mode","id":"mix-mode","depth":3,"charIndex":5138},{"text":"Loading","id":"loading","depth":3,"charIndex":5477},{"text":"Add Error Status","id":"add-error-status","depth":4,"charIndex":5908},{"text":"Avoid Loading Flash Back","id":"avoid-loading-flash-back","depth":4,"charIndex":6219},{"text":"Add Timeout State","id":"add-timeout-state","depth":4,"charIndex":7150}],"domain":"","content":"#\n\nIn the previous Experience micro frontend, an example was used to demonstrate\nhow to create and configure micro frontend sub-applications. Through this\nchapter, you can further understand how to develop the main application, and its\ncommon configuration.\n\nAfter creating an application project through the @modern-js/create command, you\ncan execute pnpm run new in the project (the modern new command is actually\nexecuted). After selecting the 「micro frontend」 mode, the micro frontend will be\ninstalled. Dependencies, just register the plugin manually.\n\n\n\n\nexport default defineConfig({\n  runtime: {\n    router: true,\n    masterApp: {\n      apps: [{\n        name: 'Table',\n        entry: 'http://localhost:8081',\n        // activeWhen: '/table'\n      }, {\n        name: 'Dashboard',\n        entry: 'http://localhost:8082'\n        // activeWhen: '/dashboard'\n      }]\n    },\n  },\n  plugins: [appTools(), garfishPlugin()],\n});\n\n\n\n\nRegister Sub-app#\n\nWhen the information is provided on the masterApp configuration, the application\nwill be considered the main application. At present, there are two configuration\nmethods for sub-app information, and these two methods are applied to different\nscenarios.\n\n\nRegister sub-app info directly#\n\nYou can register the sub-application information directly through the\nconfiguration:\n\nTIP\n\nIt can be configured at runtime via the API defineConfig.\n\nWhen the parameter is a function, it cannot be serialized to the product code,\nso please configure it through defineConfig when it comes to configuration such\nas functions\n\n\n\ndefineConfig(App, {\n  masterApp: {\n    apps: [{\n      name: 'Table',\n      entry: 'http://localhost:8001',\n      // activeWhen: '/table'\n    }, {\n      name: 'Dashboard',\n      entry: 'http://localhost:8002'\n      // activeWhen: '/dashboard'\n    }]\n  },\n});\n\n\n\nCustom remote app list#\n\nThis function allows you to pull a list of remote child applications and\nregister them with the runtime framework:\n\ndefineConfig(App, {\n  masterApp: {\n    manifest: {\n      getAppList: async () => {\n        // get from remote api\n        return [{\n          name: 'Table',\n          entry: 'http://localhost:8001',\n          // activeWhen: '/table'\n        }, {\n          name: 'Dashboard',\n          entry: 'http://localhost:8002'\n          // activeWhen: '/dashboard'\n        }];\n      },\n    },\n  },\n});\n\n\n\nRenderer sub-app#\n\nThere are two ways to load sub-app in micro frontend:\n\n 1. **Sub-app component ** Get the components of each sub-app, and then you can\n    render the sub-app of micro frontend just like using ordinary'React\n    'components.\n 2. Centralized routing Through centralized routing configuration, the\n    corresponding sub-app of rendering is automatically activated according to\n    the current page pathname.\n\n\nSub-app component#\n\nDevelopers can use the useModuleApps method to obtain the components of each\nchild application.\n\nThrough the combined use of the router component, developers can autonomously\nrender different sub-applications according to different routes.\n\nSuppose our subapp list is configured as follows:\n\nApp.tsx as follow:\n\n\n\n\n\nconst AppLayout = () => (\n  <>\n    \nload file-based sub-app\n    \nload self-controlled sub-app\n    \nunmount sub-app\n    \n  </>\n)\n\nexport default () => {\n  const { apps, MApp } = useModuleApps();\n\n  // Instead of using the MApp component, you need to use createBrowserRouter to create the route\n  const router = createBrowserRouter(\n    createRoutesFromElements(\n      }>\n        {apps.map(app => {\n          const { Component } = app;\n          // Fuzzy match, path needs to be written in a pattern similar to abc/*\n          return (\n             {\n                    if (error) {\n                      return \nerror: {error?.message};\n                    } else if (pastDelay) {\n                      return \nloading;\n                    } else {\n                      return null;\n                    }\n                  },\n                }}\n              />\n              }\n            />\n          )\n        })}\n      \n    )\n  );\n\n  return (\n    // Use MApp to automatically load sub-applications according to the configured activeWhen parameters (this project is configured in modern.config.ts)\n    // \n    //   \n    // \n\n    // Manually write the Route component to load the sub-application, which is convenient for scenarios that require pre-operation such as authentication\n    <>\n      \n    </>\n  );\n};\n\n\nHere, the activation route of Table is customized as /table through the Route\ncomponent, and the activation route of Dashboard is /dashboard.\n\n\nCentralized routing#\n\nCentralized Routing is a way to centrally configure active routes for subapps.\nWe enable Centralized Routing by adding an activeWhen field to the subapp list\ninformation.\n\nUse useModuleApp api in Main App, get MApp component and then render it\n\n\n\nfunction App() {\n  const { MApp } = useModuleApps();\n\n  return (\n    \n\n      \n    \n  );\n}\n\n\nAfter starting the application in this way, accessing the '/table' route will\nrender the'Table 'sub-application, and accessing the'/dashboard 'route will\nrender the'Dashboard' sub-application.\n\n\nMix Mode#\n\nOf course, sub-application components and centralized routing can be mixed.\n\n * One molecular application is activated as a sub-application component, and\n   the other part is activated as a centralized routing.\n * A molecular application can be activated either as a centralized routing or\n   as a sub-application component.\n\n\nLoading#\n\nBy configuring the loadable configuration, loading components can be added for\n「centralized routing」 and 「sub-applicati」, and errors, timeouts, flashes, etc.\ncan be considered, so as to provide users with a better user experience. The\ndesign and implementation of this function refer to react-loadable, and the\nbasic functions are similar.\n\nfunction Loading() {\n  return \nLoading...;\n}\n\nfunction App(){\n  return <>\n    \n\nAdd Error Status#\n\nWhen the micro-frontend sub-application fails to load or render, the loading\ncomponent will receive the error parameter (if there is no error, the error is\nnull).\n\nfunction Loading({ error }) {\n  if (error) {\n    return \nError msg {error?.message};\n  } else {\n    return \nLoading...;\n  }\n}\n\n\nAvoid Loading Flash Back#\n\nSometimes the display time of the loading component may be less than 200ms, and\nthe loading component will flash back at this time. Many user studies have\nproved that the loading flash back situation will cause the user to perceive\nthat the loading content takes longer than the actual time.\n\nWhen loading is less than 200ms, if the content is not displayed, the user will\nthink it is faster.\n\nTherefore, the loading component also provides the pastDelay parameter, which\nwill only be true when it exceeds the set delay display. You can set the delay\nduration through the delay parameter.\n\nfunction Loading({ error, pastDelay }) {\n  if (error) {\n    return \nError! {error?.message};\n  } else if (pastDelay) {\n    return \nLoading...;\n  } else {\n    return null;\n  }\n}\n\n\nThe default value of delay is 200ms, you can set the delay display time through\ndelay in loadable.\n\n\nfunction App(){\n  return <>\n    \n\nAdd Timeout State#\n\nSometimes because of the network, the micro-front-end sub-application fails to\nload, resulting in the loading state being displayed all the time, which is very\nbad for users, because they don't know the right response to get a specific\nresponse, whether they need to refresh the page, by Increasing the timeout state\ncan solve this problem well.\n\nThe loading component will get the timeOut parameter when timeout, when the\nmicro frontend application loads timeout, it will get the timeOut property value\nof true.\n\nfunction Loading({ error, timeOut, pastDelay }) {\n  if (error) {\n    return \nError! {error?.message};\n  } else if (timeOut) {\n    return \nLoading timed out, please refresh the page... ;\n  } else if (pastDelay) {\n    return \nLoading...;\n  } else {\n    return null;\n  }\n}\n\n\nThe timeout state is off and can be enabled by setting the timeout parameter in\nloadable:\n\n\nfunction App(){\n  return <>\n    ","frontmatter":{"sidebar_position":3,"title":"Develop Main App"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/micro-frontend/c03-main-app.mdx","_relativePath":"en/guides/topic-detail/micro-frontend/c03-main-app.mdx"},{"id":256,"title":"Communicate","routePath":"/en/guides/topic-detail/micro-frontend/c04-communicate","lang":"en","toc":[{"text":"Props","id":"props","depth":2,"charIndex":3},{"text":"channel","id":"channel","depth":2,"charIndex":602}],"domain":"","content":"#\n\n\nProps#\n\nIn Modern.js, the sub-application will be wrapped into a React component, and\nthe purpose of communicating between the main application and the\nsub-application can be achieved directly by passing'props' to the React\ncomponent.\n\nfunction App() {\n  const { MApp } = useModuleApps();\n\n  return (\n    \n\n      \n    \n  );\n}\n\n\nfunction App(props) {\n  console.log(props);\n  return ...\n}\n\n\nThe child application will print {count: 0}. Currently, child application\nrendering responsiveness is not supported. Changing the data of'count 'on the\nmain application in time will not trigger a view update\n\n\nchannel#\n\n[Garfish.channel] (https://www.garfishjs.org/api/channel) Used for communication\nbetween applications. It is an instance of EventEmitter2.\n\n// sub app listen login event\nconst App = () => {\n  const handleLogin = userInfo => {\n    console.log(`${userInfo.name} has login`);\n  };\n\n  useEffect(() => {\n    window?.Garfish.channel.on('login', handleLogin);\n    return () => {\n      window?.Garfish.channel.removeListener('login', handleLogin);\n    };\n  });\n};\n\n// main app emit login event\napi.getLoginInfo.then(res => {\n  if (res.code === 0) {\n    window.Garfish.channel.emit('login', res.data);\n  }\n});\n","frontmatter":{"sidebar_position":4,"title":"Communicate"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/micro-frontend/c04-communicate.mdx","_relativePath":"en/guides/topic-detail/micro-frontend/c04-communicate.mdx"},{"id":257,"title":"Mixed Stack","routePath":"/en/guides/topic-detail/micro-frontend/c05-mixed-stack","lang":"en","toc":[{"text":"Modern.js Sub App","id":"modernjs-sub-app","depth":2,"charIndex":423},{"text":"Modern.js Main App","id":"modernjs-main-app","depth":2,"charIndex":754}],"domain":"","content":"#\n\nThe Modern.js micro frontend scheme is based on the Garfish package and provides\nsome more out-of-the-box usage.\n\nWhen your main application and sub-application are not all Modern.js\napplications, you can refer to this document.\n\n 1. The sub-app is Modern.js, the native Garfish micro frontend used by the main\n    app.\n 2. The main application is Modern.js, and some sub-applications have other\n    technology stacks.\n\n\nModern.js Sub App#\n\nModern.js subapps compile to generate a standard Garfish subapp export. So you\ncan directly access the standard micro frontend main application.\n\nINFO\n\nThe child application is Modern.js, when the main application uses the native\nGarfish micro frontend, the child application debugging mode is not available.\n\n\nModern.js Main App#\n\nThe Main App is Modern.js, and other technology stacks used by sub-applications.\nSub-App can be developed according to Garfish Sub-Application Standard.","frontmatter":{"sidebar_position":5,"title":"Mixed Stack"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/micro-frontend/c05-mixed-stack.mdx","_relativePath":"en/guides/topic-detail/micro-frontend/c05-mixed-stack.mdx"},{"id":258,"title":"Automatically Actions","routePath":"/en/guides/topic-detail/model/auto-actions","lang":"en","toc":[{"text":"Primitive data types","id":"primitive-data-types","depth":2,"charIndex":374},{"text":"Array Types","id":"array-types","depth":2,"charIndex":720},{"text":"Simple Object Types","id":"simple-object-types","depth":2,"charIndex":1256}],"domain":"","content":"#\n\nIn the Quick Start, we implemented the simplest counter model, which still\nrequired 10 lines of code. In fact, Modern.js supports automatically generating\ncommonly used actions based on the declared state type, which reduces the amount\nof boilerplate code. The currently supported types are:\n\n * Primitive data types\n * Array types\n * Simple object types (Plain Object)\n\n\nPrimitive data types#\n\nconst countModel = model('count').define({ state: 1 });\n\n\nAs shown above, we only need one line to create a simple countModel. Here's an\nexample code that uses the model:\n\nfunction Counter() {\n  const [state, actions] = useModel(countModel);\n\n  useEffect(() => {\n    // 增加 1\n    actions.setState(state + 1);\n  }, []);\n}\n\n\n\nArray Types#\n\nWhen the state is an array type, an example code for automatically generating\nactions is shown below:\n\nconst countModel = model('count').define({ state: [] });\n\nfunction Counter() {\n  const [state, actions] = useModel(countModel);\n\n  useEffect(() => {\n    actions.push(1);\n    actions.pop();\n    actions.shift();\n    actions.unshift(1);\n    actions.concat([1]);\n    actions.splice(0, 1, 2);\n    actions.filter(value => value > 1);\n  }, []);\n}\n\n\nWe can use the methods of the JavaScript Array object to modify the state.\n\n\nSimple Object Types#\n\nWhen the state is a simple object type, an example code for automatically\ngenerating actions is shown below:\n\nconst countModel = model('count').define({\n  state: {\n    a: 1,\n    b: [],\n    c: {},\n  },\n});\n\nfunction Counter() {\n  const [state, actions] = useModel(countModel);\n\n  useEffect(() => {\n    actions.setA(2);\n    actions.setB([1]);\n    actions.setC({ a: 1 });\n  }, []);\n}\n\n\nThree different fields a, b, and c each generate setA, setB, and setC actions,\nrespectively.\n\nINFO\n\nWhen the user-defined action and the action automatically generated by Modern.js\nhave the same name, the user-defined action takes precedence. For example, if\nsetA action is already defined in countModel, calling actions.setA() executes\nthe user-defined setA.\n\nAdditional Information\n\nFor more information on related APIs, please refer to here.","frontmatter":{"sidebar_position":6,"title":"Automatically Actions"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/model/auto-actions.mdx","_relativePath":"en/guides/topic-detail/model/auto-actions.mdx"},{"id":259,"title":"Derived State","routePath":"/en/guides/topic-detail/model/computed-state","lang":"en","toc":[{"text":"Only Depend on the Model\\'s Own State","id":"only-depend-on-the-model\\'s-own-state","depth":2,"charIndex":-1},{"text":"Dependent State from Other Models","id":"dependent-state-from-other-models","depth":2,"charIndex":1914},{"text":"Derived State with Function Type","id":"derived-state-with-function-type","depth":2,"charIndex":2598}],"domain":"","content":"#\n\nIn some scenarios, components need to perform further calculations on the State\nin Model before they can be used in the components. This logic can be directly\nwritten in the component or implemented through derived states in Model. Derived\nstates are defined under the computed field in the Model. Depending on the\ndependencies of the Model and the return type, there are three ways to define\nderived states.\n\n\nOnly Depend on the Model's Own State#\n\nThe derived state only depends on the current Model's State, which is passed as\nthe first parameter to the derived state's definition function.\n\nFor example, the todo application has items and filter in its State, and filter\nis used to filter the todo items displayed on the current page. Therefore, we\ndefine a visibleTodos derived state that can be directly used in the component.\nThe sample code is as follows:\n\n/**\n *  Assuming the structure of the todo item is as follows:\n{\n    id: string;          // id\n    text: string;        // todo\n    completed: boolean;\n}\n**/\n\nconst todoModel = model('todo').define({\n  state: {\n    items: [],\n    filter: 'ALL', // ALL: show all；COMPLETED: show completed；ACTIVE: show active\n  },\n  computed: {\n    visibleTodos: state => {\n      switch (state.filter) {\n        case 'ALL':\n          return state.items;\n        case 'COMPLETED':\n          return todos.filter(t => t.completed);\n        case 'ACTIVE':\n          return todos.filter(t => !t.completed);\n        default:\n          return [];\n      }\n    },\n  },\n});\n\n\nDerived state will eventually be merged with the Model's State, so the derived\nstate can be accessed through the Model's State object. For example, the\nvisibleTodos can be used in the component as follows:\n\nfunction Todo() {\n  const [state, actions] = useModel(todoModel);\n\n  return (\n    \n\n      \n\n        {state.visibleTodos.map(item => (\n          \n{item.text}\n        ))}\n      \n    \n  );\n}\n\n\n\nDependent State from Other Models#\n\nIn addition to depending on the current model's state, derived states may also\ndepend on the state of other models. In this case, the definition format for the\nderived state is:\n\n[stateKey]: [...depModels, (selfState, ...depModels) => computedState]\n\n\nThe following example demonstrates how the derived state combinedValue of\nbarModel depends on the state of fooModel.\n\nconst fooModel = model('foo').define({\n  state: {\n    value: 'foo',\n  },\n});\n\nconst barModel = model('bar').define({\n  state: {\n    value: 'foo',\n  },\n  computed: {\n    combinedValue: [\n      fooModel,\n      (state, fooState) => state.value + fooState.value,\n    ],\n  },\n});\n\n\n\nDerived State with Function Type#\n\nDerived states can also return a function. In this case, the definition format\nfor the derived state is:\n\n[stateKey]: (state) => (...args) => computedState    // Only relies on its own state\n[stateKey]: [...depModels, (selfState, ...depModels) => (...args) => computedState]  // Relies on the state of other models\n\n\nAssuming the filter state is not stored in the state of the todo app, but is\ninstead used directly in the component, visibleTodos can be a function type\nvalue. This function receives the filter parameter when used in the component,\nas shown below:\n\nconst todoModel = model('todo').define({\n  state: {\n    items: [],\n  },\n  computed: {\n    visibleTodos: state => filter => {\n      switch (filter) {\n        case 'ALL':\n          return state.items;\n        case 'COMPLETED':\n          return todos.filter(t => t.completed);\n        case 'ACTIVE':\n          return todos.filter(t => !t.completed);\n        default:\n          return [];\n      }\n    },\n  },\n});\n\nfunction Todo(props) {\n  // use props pass filter\n  const { filter } = props;\n  const [state, actions] = useModel(todoModel);\n\n  // get final todos\n  const todos = state.visibleTodos(filter);\n\n  return (\n    \n\n      \n\n        {todos.map(item => (\n          \n{item.text}\n        ))}\n      \n    \n  );\n}\n\n\nAdditional Reference\n\nUsing Models","frontmatter":{"sidebar_position":4,"title":"Derived State"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/model/computed-state.mdx","_relativePath":"en/guides/topic-detail/model/computed-state.mdx"},{"id":260,"title":"Define Model","routePath":"/en/guides/topic-detail/model/define-model","lang":"en","toc":[],"domain":"","content":"#\n\nIn the previous section, we demonstrated how to create a Model for a simple\ncounter application. In this section, we will provide a detailed introduction on\nhow to create a Model.\n\nWe can create a Model using the model API. For example, model('foo') creates a\nModel named foo. We can define the State and Actions included in the Model by\ncalling the define function returned by model('foo'):\n\n\n\nconst fooModel = model('foo').define({\n  state: {\n    value: 'foo',\n  },\n  actions: {\n    setValue: (state, payload){\n      state.value = payload\n    }\n  }\n});\n\n\nINFO\n * Actions in the Model cannot contain side-effect logic, such as requesting\n   HTTP interfaces, accessing localStorage, etc.\n * setValue directly modifies the input State, which seems to violate the\n   definition of a pure function. However, Reduck uses immer internally to\n   modify immutable objects, ensuring that this approach does not affect the\n   immutability of the object, so setValue is still a pure function. Of course,\n   you can also return a new object directly in the Action, but this approach\n   will be more complex.\n\nThe define function only describes the original structure of the Model,\nincluding the internally defined State, Actions, and so on. The fooModel\nreturned by define is the actual Model object that is created. For example,\nalthough setValue has two parameters, when we call the setValue Action, we only\nneed to pass in the payload parameter, because we are calling the Action method\non fooModel, not the one described in the original structure of the Model. For\nmore information, please refer to Using Models.\n\nIn addition to object-type parameters, define can also receive function-type\nparameters. For example:\n\n\n\nconst fooModel = model('foo').define((context, utils) => {\n  return {\n    state: {\n      value: 'foo',\n    },\n    actions: {\n      setValue: (state, payload){\n        state.value = payload\n      }\n    }\n  }\n});\n\n\nWhen defining a Model using a function, the function automatically receives two\nparameters: context and utils. context is the context object of Reduck, which\ncan obtain the store object, and utils provides a set of utility functions to\nfacilitate the implementation of complex features such as Model communication.\n\nModels support duplication. For example:\n\nconst barModel = fooModel('bar');\n\n\nbarModel is a new Model object created based on fooModel. Analogous to the\nconcepts in object-oriented programming languages, barModel and fooModel are two\ninstance objects created based on the same class. When the state management\nlogic of two modules is the same, for example, two tab modules in the same page\nuse the same data structure and logic, but the difference is that they obtain\ndata from different interfaces, then you can create two different Model objects\nby duplicating the Model.\n\nAdditional Information\n\nFor detailed definitions of the APIs mentioned in this section, please refer to\nhere.","frontmatter":{"sidebar_position":2,"title":"Define Model"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/model/define-model.mdx","_relativePath":"en/guides/topic-detail/model/define-model.mdx"},{"id":261,"title":"FAQ","routePath":"/en/guides/topic-detail/model/faq","lang":"en","toc":[{"text":"Browser Compatibility","id":"browser-compatibility","depth":2,"charIndex":3},{"text":"Accessing the Main Application Model from a Microfrontend Sub-Application Model","id":"accessing-the-main-application-model-from-a-microfrontend-sub-application-model","depth":2,"charIndex":334}],"domain":"","content":"#\n\n\nBrowser Compatibility#\n\nThe compiled build artifacts of Reduck use ES6 syntax by default. If you need to\nsupport older versions of browsers, please include all packages under the\n@modern-js-reduck namespace in your application's build process.\n\nAdditional Information\n\nReduck uses @babel/preset-env with specific configurations.\n\n\nAccessing the Main Application Model from a Microfrontend Sub-Application Model#\n\nWhen a microfrontend sub-application model accesses the main application model\nand the model has not yet been mounted on the main application, it will be\nautomatically mounted on the sub-application.\n\nExample:\n\n\n\n\nfunction SubModelApp() {\n  const [state, actions] = useModel(parentModel);\n\n  return \n...;\n}\n\n\n\n\nTo avoid accidental downgrades, it is recommended to pre-mount the model that\nthe main application needs to share:\n\n// App is the entry component of the main application, and sharedModel1 and sharedModel2 are the models that need to be shared.\nApp.models = [sharedModel1, sharedModel2];\n","frontmatter":{"sidebar_position":13,"title":"FAQ"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/model/faq.mdx","_relativePath":"en/guides/topic-detail/model/faq.mdx"},{"id":262,"title":"Management Effect","routePath":"/en/guides/topic-detail/model/manage-effects","lang":"en","toc":[{"text":"Modifying State via Side Effects","id":"modifying-state-via-side-effects","depth":2,"charIndex":383},{"text":"Side effects do not affect state","id":"side-effects-do-not-affect-state","depth":2,"charIndex":5908}],"domain":"","content":"#\n\nThe actions in the model must be pure functions and cannot have any side effects\nduring execution. However, in real-world scenarios, we often encounter many side\neffects, such as: requesting data from an HTTP API to obtain state data, or\nmodifying localStorage or sending events while updating the state. In Reduck,\nside effects are managed through the model's effects function.\n\n\nModifying State via Side Effects#\n\nThe most common scenario in which side effects modify the state is requesting\ndata from an HTTP API to update state data.\n\nLet's take a simple todoModel as an example. It has a side effect function load\nthat requests the TODO list from a remote server. After the request succeeds, it\nupdates the state.items field.\n\nconst todoModel = model('todo').define({\n  state: {\n    items: [],\n    loading: false,\n    error: null,\n  },\n  actions: {\n    load: {\n      pending(state) {\n        state.loading = true;\n      },\n      fulfilled(state, items) {\n        state.items = items;\n        state.loading = false;\n      },\n      rejected(state, error) {\n        state.error = error;\n        state.loading = false;\n      },\n    },\n  },\n  effects: {\n    // Promise effects\n    async load() {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(['Learn Modern.js']), 2000);\n      });\n    },\n  },\n});\n\n\nThe side effect function is uniformly defined under the effects field. Here we\nhave written a load function that returns a Promise. After the Promise is\nsuccessfully executed, it returns the TODO list [\"Lerna Modern.js\"].\n\nSide effect functions need to work with actions to modify state. Therefore, we\ndefine a load object in actions (the name needs to be consistent with the name\nof the side effect function under effects), which includes three actions\n(pending, fulfilled, rejected) that handle the three states (pending, fulfilled,\nrejected) of the Promise returned by the side effect function load:\n\n * pending: Receives the current state state as a parameter and sets the loading\n   flag to true in the new state.\n * fulfilled: Receives the current state state and the Promise fulfilled value\n   items as parameters, and sets items to the parameter items and loading to\n   false in the new state.\n * rejected: Receives the current state state and the Promise rejected error\n   error as parameters, and sets error to the parameter error and loading to\n   false in the new state.\n\nHow do we call the effects function in the component? The effects function will\nbe merged into the actions object, so you can call the effects function through\nthe actions object, as shown below:\n\nfunction Todo() {\n  const [state, actions] = useModel(todoModel);\n\n  useEffect(() => {\n    // invoke effects function\n    actions.load();\n  }, []);\n\n  if (state.loading) {\n    return \nloading....;\n  }\n\n  return (\n    \n\n      \n\n        {state.items.map((item, index) => (\n          \n{item}\n        ))}\n      \n    \n  );\n}\n\n\nIn the example above, the three actions pending, fulfilled, and rejected are\ngenerally required for HTTP requests used to obtain data. Reduck provides a\nutility function handleEffect to simplify the creation of actions in this\nscenario.\n\nFor this type of side effect scenario, handleEffect stipulates that the state\nstructure of the model contains three fields: result, error, and pending, with\ninitial values of:\n\n{\n  result: null,\n  error: null,\n  pending: false,\n}\n\n\nCalling handleEffect will return the following data structure:\n\n{\n  pending() { // ... },\n  fulfilled() { // ... },\n  rejected() { // ... }\n}\n\n\nThis data structure is the same as the data structure of the load object under\nactions. The object returned by handleEffect actually corresponds to the three\nactions required by the Effects function.\n\nWe can use handleEffect to rewrite todoModel:\n\nconst todoModel = model('todo').define({\n  state: {\n    items: [],\n    loading: false,\n    error: null,\n  },\n  actions: {\n    load: handleEffect({ result: 'items' }),\n  },\n  effects: {\n    // Promise effects\n    async load() {\n      return new Promise(resolve => {\n        setTimeout(() => resolve(['Learn Modern.js']), 2000);\n      });\n    },\n  },\n});\n\n\nThe handleEffect function sets result to items in the received parameter object.\nBecause todoModel uses items as the key to save the TODO list data instead of\nusing the default result as the key of handleEffect, configuration is required\nhere.\n\nIt is obvious that the todoModel implemented through handleEffect is much more\nconcise than the previous implementation.\n\nIf you do not want all three states (pending, fulfilled, rejected) to be\nautomatically handled by handleEffect, for example, if the fulfilled state\nrequires more complex data processing and needs to be manually handled, but you\nstill want to automate the handling of the pending and rejected states, you can\nuse the following method:\n\n  actions: {\n    load: {\n      ...handleEffect(),\n      fulfilled(state, payload) {\n        // manual handle\n      },\n    },\n  },\n\n\nhandleEffect API.\n\nIn the Effects function, you can also manually call Actions. For example:\n\nconst todoModel = model('todo').define((context, utils) => ({\n  state: {\n    items: [],\n    loading: false,\n    error: null,\n  },\n  actions: {\n    pending(state) {\n      state.loading = true;\n    },\n    fulfilled(state, items) {\n      state.items = items;\n      state.loading = false;\n    },\n  },\n  effects: {\n    async load() {\n      // use utils.use get cuttent Model actions\n      const [, actions] = utils.use(todoModel);\n      // invoke action\n      actions.pending();\n\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const items = ['Learn Modern.js'];\n          // invoke action\n          actions.fulfilled(items);\n          resolve(items);\n        }, 2000);\n      });\n    },\n  },\n}));\n\n\nYou can use the use function to load other Models (including the Model itself)\nto achieve Model communication.\n\n\nSide effects do not affect state#\n\nIn some cases, we only need to read State and execute relevant side effect\nlogic, and the side effect will not modify State.\n\nFor example, store some State in localStorage:\n\nconst fooModel = model('foo').define((context, utils) => ({\n  state: {\n    value: 'foo',\n  },\n  effects: {\n    setLocalStorage(key) {\n      const [state] = utils.use(fooModel);\n      localStorage.set(key, state.value);\n      return 'success';\n    },\n  },\n}));\n\n\nor send message to server:\n\nconst fooModel = model('foo').define({\n  state: {\n    value: 'foo',\n  },\n  effects: {\n    async sendData(data) {\n      const res = await fetch('url', {\n        method: 'POST',\n        body: data,\n      });\n      return res.json();\n    },\n  },\n});\n\n\nSometimes, we want to execute subsequent logic directly based on the execution\nresult of the side effect function. In this case, we need to use the return\nvalue of the Effects function.\n\nFor example, when the send button is clicked and the data is successfully sent,\nclose the current popup immediately; if it fails, display an error message. We\ncan achieve this through the following code:\n\n// The code is for illustration only and cannot be executed.\n// Response function of the \"send\" button within the component.\nconst handleClick = async () => {\n  // sendData returns a string that represents the state.\n  const result = await actions.sendData('some data');\n  if (result === 'success') {\n    // Close the popup window.\n    closeModal();\n  } else {\n    // show error\n    showError(result);\n  }\n};\n\n\nINFO\n\nExample","frontmatter":{"sidebar_position":5,"title":"Management Effect"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/model/manage-effects.mdx","_relativePath":"en/guides/topic-detail/model/manage-effects.mdx"},{"id":263,"title":"Model Communication","routePath":"/en/guides/topic-detail/model/model-communicate","lang":"en","toc":[{"text":"Communication between Models","id":"communication-between-models","depth":2,"charIndex":150},{"text":"Communication within a Model","id":"communication-within-a-model","depth":2,"charIndex":4224}],"domain":"","content":"#\n\nModel communication refers to communication between different Models, as well as\ncommunication between Effects and Actions within the same Model.\n\n\nCommunication between Models#\n\nModels are not isolated from each other and can communicate with each other.\nThere are mainly two scenarios:\n\n 1. Accessing the State and Actions of other Models in the Model.\n 2. Listening to changes in other Models in the Model.\n\nHere, we will transform the simple counter application in the Quick Start\nsection into a counter application that allows you to set the step frequency. By\nsetting the step frequency, you can affect the magnitude of each counter\nincrease.\n\nWe abstract two Models, stepModel (step frequency) and counterModel (counter):\n\n\n\nconst stepModel = model('step').define({\n  state: 1,\n});\n\nconst counterModel = model('count').define((context, { use, onMount }) => {\n  const [, , subscribeStep] = use(stepModel);\n\n  onMount(() => {\n    return subscribeStep(() => {\n      console.log(\n        `Subscribe in counterModel: stepModel change to ${use(stepModel)[0]}`,\n      );\n    });\n  });\n\n  return {\n    state: {\n      value: 1,\n    },\n    actions: {\n      add(state) {\n        const step = use(stepModel)[0];\n        state.value += step;\n      },\n    },\n  };\n});\n\nexport { stepModel, counterModel };\n\n\nstepModel declares only one state, with an initial value of 1.\n\ncounterModel loads stepModel with the use function, and retrieves the returned\nsubscribeStep function to listen for changes to the stepModel state. onMount is\na hook function that is executed after the Model is mounted. counterModel begins\nto subscribe to the state changes of stepModel after it has been mounted, and\nprints out the latest value of stepModel.\n\ncounterModel accesses stepModel using the use function, and in the add function,\nthe current value of stepModel (step frequency) can be obtained to perform\nincrements using this value.\n\nNote\n\nWhen you need to access the state of another Model, you must call use during the\nactual execution phase of the current Actions or Effects function (in this\nexample, the add function) to ensure that the obtained State is the latest\nvalue. Therefore, although we also call use(stepModel) in the callback function\nof define, we do not destructure the state value of stepModel because the\ncallback function of define is executed during the mounting phase of the Model,\nand at this time, the state of stepModel obtained may be different from the\nvalue obtained when add is executed.\n\nModify App.tsx:\n\n\n\n\nfunction Counter() {\n  const [state, actions] = useModel(counterModel);\n  const [step, stepActions] = useModel(stepModel);\n\n  return (\n    \n\n      \nstep: {step}\n       stepActions.setState(step + 1)}>add step\n      \ncounter: {state.value}\n       actions.add()}>add counter\n    \n  );\n}\n\nexport default function App() {\n  return ;\n}\n\n\nAdditional Information\n\nModern.js has enabled auto-generate actions by default, so even though there are\nno Actions defined manually in the stepModel, the auto-generated setState can\nstill be used.\n\n * Click add step to add steps.\n * Click add counter to trigger the counter to increase.\n\nThe final effect is as follows:\n\n\n\nAdditional Information\n * Full example code for this section can be found here.\n * For more information about the relevant API, please refer to: model.\n\nIn the previous example of counterModel, we called use within the Actions\nfunction to get other Model objects. If we only need to call Actions of other\nModels, we can also use use to get the Actions of Models in the define callback\nfunction because Actions are functions and there is no issue of value\nexpiration. For example:\n\nconst barModel = model('bar').define({\n  // ..\n});\n\nconst fooModel = model('foo').define((context, utils) => {\n  // get barModel actions\n  const [, actions] = utils.use(barModel);\n  return {\n    // ...\n    effects: {\n      async loadA() {\n        // ...\n        // invoke barModel action\n        barModel.actionA();\n      },\n      async loadB() {\n        // ...\n        // invoke barModel action\n        barModel.actionB();\n      },\n    },\n  };\n});\n\n\nHere, we no longer need to repeatedly get the barModel object in loadA and\nloadB, which simplifies the code logic.\n\n\nCommunication within a Model#\n\nCommunication within a Model can also be divided into two main scenarios:\n\n 1. Effects functions call the Actions functions of the same Model or other\n    Effects functions.\n 2. Actions functions call other Actions functions of the same Model.\n\nIn the Managing Side Effects section, we demonstrated how Effects functions call\nActions functions.\n\nHere we provide another example:\n\nconst fooModel = model('foo').define((context, { use, onMount }) => ({\n  state: {\n    a: '',\n    b: '',\n  },\n  actions: {\n    setA(state, payload) {\n      state.a = payload;\n    },\n    setB(state, payload) {\n      state.a = payload;\n    },\n  },\n  effects: {\n    async loadA() {\n      // get current Model actions\n      const [, actions] = use(fooModel);\n      const res = await mockFetchA();\n      actions.setA(res);\n    },\n    async loadB() {\n      // get current Model actions\n      const [, actions] = use(fooModel);\n      const res = await mockFetchB();\n      actions.setB(res);\n    },\n  },\n}));\n\n\nIn this example, the two Effects functions of fooModel need to call their own\nActions functions. Here, we have called use once in each Effects function. Why\ncan't we use use to get the Actions of the Model itself in the define callback\nfunction, as in the example of Model communication? This is because when calling\nuse to get a Model, it first checks whether the Model has been mounted. If it\nhas not been mounted, the mounting logic will be executed first.\n\nThe define callback function is executed during the mounting phase, so calling\nuse to get the Model itself during the mounting phase will result in an infinite\nloop (which will throw an error in the actual execution process). Therefore, you\nmust not call use in the define callback function to get the Model itself.\n\nHowever, we can use the onMount hook function to get the Model itself through\nuse after the Model has been mounted:\n\nconst fooModel = model('foo').define((context, { use, onMount }) => {\n  let actions;\n\n  onMount(() => {\n    // after fooModel mounted, get actions\n    [, actions] = use(fooModel);\n  });\n\n  return {\n    state: {\n      a: '',\n      b: '',\n    },\n    actions: {\n      setA(state, payload) {\n        state.a = payload;\n      },\n      setB(state, payload) {\n        state.a = payload;\n      },\n    },\n    effects: {\n      async loadA() {\n        const res = await mockFetchA();\n        actions.setA(res);\n      },\n      async loadB() {\n        const res = await mockFetchB();\n        actions.setB(res);\n      },\n    },\n  };\n});\n\n\nIn this way, we can also simplify the code.","frontmatter":{"sidebar_position":7,"title":"Model Communication"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/model/model-communicate.mdx","_relativePath":"en/guides/topic-detail/model/model-communicate.mdx"},{"id":264,"title":"Performance Optimization","routePath":"/en/guides/topic-detail/model/performance","lang":"en","toc":[{"text":"Splitting Models","id":"splitting-models","depth":2,"charIndex":317},{"text":"State Selection","id":"state-selection","depth":2,"charIndex":1341},{"text":"Derivative State Caching","id":"derivative-state-caching","depth":2,"charIndex":2156}],"domain":"","content":"#\n\nReduck has already done a lot of performance optimization work internally, so\nperformance issues generally do not need to be considered. However, when\nperformance is more sensitive, or when encountering performance issues, you can\nconsider more targeted performance optimization from the following three\naspects.\n\n\nSplitting Models#\n\nWhen useModel returns the complete State object of the Model, any change in any\npart of the State will cause the component that calls useModel to be\nre-rendered.\n\nFor example:\n\nconst fooModel = model('foo').define({\n  state: {\n    a: '',\n    b: '',\n  },\n  actions: {\n    setA(state, payload) {\n      state.a = payload;\n    },\n    setB(state, payload) {\n      state.b = payload;\n    },\n  },\n});\n\nfunction ComponentA() {\n  const [state] = useModel(fooModel);\n\n  return \n{state.a};\n}\n\n\nAlthough ComponentA only needs to use the a state, it will still be re-rendered\nwhen the b state changes. In this case, we can consider splitting fooModel into\nseparate Models responsible for managing a and b respectively:\n\nconst fooModel = model('foo').define({\n  state: {\n    a: '',\n  },\n  actions: {\n    setA(state, payload) {\n      state.a = payload;\n    },\n  },\n});\n\nconst barModel = model('bar').define({\n  state: {\n    b: '',\n  },\n  actions: {\n    setB(state, payload) {\n      state.b = payload;\n    },\n  },\n});\n\n\n\nState Selection#\n\nuseModel supports passing in a selector function to filter the returned State\nand Actions for the component. We can use a selector function to ensure that the\nState returned to the component is what the component needs directly, thus\nensuring that the component is not re-rendered due to changes in other unrelated\nstates.\n\nFor the same example above, we can use a selector function for performance\noptimization, the code is as follows:\n\nconst fooModel = model('foo').define({\n  state: {\n    a: '',\n    b: '',\n  },\n  actions: {\n    setA(state, payload) {\n      state.a = payload;\n    },\n    setB(state, payload) {\n      state.b = payload;\n    },\n  },\n});\n\nfunction ComponentA() {\n  // 通过传入 selector 函数，只返回 a 状态给组件\n  const [stateA] = useModel(fooModel, state => state.a);\n\n  return \n{stateA};\n}\n\n\n\nDerivative State Caching#\n\nWhen a Model has computed property, the computed function will be executed every\ntime useModel is called.\n\nConsider the following code:\n\nconst barModel = model('bar').define({\n  state: {\n    value: 'bar',\n  },\n  computed: {\n    combineA: [\n      fooModel, // fooModel define as above\n      (state, fooState) => {\n        return state + fooState.a;\n      },\n    ],\n  },\n  actions: {\n    setValue(state, payload) {\n      state.value = payload;\n    },\n  },\n});\n\nfunction ComponentB() {\n  const [state, actions] = useModel(fooModel);\n  const [{ combineA }] = useModel(barModel);\n  // ...\n}\n\n\nEven if the b state of fooModel changes, the combineA function (more precisely,\nthe last function type element of combineA) will still be called and executed\nwhen the component is re-rendered, although the derivative state combineA of\nbarModel depends on barModel itself and the state a of fooModel.\n\nIn general, the logic in the computed function is usually very lightweight, but\nwhen the logic in the computed function is relatively complex, we can consider\ncaching the calculation logic. For example, we can use reselect to cache\ncombineA of barModel:\n\n\n\n// create cache function\nconst selectCombineA = createSelector(\n  (state) => state.bar.value,\n  (state) => state.foo.a,\n  (barState, fooState) => {\n    return barState + fooState;\n  }\n);\n\nconst barModel = model(\"bar\").define({\n  state: {\n    value: \"bar\",\n  },\n  computed: {\n    combineA: [\n      fooModel,\n      (state, fooState) => {\n        return selectCombineA({\n          foo: fooState,\n          bar: state,\n        });\n      },\n    ],\n  },\n  actions: {\n    setValue(state, payload) {\n      state.value = payload;\n    },\n  },\n});\n\n\nWe created a caching function createSelector, which only recalculates the value\nof combineA when the state of barModel changes or the state a of fooModel\nchanges.\n\nAdditional Information\n\nYou can find the complete example code of this section here.","frontmatter":{"sidebar_position":8,"title":"Performance Optimization"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/model/performance.mdx","_relativePath":"en/guides/topic-detail/model/performance.mdx"},{"id":265,"title":"Quick Start","routePath":"/en/guides/topic-detail/model/quick-start","lang":"en","toc":[{"text":"Core Concepts","id":"core-concepts","depth":2,"charIndex":1338},{"text":"Basic Usage","id":"basic-usage","depth":2,"charIndex":1895}],"domain":"","content":"#\n\nReduck is a state management library developed by the Modern.js team that\nfollows the MVC pattern. Its underlying state storage is based on Redux\nimplementation, while providing a higher level of abstraction and full\ncompatibility with the Redux ecosystem.\n\nThe goal of Reduck is to organize the development structure of React\napplications in the MVC pattern, maintain business logic in the Model layer,\ndecoupling business logic from UI, making it easier for developers to focus on\nbusiness logic, and reducing duplicated work (boilerplate code) through higher\nlevel of abstraction.\n\nIn the MVC pattern, Reduck plays the role of M(Model), React UI Component\ncorresponds to V(View), and gets the Model from Reduck and modifies the Model's\nReact Container Component, which corresponds to C(View Controller/Container).\n\nThe state management solution of Modern.js is implemented through built-in\nReduck. Using Reduck in Modern.js not only eliminates the manual integration\nprocess, but also allows all Reduck APIs to be imported and used directly from\nthe Modern.js Runtime package, providing a better consistency experience.\n\nINFO\n 1. To use Reduck APIs in Modern.js, you need to set runtime.state to enable the\n    state management plugin.\n 2. Reduck can also be used separately as a state management library outside of\n    Modern.js.\n\n\nCore Concepts#\n\nThere are only four core concepts in Reduck: Model, State, Actions, and Effects.\n\nModel: Encapsulates the logic and required state of an independent module,\nconsisting of State, Actions, and Effects.\n\nState: The state stored in the Model.\n\nActions: Pure functions used to modify State, functions must be Synchronous.\n\nEffects: Functions with side effects used to modify State, functions can be\nAsynchronous. Effects can call their own Actions and Effects or those of other\nModels.\n\nThe Reduck data flow is shown in the following figure:\n\n\n\n\nBasic Usage#\n\nNext, let's take a simple Counter application as an example to demonstrate the\nbasic usage of Reduck.\n\nFirst, we define a Model named count:\n\n\n\nconst countModel = model('count').define({\n  state: {\n    value: 1,\n  },\n});\n\nexport default countModel;\n\n\nWe use the API model to create countModel, which currently only contains the\nstate that stores the counter value, that is, value in the code.\n\nWe define an action to increase the counter by 1:\n\n\n\nconst countModel = model('count').define({\n  state: {\n    value: 1,\n  },\n  actions: {\n    add(state) {\n      state.value += 1;\n    },\n  },\n});\n\nexport default countModel;\n\n\nIn the add action, we can directly modify the value of the state and perform the\nincrement operation without treating the state as an immutable object. This is\nbecause Reduck integrates immer, which can directly modify the original state\nobject.\n\nNext, we will demonstrate how to use the Model in a component.\n\nCreate a new component called Counter, and use the countModel via the useModel\nAPI inside the component:\n\n\n\n\nfunction Counter() {\n  const [state, actions] = useModel(countModel);\n\n  return (\n    \n\n      \ncounter: {state.value}\n       actions.add()}>add\n    \n  );\n}\n\n\nuseModel gets the state and actions of countModel. The component displays the\ncurrent value of the counter, and clicking the add button increments the counter\nby 1.\n\nINFO\n\nDue to the simplicity of the example used here, the layering of the MVC pattern\nis not strictly followed. The Counter component acts as both the V and C layers.\n\nThe final demonstration effect is as follows:\n\n\n\nThat completes a simple counter application. You can view the complete example\ncode for this section here.","frontmatter":{"sidebar_position":1,"title":"Quick Start"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/model/quick-start.mdx","_relativePath":"en/guides/topic-detail/model/quick-start.mdx"},{"id":266,"title":"Ecosystem Integration","routePath":"/en/guides/topic-detail/model/redux-integration","lang":"en","toc":[],"domain":"","content":"#\n\nReduck is based on Redux, so you can use libraries from the Redux ecosystem to\nenhance its functionality. APIs like Provider, createApp, and createStore allow\nyou to configure the use of middlewares and store enhancers; and using\ncreateStore, you can take complete control over the process of creating the\nstore.\n\nFor example, if we want to use the middleware redux-logger, the example code is\nas follows:\n\nReactDOM.render(\n  \n    // Set middleware through the config parameter of Provider\n    \n  ,\n  document.getElementById('root'),\n);\n\n\nCAUTION\n\nReduck is built on top of the lower-level Redux API, and abstracts away some of\nthe underlying concepts of Redux, such as Reducers. Reduck allows models to be\ndynamically mounted, whereas Redux mounts all the necessary state at Store\ncreation time. Due to these implementation differences, some libraries from the\nRedux ecosystem cannot be used directly in Reduck.","frontmatter":{"sidebar_position":11,"title":"Ecosystem Integration"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/model/redux-integration.mdx","_relativePath":"en/guides/topic-detail/model/redux-integration.mdx"},{"id":267,"title":"Test Model","routePath":"/en/guides/topic-detail/model/test-model","lang":"en","toc":[],"domain":"","content":"#\n\nTesting is crucial for the stability of code. Here's an example using the\ncountModel from Quick Start to demonstrate how to perform unit testing on a\nModel in Modern.js.\n\nTo use the testing feature, you need to first enable it. In the project root\ndirectory, execute pnpm run new and make the following selection:\n\n? Please select the operation you want to perform: Enable optional features\n? Enable optional features Enable \"Unit Testing / Integration Testing\" feature\n\n\nThis will enable testing feature support.\n\nCreate a new file called count.test.ts with the following code:\n\n\n\n\ndescribe('test model', () => {\n  it('count value should plus one after add', () => {\n    const store = createStore();\n    const [state, { add }] = store.use(countModel);\n\n    expect(state).toEqual({ value: 1 });\n\n    add();\n\n    expect(store.use(countModel)[0]).toEqual({ value: 2 });\n  });\n});\n\n\nINFO\n\nThe createStore used here is imported from @modern-js/runtime/testing, which\ninternally uses the configuration of runtime.state to create a store.\n\nIn the test case, we create a new store to mount countModel, use store.use to\nget the State and Actions of countModel. Then, we call the add Action to update\nthe state and assert the updated state value.\n\nExecute the pnpm run test command to trigger the execution of the test case.","frontmatter":{"sidebar_position":9,"title":"Test Model"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/model/test-model.mdx","_relativePath":"en/guides/topic-detail/model/test-model.mdx"},{"id":268,"title":"TS Best Practices","routePath":"/en/guides/topic-detail/model/typescript-best-practice","lang":"en","toc":[{"text":"Defining the State Type of the Model","id":"defining-the-state-type-of-the-model","depth":2,"charIndex":217},{"text":"Dependent types of Derived State","id":"dependent-types-of-derived-state","depth":2,"charIndex":1383},{"text":"Hooks for Getting Model Type Information","id":"hooks-for-getting-model-type-information","depth":2,"charIndex":1788}],"domain":"","content":"#\n\nReduck provides excellent support for TypeScript, and in most cases, you can get\nAPI type prompts directly without any extra work. In this section, we will\nprovide additional information on other usage scenarios.\n\n\nDefining the State Type of the Model#\n\nDeclaring type information for the State of a Model is a best practice when\nusing Reduck in TypeScript.\n\ninterface State {\n  data: string;\n}\n\nexport const foo = model('foo').define({\n  state: {\n    data: '',\n  },\n  computed: {\n    withSuffix: state => state.data + 'suffix',\n  },\n  actions: {\n    setData: (state, payload: string) => {\n      state.data = payload;\n    },\n  },\n});\n\n\nWhen you declare type information for the State of a Model, the computed and\nactions of the Model can get the correct type information. In fact, even if we\ndon't define State type information in the example code above, the type\ninformation of State can be automatically inferred based on the initial value\ninformation of state. However, we still recommend that you declare the type\ninformation of State when defining a Model because the type information of State\ninferred based on the initial value information of state may be incomplete\n(missing fields or field type information), and the type information of State\ncannot be automatically inferred based on the initial value information of state\nwhen using Function Type to define the Model.\n\n\nDependent types of Derived State#\n\nWhen the derived state of a Model depends on other Models, you need to manually\nspecify the State of the other Models.\n\ninterface State {\n  data: string;\n}\n\nexport const bar = model('bar').define({\n  state: {\n    data: '',\n  },\n  computed: {\n    // specify the type for fooState\n    withFoo: [foo, (state, fooState: FooState) => state.data + fooState.data],\n  },\n});\n\n\n\nHooks for Getting Model Type Information#\n\nReduck provides a set of utility types for getting Model type information:\n\n * GetModelState: Get the type information of the State (including derived\n   state) of the Model.\n * GetModelActions: Get the type information of the Actions (including Effects\n   functions) of the Model.\n\nexport const foo = model('foo').define({\n  // skip some codes\n});\n\n// get the State type of foo\nlet fooActions: GetModelActions;\n// get the Actions type of foo\nlet fooState: GetModelState;\n","frontmatter":{"sidebar_position":10,"title":"TS Best Practices"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/model/typescript-best-practice.mdx","_relativePath":"en/guides/topic-detail/model/typescript-best-practice.mdx"},{"id":269,"title":"Use Models","routePath":"/en/guides/topic-detail/model/use-model","lang":"en","toc":[{"text":"Using Models in Components","id":"using-models-in-components","depth":2,"charIndex":3},{"text":"Using as Global State","id":"using-as-global-state","depth":3,"charIndex":33},{"text":"Using as Static State","id":"using-as-static-state","depth":3,"charIndex":2191},{"text":"Using as Local State","id":"using-as-local-state","depth":3,"charIndex":4222},{"text":"Using outside of components","id":"using-outside-of-components","depth":2,"charIndex":5197}],"domain":"","content":"#\n\n\nUsing Models in Components#\n\n\nUsing as Global State#\n\nuseModel can be used to obtain the State, Actions, and other information of the\nModel. When the State of the Model is modified by Actions, any other components\nthat use the Model will automatically re-render.\n\nIn the counter example in Quick Start, we have demonstrated the use of useModel\nand will not repeat it here.\n\nuseModel supports passing multiple Models, and the State and Actions of multiple\nModels will be merged and returned as the result. For example:\n\nconst fooModel = model('foo').define({\n  state: {\n    value: 1,\n  },\n  actions: {\n    add(state) {\n      state += 1;\n    },\n  },\n});\n\nconst barModel = model('bar').define({\n  state: {\n    title: 'bar',\n  },\n  actions: {\n    set(state, payload) {\n      state.title = payload;\n    },\n  },\n});\n\nconst [state, actions] = useModel([fooModel, barModel]);\n// 或\nconst [state, actions] = useModel(fooModel, barModel);\n\n\nstate and actions value are:\n\nstate = {\n  value: 1,\n  title: 'bar',\n};\n\nactions = {\n  add(state) {\n    state += 1;\n  },\n  set(state, payload) {\n    state.title = payload;\n  },\n};\n\n\nuseModel also supports selector operations on State and Actions to filter or\nrename State and Actions. For example:\n\nconst fooModel = model('foo').define({\n  state: {\n    value: 1,\n  },\n  actions: {\n    add(state) {\n      state += 1;\n    },\n  },\n});\n\nconst barModel = model('bar').define({\n  state: {\n    value: 'bar',\n  },\n  actions: {\n    set(state, payload) {\n      state.value = payload;\n    },\n  },\n});\n\nconst [state, actions] = useModel(\n  [fooModel, barModel],\n  (fooState, barState) => ({\n    fooValue: fooState.value,\n    barValue: barState.value,\n  }), // stateSelector\n  (fooActions, barActions) => ({ add: fooActions.add }), // actionsSelector\n);\n\n\nWe use stateSelector to rename the states with the same name in fooModel and\nbarModel. We use actionsSelector to filter out the Actions of barModel.\n\nIf only actionsSelector needs to be set, you can set stateSelector to undefined\nas a placeholder. For example:\n\nconst [state, actions] = useModel(\n  [fooModel, barModel],\n  undefined,\n  (fooActions, barActions) => ({ add: fooActions.add }), // actionsSelector\n);\n\n\n\nUsing as Static State#\n\nuseStaticModel can be used to obtain the Model and use the state of the Model as\na static state. This ensures that the State accessed by the component is always\nthe latest value, but the change of the Model's State does not cause the current\ncomponent to re-render.\n\nINFO\n\nThe usage of useStaticModel is exactly the same as useModel.\n\nConsider the following scenario: there is an Input component responsible for\nuser input, and another Search component responsible for executing a search\noperation after the user input information is entered and the search button is\nclicked. We do not want the state changes during the user input process to cause\nSearch to re-render. In this case, useStaticModel can be used:\n\n\n\nfunction Search() {\n  // should not be destructured\n  const [state] = useStaticModel(searchModel);\n\n  return (\n    \n\n       {\n          const result = await mockSearch(state.input);\n          console.log(result);\n        }}\n      >\n        Search\n      \n    \n  );\n}\n\n\nCaution\n\nDo not destructure the state returned by useStaticModel. For example, changing\nit to the following code: const [{input}] = useStaticModel(searchModel); will\nalways get the initial value of Input.\n\nuseStaticModel is also suitable for use with animation libraries such as\nreact-three-fiber, because binding fast-changing states in animation component\nUI can easily cause performance issues. In this case, you can choose to use\nuseStaticModel, which only subscribes to the State but does not cause the view\ncomponent to re-render. Here is a simplified example:\n\nfunction ThreeComponent() {\n  const [state, actions] = useStaticModel(modelA);\n\n  useFrame(() => {\n    state.value;\n    actions.setValue(1);\n    state.value;\n  });\n}\n\n\nUsing React's refs can also achieve similar effects. In fact, useStaticModel\nalso uses refs internally. However, using useStaticModel directly helps decouple\nthe state management logic from the component and converge it into the Model\nlayer.\n\nThe complete sample code can be found here.\n\n\nUsing as Local State#\n\nuseLocalModel can be used to obtain the Model and use the state of the Model as\nlocal state. At this time, the change of the Model State only causes the current\ncomponent to re-render, but does not cause other components that use the Model\nto re-render. The effect is similar to managing state through useState in React,\nbut it can decouple the state management logic from the component and converge\nit into the Model layer.\n\nINFO\n\nThe usage of useLocalModel is exactly the same as useModel.\n\nFor example, we modify the code of the counter application and add a counter\ncomponent LocalCounter with local state:\n\n\n\nfunction LocalCounter() {\n  const [state, actions] = useLocalModel(countModel);\n\n  return (\n    \n\n      \nlocal counter: {state.value}\n       actions.add()}>add\n    \n  );\n}\n\n\nClick the add button of Counter and LocalCounter respectively, and the states of\nthe two do not affect each other:\n\n\n\nThe complete sample code can be found here.\n\n\nUsing outside of components#\n\nIn actual business scenarios, sometimes we need to use Model outside of React\ncomponents, such as accessing State and executing Actions in utility functions.\nAt this time, we need to use the Store. The Store is a low-level concept that\nusers generally cannot touch. It is responsible for storing and managing the\nentire application's state. Reduck's Store is based on Redux's Store\nimplementation and adds Reduck-specific APIs, such as use.\n\nFirst, call useStore in the component to obtain the store object used by the\ncurrent application and mount it to a variable outside the component:\n\nlet store; // Reference to `store` object outside of the component\nfunction setStore(s) {\n  store = s;\n}\nfunction getStore() {\n  return store;\n}\n\nfunction Counter() {\n  const [state] = useModel(countModel);\n  const store = useStore();\n  // Avoid unnecessary duplicate settings through `useMemo`\n  useMemo(() => {\n    setStore(store);\n  }, [store]);\n\n  return (\n    \n\n      \ncounter: {state.value}\n    \n  );\n}\n\n\nYou can obtain the Model object through store.use, and the usage of store.use is\nthe same as useModel. Taking the counter application as an example, we perform\nan increment operation on the counter value every 1 second outside the component\ntree:\n\nsetInterval(() => {\n  const store = getStore();\n  const [, actions] = store.use(countModel);\n  actions.add();\n}, 1000);\n\n\nThe complete sample code can be found here.\n\nINFO\n\nIf the Store object is manually created through createStore, there is no need to\nobtain it through useStore in the component, and it can be used directly.\n\nAdditional Information\n\nFor detailed API definitions related to this section, please refer to here.","frontmatter":{"sidebar_position":3,"title":"Use Models"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/model/use-model.mdx","_relativePath":"en/guides/topic-detail/model/use-model.mdx"},{"id":270,"title":"Using Reduck Separately","routePath":"/en/guides/topic-detail/model/use-out-of-modernjs","lang":"en","toc":[],"domain":"","content":"#\n\nWhen integrating Reduck separately from Modern.js, the following modifications\nneed to be made:\n\n 1. Install the Reduck related packages\n\nInstall the Reduck package in the project: @modern-js-reduck/react.\n\n 2. Import package names for API\n\nWhen used in Modern.js, the package name for exporting Reduck API is:\n@modern-js/runtime/model. When using Reduck separately, the package name for\nexporting is: @modern-js-reduck/react.\n\n 3. Wrap the Provider component\n\nModern.js automatically wraps the Provider component used to inject the Reduck\nglobal Store on the entry component of the application. When using Reduck\nseparately, this needs to be done manually.\n\nExample:\n\n// Root Component\nconst Root = () => {\n  return (\n    \n      {/* Entry App */}\n      \n    \n  );\n};\n\n\n 4. Feature configuration\n\nWhen used in Modern.js, Reduck features can be configured through runtime.state.\nWhen used separately, configuration needs to be done through the config or store\nparameter of Provider.\n\nExample:\n\nconst Root = () => {\n  return (\n    {/* Close Redux DevTools */}\n    \n      \n    \n  )\n}\n","frontmatter":{"sidebar_position":12,"title":"Using Reduck Separately"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/topic-detail/model/use-out-of-modernjs.mdx","_relativePath":"en/guides/topic-detail/model/use-out-of-modernjs.mdx"},{"id":271,"title":"Build FAQ","routePath":"/en/guides/troubleshooting/builder","lang":"en","toc":[{"text":"General FAQ","id":"general-faq","depth":2,"charIndex":87},{"text":"Features FAQ","id":"features-faq","depth":2,"charIndex":367},{"text":"Exceptions FAQ","id":"exceptions-faq","depth":2,"charIndex":647},{"text":"HMR FAQ","id":"hmr-faq","depth":2,"charIndex":929}],"domain":"","content":"#\n\nIf you encounter build-related problems, you can refer to the following\ndocuments:\n\n\nGeneral FAQ#\n\nPlease refer to Modern.js Builder - General FAQ, which contains some general\nquestions about concepts, such as:\n\n * The relationship between Modern.js Builder and Modern.js?\n * Can Builder be used to build libraries or UI components?\n * Will Builder support Vite?\n\n\nFeatures FAQ#\n\nPlease refer to Modern.js Builder - Features FAQ, which contains an introduction\nto some common building features, such as:\n\n * How to import UI Component library on demand?\n * How to run ESLint during compilation?\n * How to configure CDN path for static assets?\n\n\nExceptions FAQ#\n\nPlease refer to Modern.js Builder - Exceptions FAQ, which contains some common\nconstruction problems, such as:\n\n * 'compilation' argument error when webpack compiling?\n * Compile error You may need additional loader?\n * Find exports is not defined runtime error?\n\n\nHMR FAQ#\n\nPlease refer to Modern.js Builder - HMR FAQ, such as:\n\n * HMR not working when external React?\n * HMR not working when setting filename hash in development mode?\n * HMR not working when updating React components?","frontmatter":{"sidebar_position":3},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/troubleshooting/builder.mdx","_relativePath":"en/guides/troubleshooting/builder.mdx"},{"id":272,"title":"CLI FAQ","routePath":"/en/guides/troubleshooting/cli","lang":"en","toc":[{"text":"Unable to pass command line arguments correctly when using pnpm?","id":"unable-to-pass-command-line-arguments-correctly-when-using-pnpm?","depth":3,"charIndex":3}],"domain":"","content":"#\n\n\nUnable to pass command line arguments correctly when using pnpm?#\n\nThere are some differences between pnpm v6 and pnpm v7 in how they execute\ncommands, and the following should be noted:\n\npnpm v7:\n\nWhen using pnpm to call the commands in package.json, if you need to pass\nparameters to pnpm, you need to put the parameters before the command.\n\nFor example, using the pnpm --filter parameter to run the prepare command:\n\npnpm run --filter \"./packages/**\" prepare\n\n\nIf you need to pass parameters to the command, you need to put the parameters\nafter the command.\n\nFor example, in the following package.json configuration:\n\n{\n  \"scripts\": {\n    \"command\": \"modern command\"\n  }\n}\n\n\nThe way to pass parameters when running the command is:\n\npnpm run command --options\n\n\npnpm v6:\n\nIn the following package.json configuration:\n\n{\n  \"scripts\": {\n    \"command\": \"modern command\"\n  }\n}\n\n\nIf you need to run modern command --option:\n\nWhen using pnpm, you need to run pnpm run command -- --option.\n\nThis is because pnpm's handling of command parameters is different from that of\nYarn, but similar to that of npm: when the -- string is not added, the\nparameters passed are for pnpm; when the -- string is used, the parameters\npassed are for running the script.\n\nIn the above example, the --option parameter is passed to modern command. If you\nrun pnpm run command --option, the --option parameter will be passed to pnpm.\n\nIn summary:\n\nWhen using pnpm v7, if passing parameters to pnpm, the parameters need to be\nplaced before the command.\n\nWhen using pnpm v6, if the parameters are passed to pnpm, -- is not required; if\nthe parameters are passed to the script, the -- string needs to be added.","frontmatter":{"sidebar_position":2},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/troubleshooting/cli.mdx","_relativePath":"en/guides/troubleshooting/cli.mdx"},{"id":273,"title":"Dependencies FAQ","routePath":"/en/guides/troubleshooting/dependencies","lang":"en","toc":[{"text":"How to check the actual installed version of a dependency in the project?","id":"how-to-check-the-actual-installed-version-of-a-dependency-in-the-project?","depth":3,"charIndex":3},{"text":"Getting \\\"The engine \\\"node\\\" is incompatible\\\" error during dependency installation?","id":"getting-\\\"the-engine-\\\"node\\\"-is-incompatible\\\"-error-during-dependency-installation?","depth":3,"charIndex":-1},{"text":"Getting a ReactNode type error after upgrading dependencies?","id":"getting-a-reactnode-type-error-after-upgrading-dependencies?","depth":3,"charIndex":1851},{"text":"Getting peer dependencies warnings in the console after running pnpm install?","id":"getting-peer-dependencies-warnings-in-the-console-after-running-pnpm-install?","depth":3,"charIndex":2903},{"text":"What is the minimum supported version of React for the Modern.js framework?","id":"what-is-the-minimum-supported-version-of-react-for-the-modernjs-framework?","depth":3,"charIndex":3409}],"domain":"","content":"#\n\n\nHow to check the actual installed version of a dependency in the project?#\n\nYou can use the ls command provided by the package manager to view the version\nof the dependency in the project.\n\nHere are some basic examples. For detailed usage, please refer to the\ndocumentation of each package manager.\n\nnpm / yarn\n\nFor projects using npm or yarn, you can use the npm ls command.\n\nFor example, running npm ls @modern-js/core will show the following result:\n\nproject\n└─┬ @modern-js/app-tools@2.0.0\n  └── @modern-js/core@2.0.0\n\n\npnpm\n\nFor projects using pnpm, you can use the pnpm ls command.\n\nFor example, running pnpm ls @modern-js/core --depth Infinity will show the\nfollowing result:\n\ndevDependencies:\n@modern-js/app-tools 2.0.0\n└── @modern-js/core 2.0.0\n\n\n--------------------------------------------------------------------------------\n\n\nGetting \"The engine \"node\" is incompatible\" error during dependency\ninstallation?#\n\nIf you encounter the following error message during dependency installation, it\nmeans that the current environment is using a Node.js version that is too low,\nand you need to upgrade Node.js to a higher version.\n\nThe engine \"node\" is incompatible with this module.\n\nExpected version \">=14.17.6\". Got \"12.20.1\"\n\n\nWhen using Modern.js, it is recommended to use the latest version of Node.js\n14.x or Node.js 16.x.\n\nIf the Node.js version of the current environment is lower than the above\nrequirement, you can use tools such as nvm or fnm to switch versions.\n\nHere is an example of using nvm:\n\n# Install Node.js v14\nnvm install 14\n\n# Switch to Node 14\nnvm use 14\n\n# Set Node 14 as the default version\nnvm default 14\n\n\nFor local development environments, it is recommended to use fnm, which has\nbetter performance than nvm and has similar usage.\n\n--------------------------------------------------------------------------------\n\n\nGetting a ReactNode type error after upgrading dependencies?#\n\nAfter upgrading the dependencies of the project, if the following type error\noccurs, it means that the wrong version of @types/react is installed in the\nproject.\n\nThe types returned by 'render()' are incompatible between these types.\nType 'React.ReactNode' is not assignable to type 'import(\"/node_modules/@types/react/index\").ReactNode'.\nType '{}' is not assignable to type 'ReactNode'.\n\n\nThe reason for this problem is that the ReactNode type definition in React 18 is\ndifferent from that in React 16/17. If there are multiple different versions of\n@types/react in the project, a ReactNode type conflict will occur, resulting in\nthe above error.\n\nThe solution is to lock the @types/react and @types/react-dom in the project to\na unified version, such as v17.\n\n{\n  \"@types/react\": \"^17\",\n  \"@types/react-dom\": \"^17\"\n}\n\n\nFor methods of locking dependency versions, please refer to Lock nested\ndependency.\n\n--------------------------------------------------------------------------------\n\n\nGetting peer dependencies warnings in the console after running pnpm install?#\n\nThe reason for this warning is that the version range of peer dependencies\ndeclared by some third-party npm packages is inconsistent with the version range\ninstalled in Modern.js.\n\nIn most cases, peer dependencies warnings will not affect the project operation\nand do not need to be processed separately. Please ignore the relevant warnings.\n\n--------------------------------------------------------------------------------\n\n\nWhat is the minimum supported version of React for the Modern.js framework?#\n\nThe recommended React version for the Modern.js framework is >= 18.0.0, and\ndifferent functions have different requirements for the React version.\n\n * If you are using React 17, some framework functions will not be available,\n   such as Steaming SSR, because it relies on new features provided by React 18.\n * If you are still using React 16, you will not be able to use Modern.js's\n   runtime or server-side capabilities. You can consider using the build mode of\n   Modern.js, that is, only using Modern.js's build capabilities. In this case,\n   React 16 can still be used.\n\nIn future major versions of Modern.js, we will gradually remove support for\nReact 16 and React 17. Therefore, please upgrade to React 18 or higher as soon\nas possible.","frontmatter":{"sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/guides/troubleshooting/dependencies.mdx","_relativePath":"en/guides/troubleshooting/dependencies.mdx"},{"id":275,"title":"Create Project","routePath":"/en/tutorials/first-app/c01-start","lang":"en","toc":[{"text":"Environment preparation","id":"environment-preparation","depth":2,"charIndex":220},{"text":"Node.js","id":"nodejs","depth":3,"charIndex":247},{"text":"pnpm","id":"pnpm","depth":3,"charIndex":1189},{"text":"Initialization project","id":"initialization-project","depth":2,"charIndex":1348},{"text":"Debug Project","id":"debug-project","depth":2,"charIndex":2717},{"text":"Modify the code","id":"modify-the-code","depth":2,"charIndex":3050},{"text":"Enable SSR","id":"enable-ssr","depth":2,"charIndex":4150}],"domain":"","content":"#\n\nStarting from this chapter, we will enter the practical tutorial section. In the\npractical tutorial, we will start with environment preparation, starting from\nsimple to complex, building a real project step by step.\n\n\nEnvironment preparation#\n\n\nNode.js#\n\nBefore getting started, you will need to install Node.js, and ensure that your\nNode.js version is higher than 14.17.6. We recommend using the LTS version of\nNode.js 16.\n\nYou can check the currently used Node.js version with the following command:\n\nnode -v\n# v16.19.1\n\n\nIf you do not have Node.js installed in your current environment, or the\ninstalled version is lower than 14.17.6, you can use nvm or fnm to install the\nrequired version.\n\nHere is an example of how to install the Node.js 16 LTS version via nvm:\n\n# Install the long-term support version of Node.js 16\nnvm install 16 --lts\n\n# Make the newly installed Node.js 16 as the default version\nnvm alias default 16\n\n# Switch to the newly installed Node.js 16\nnvm use 16\n\n\nnvm and fnm\n\nBoth nvm and fnm are Node.js version management tools. Relatively speaking, nvm\nis more mature and stable, while fnm is implemented using Rust, which provides\nbetter performance than nvm.\n\n\npnpm#\n\nIt is recommended to use pnpm to manage dependencies:\n\nnpm install -g pnpm@7\n\n\nNOTE\n\nModern.js also supports dependency management with yarn and npm.\n\n\nInitialization project#\n\nWe create a new directory and initialize the project via the command line tool:\n\nmkdir myapp && cd myapp\nnpx @modern-js/create@latest\n\n\n@modern-js/create provides an interactive Q & A interface to initialize the\nproject based on the results, with initialization performed according to the\ndefault settings:\n\n? Please select the type of project you want to create: Web App\n? Please select the programming language: TS\n? Please select the package manager: pnpm\n? Please select the bundler: webpack\n\n\nAfter create the project, Modern.js will automatically install dependencies and\ncreate a git repository.\n\n[INFO] dependencies are automatically installed\n[INFO] git repository has been automatically created\n[INFO] Success！\nYou can run the following command in the directory of the new project:\npnpm run dev          # Starting the dev server\npnpm run build        # Build the app for production\npnpm run serve        # Preview the production build locally\npnpm run lint         # Run ESLint and automatically fix problems\npnpm run new          # Enable optional features or add a new entry\n\n\nNow, the project structure is as follows:\n\n.\n├── src\n│   ├── modern-app-env.d.ts\n│   └── routes\n│       ├── index.css\n│       ├── layout.tsx\n│       └── page.tsx\n├── modern.config.ts\n├── package.json\n├── pnpm-lock.yaml\n├── README.md\n└── tsconfig.json\n\n\n\nDebug Project#\n\nRun pnpm run dev in the project to start the project:\n\n$ pnpm run dev\n\n> modern dev\n\ninfo    Starting dev server...\ninfo    App running at:\n\n  > Local:    http://localhost:8080/\n  > Network:  http://192.168.0.1:8080/\n\n Client ✔ done in 76.10ms\n\n\nOpen http://localhost:8000/ in your browser to see the page content.\n\n\nModify the code#\n\nWe delete the original sample code and replace it with a simple point of contact\nlist:\n\nconst getAvatar = (users: Array<{ name: string; email: string }>) =>\n  users.map(user => ({\n    ...user,\n    avatar: `https://avatars.dicebear.com/v2/identicon/${user.name}.svg`,\n  }));\n\nconst mockData = getAvatar([\n  { name: 'Thomas', email: 'w.kccip@bllmfbgv.dm' },\n  { name: 'Chow', email: 'f.lfqljnlk@ywoefljhc.af' },\n  { name: 'Bradley', email: 'd.wfovsqyo@gpkcjwjgb.fr' },\n  { name: 'Davis', email: '\"t.kqkoj@utlkwnpwk.nu' },\n]);\n\nfunction App() {\n  return (\n    \n   \n         {mockData.map(({ name, avatar, email }) => (\n           \n * \n              ---\n             {name} ---\n             {email}\n           \n   \n         ))}\n       \n  );\n}\n\nexport default App;\n\n\nRemove redundant css files and keep the directory free of redundant files:\n\nrm src/routes/index.css\n\n\nSince the framework supports HMR by default, you can see that the content in\nhttp://localhost:8080/ is automatically updated to:\n\n\n\nThe page has no styles at the moment. The next chapter will expand on this\nsection.\n\n\nEnable SSR#\n\nNext, we modify the modern.config.ts in the project to enable the SSR\ncapability:\n\n\n\nexport default defineConfig({\n  runtime: {\n    router: true,\n    state: true,\n  },\n  server: {\n    ssr: true,\n  },\n  plugins: [appTools()],\n});\n\n\nRe-execute pnpm run dev to find that the project has completed page rendering at\nthe server level.","frontmatter":{"title":"Create Project"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/tutorials/first-app/c01-start.mdx","_relativePath":"en/tutorials/first-app/c01-start.mdx"},{"id":276,"title":"Add UI Components","routePath":"/en/tutorials/first-app/c02-component","lang":"en","toc":[],"domain":"","content":"#\n\nIn the previous chapter, we learned how to initialize a project and use\nconfiguration to modify the default behavior of Modern.js.\n\nIn this chapter, we continue to use the project code of the previous chapter and\ncontinue to improve the point of contact list.\n\nIn order to do better UI display and interaction, we introduce the component\nlibrary Antd to develop, and use the component instead of the primitive list.\nAdd dependency first:\n\npnpm add antd\n\n\nModify src/routes/page.tsx to import components at the top:\n\n\n\n\nModify the implementation of the component:\n\nfunction App() {\n  return (\n    \n\n       (\n          \n            }\n              title={name}\n              description={email}\n            />\n          \n        )}\n      />\n    \n  );\n}\n\n\nExecute pnpm run dev to see the running results:\n\n\n\nYou can see that the components exported by Ant Design already have complete\nstyles.\n\nnote\n\nModern.js Automatically import CSS required by Ant Design component on demand.\n\nNOTE\n\nWe can also use other component libraries to implement the same functionality,\nsuch as Arco Design.","frontmatter":{"title":"Add UI Components"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/tutorials/first-app/c02-component.mdx","_relativePath":"en/tutorials/first-app/c02-component.mdx"},{"id":277,"title":"Add Style","routePath":"/en/tutorials/first-app/c03-css","lang":"en","toc":[{"text":"JS components using CSS","id":"js-components-using-css","depth":2,"charIndex":156},{"text":"Utility","id":"utility","depth":2,"charIndex":2075},{"text":"Customized Utility Class","id":"customized-utility-class","depth":2,"charIndex":5159}],"domain":"","content":"#\n\nIn the previous chapter, we learned how to use components from the third-party\nlibrary.\n\nIn this chapter, we will learn how to implement UI components.\n\n\nJS components using CSS#\n\nFirst of all, we want to control the display of contact avatars by ourselves,\nand implement this design draft:\n\n\n\nHypothesis has no ready-made components to implement, so you need to write some\nCSS yourself. Here we use [styled-components] (https://styled-components.com/)\nto implement similar requirements. Modern.js out of the box supports\nstyled-components, which requires neither dependency nor configuration.\n\nStyle-components avoids many problems of traditional CSS writing through\nmodularization. For example, writing styles directly on the style attribute of\nelements, the visual details of UI will also be mixed with the details of UI\nstructure and business logic. Or classname needs to avoid global space renaming,\nwhich requires the use of naming conventions.\n\nModify the code at the top in src/routes/page.tsx:\n\n\n\n\nAdd the following code:\n\nconst Avatar = styled.img`\n  width: 50px;\n  height: 50px;\n  border: 4px solid #0ef;\n  border-radius: 50%;\n`;\n\n\nModify the code of List.Item.Meta:\n\n}\n  title={name}\n  description={email}\n/>\n\n\nExecute pnpm run dev to see the expected running result:\n\n\n\nNext we do a little refactoring. To enhance legibility and make the code easier\nto maintain, we can split the Avatar component. We execute the following command\nat the end point to create a new file:\n\nDelete the implementation in src/routes/page.tsx and change it to:\n\n\n\n\nThe content of src/components/Avatar/index.tsx is modified to:\n\n\n\nconst Avatar = styled.img`\n  width: 50px;\n  height: 50px;\n  border: 4px solid #0ef;\n  border-radius: 50%;\n`;\n\nexport default Avatar;\n\n\nExecute pnpm run dev, the result should be the same.\n\nnote\n\nThe reason for using the directory form Avatar/index.tsx instead of the\nsingle-file form Avatar.tsx is that you can easily add sub-files inside the\ndirectory later, including dedicated resources (pictures, etc.), dedicated\nsub-components, CSS files, etc.\n\n\nUtility#\n\nWe have used the style-components implementation component, but the current UI\nis still unsatisfactory and lacks professionalism, such as the list item inhouse\nlayout is a bit rough and misaligned in many places.\n\nNow, let's implement a better Item component ourselves, implementing a design\ndraft like this:\n\n\n\nThe UI to be implemented this time is more complex and has an internal\nstructure, but on the other hand, there is no very thick bright blue border of\nthe component such a very special UI, which is a very conventional horizontal\nand vertical layout, centering, font style, etc. In this case, there is actually\nno need to write CSS at all. There is a more efficient implementation method\nthat complements styled-components: Utility Class.\n\nModern.js integrates the mainstream, light, general-purpose Utility Class\nlibrary Tailwind CSS.\n\nExecute pnpm run new and select the following to start Tailwind CSS:\n\n? Please select the operation you want: Enable features\n? Please select the feature name: Enable Tailwind CSS\n\n\nRegister the Tailwind plugin in modern.config.ts:\n\n\n\n\nexport default defineConfig({\n  runtime: {\n    router: true,\n    state: true,\n  },\n  server: {\n    ssr: true,\n  },\n  plugins: [appTools(), tailwindcssPlugin()],\n});\n\n\nImport the Tailwind CSS css file at the top of src/routes/page.tsx to start a\nquick implementation of the professional UI:\n\nimport 'tailwindcss/base.css';\nimport 'tailwindcss/components.css';\nimport 'tailwindcss/utilities.css';\n\n\nCreate the Item component first:\n\nModify src/routes/page.tsx to pass the render implementation of List to Item\ncomponent:\n\n\nimport 'tailwindcss/base.css';\nimport 'tailwindcss/components.css';\nimport 'tailwindcss/utilities.css';\n\n\nconst getAvatar = (users: Array<{ name: string, email: string }>) =>\n  users.map(user => ({\n    ...user,\n    avatar: `https://avatars.dicebear.com/v2/identicon/${user.name}.svg`,\n  }));\n\nconst mockData = getAvatar([\n  { name: 'Thomas', email: 'w.kccip@bllmfbgv.dm' },\n  { name: 'Chow', email: 'f.lfqljnlk@ywoefljhc.af' },\n  { name: 'Bradley', email: 'd.wfovsqyo@gpkcjwjgb.fr' },\n  { name: 'Davis', email: '\"t.kqkoj@utlkwnpwk.nu' },\n]);\n\nfunction Index() {\n  return (\n    \n\n       }\n      />\n    \n  );\n}\n\nexport default Index;\n\n\nUtility Class(https://tailwindcss.com/docs/container) is used on the parent\ncontainer for a quick implementation of the most basic maximum width, center,\nand other styles.\n\nNext implementation src/components/Item/index.tsx:\n\n\n\ntype InfoProps = {\n  avatar: string;\n  name: string;\n  email: string;\n  archived?: boolean;\n};\n\nconst Item = ({ info }: { info: InfoProps }) => {\n  const { avatar, name, email, archived } = info;\n  return (\n    \n\n      \n      \n\n        \n\n          \n\n{name}\n          \n\n{email}\n        \n        \n          Archive\n        \n      \n    \n  );\n};\n\nexport default Item;\n\n\nExecute pnpm run dev to see the expected running result:\n\n\n\nWe only use a few Utility Classes, such as Flex, Padding, Margin, Text, Font,\nBorder, without writing a single CSS implementation Professional UI that\nconforms to the design draft.\n\n\nCustomized Utility Class#\n\nWe can also implement the new Utility Class ourselves to facilitate reuse\nbetween codes.\n\nUtility Class itself is also a component-oriented technology (using different\nclasses on a component is equivalent to setting some attributes from the base\nclass for this component), but the classname of Utility Class is global (because\nit is used on arbitrary components/elements), it is very suitable for\nimplementation with separate CSS files.\n\nCreate a new CSS file:\n\nImport utils.css in src/routes/page.tsx:\n\nimport '../styles/utils.css';\n\n\nA Utility Class named custom-text-gray is implemented in\nsrc/routes/styles/utils.css.\n\n:root {\n  --custom-text-color: rgb(113, 128, 150);\n}\n\n.custom-text-gray {\n  color: var(--custom-text-color);\n}\n\n\nnote\n\nModern.js integrates with PostCSS and supports modern CSS syntax features such\nas custom properties.\n\nUse in src/routes/components/Item/index.tsx:\n\n\n\n\nChange to:\n\n\n\n\nExecute pnpm run dev, you can see that the font color has changed:\n\n\n\nnote\n\nThis is just to demonstrate Utility Class usage. In a real project, with\nTailwind CSS, this Utility Class is of little value and should be added to the\nfont color through the theme of the configuration Design System.\n\nutils.css can also be written as utils.scss or utils.less, Modern.js out of the\nbox support for SCSS and Less.\n\nHowever, with the support of PostCSS, modern CSS should be sufficient to meet\nthese development needs, and the performance is also better than that of the\npreprocessor. It is recommended to use .css files first.","frontmatter":{"title":"Add Style"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/tutorials/first-app/c03-css.mdx","_relativePath":"en/tutorials/first-app/c03-css.mdx"},{"id":278,"title":"Add Client Route","routePath":"/en/tutorials/first-app/c04-routes","lang":"en","toc":[],"domain":"","content":"#\n\nIn the previous chapter, we learned how to create UI components and add styles.\n\nIn this chapter, we will learn how to add Client Route.\n\nPreviously we have added the Archive button to the point of contact list, next\nwe add a route /archives, when accessing this route, only the point of contact\nof the saved file is displayed, while the original / continues to display all\npoints of contact.\n\nCreate a new src/routes/archives/page.tsx file:\n\nAdd the following code:\n\n\n\n\n\nconst getAvatar = (users: Array<{ name: string; email: string }>) =>\n  users.map(user => ({\n    ...user,\n    avatar: `https://avatars.dicebear.com/v2/identicon/${user.name}.svg`,\n  }));\n\nconst getMockArchivedData = () =>\n  getAvatar([\n    { name: 'Thomas', email: 'w.kccip@bllmfbgv.dm' },\n    { name: 'Chow', email: 'f.lfqljnlk@ywoefljhc.af' },\n  ]);\nfunction Index() {\n  return (\n    \n\n      \n        Archives\n      \n       }\n      />\n    \n  );\n}\n\nexport default Index;\n\n\nThe Helmet component of React Helmet is used here, and the Helmet component is\nalso added in src/routes/page.tsx:\n\n\n\nfunction Index() {\n  return (\n    \n\n      \n        All\n      \n      ...\n    \n  );\n}\n\n\nnote\n\nModern.js integrates react-helmet by default, and can also be used in\nconjunction with SSR to meet SEO needs.\n\nSince there are multiple pages now, all of which need to use the previous\nUtility Class, we need to move the style file to src/routes/layout.tsx:\n\nimport 'tailwindcss/base.css';\nimport 'tailwindcss/components.css';\nimport 'tailwindcss/utilities.css';\nimport '../styles/utils.css';\n\n\nExecute pnpm run dev, visit http://localhost:8080, you can see the full point of\ncontact, the title of the page is All:\n\n\n\nVisit http://localhost:8080/archives and you will only see the point of contact\nof the saved file with the title Archives:\n\n\n\nLooking at the HTML source code of the page, you can see that the content of the\ntwo pages is the same, and different content is rendered for different URLs.\n\nNext we add a simple navigation bar that allows the user to toggle between the\ntwo lists.\n\nOpen src/routes/layout.tsx and import the Radio component at the top:\n\n\n\n\nThen modify the top of the UI to add a set of radio group:\n\nexport default function Layout() {\n  return (\n    \n\n      \n\n        \n          All\n          Archives\n        \n      \n      \n    \n  );\n}\n\n\nThen we come to the implementation of currentList and handleSetList.\n\nIntroducing three React Hooks: useState and useNavigate and useParams, as well\nas Ant Design's event type definition:\n\n\n\n\n\n\nFinally, add local state and related logic to the Layout component:\n\nexport default function Layout() {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [currentList, setList] = useState(location.pathname || '/');\n  const handleSetList = (e: RadioChangeEvent) => {\n    const { value } = e.target;\n    setList(value);\n    navigate(value);\n  };\n  return (\n  ...\n}\n\n\nAt this point, the page navigation bar implementation has been completed, and\nexecute pnpm run dev to see the effect:\n\n\n\nClick Archives in the navigation bar, you can see that the selected state and\nURL of the radio box will change, the page is not refreshed, only CSR occurs.\n\nAccessing the two pages through the URL, you can see that the HTML content is\ndifferent, because the page executes the logic of client routing in the SSR\nstage, and the HTML already contains the final render result.","frontmatter":{"title":"Add Client Route"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/tutorials/first-app/c04-routes.mdx","_relativePath":"en/tutorials/first-app/c04-routes.mdx"},{"id":279,"title":"Add Loader","routePath":"/en/tutorials/first-app/c05-loader","lang":"en","toc":[],"domain":"","content":"#\n\nIn the previous chapter, we learned how to add client route.\n\nIn this chapter, we will learn how to add Loader to the routing component.\n\nBy far, we have provided data to components through hardcoding. If you want to\nget data from the remote, you usually use useEffect to do it. But when SSR is\nenabled, useEffect will not be executed at the server level, so this SSR can\nonly render a very limited UI.\n\nModern.js provides the ability of Data Loader to support homogeneous data\nacquisition in components to maximize the value of SSR.\n\nBelow we demonstrate how to add Data Loader to the routing component and\nsimulate remote data acquisition. We use faker to mock the required data, first\ninstall dependency:\n\npnpm add faker@5\npnpm add @types/faker@5 -D\n\n\nCreate src/routes/page.loader.ts:\n\n\n\ntype LoaderData = {\n  code: number;\n  data: {\n    name: string;\n    avatar: string;\n    email: string;\n  }[];\n};\n\nexport default async (): Promise => {\n  const data = new Array(20).fill(0).map(() => {\n    const firstName = name.firstName();\n    return {\n      name: firstName,\n      avatar: `https://avatars.dicebear.com/api/identicon/${firstName}.svg`,\n      email: internet.email(),\n    };\n  });\n\n  return {\n    code: 200,\n    data,\n  };\n};\n\n\nNOTE\n\nData Loader doesn't just work for SSR. In CSR projects, Data Loader can also\navoid data acquisition dependency UI rendering, which solves the problem of\nrequesting dynamic grid layout. In the future, Modern.js will also add more\ncapabilities to this feature, such as pre-fetching, data caching, etc.\n\nModern.js also provides a hooks API called useLoaderData, we modify the exported\ncomponent of src/routes/page.tsx:\n\n\n\nfunction Index() {\n  const { data } = useLoaderData() as LoaderData;\n\n  return (\n    \n\n      \n        All\n      \n       }\n      />\n    \n  );\n}\n\nexport default Index;\n\n\nRe-execute pnpm run dev, view view-source: http://localhost:8080/, or view the\n\"Preview\" of the HTML request in the Network panel of devtools, you can see that\nthe HTML rendered by SSR already contains the complete UI:\n\n","frontmatter":{"title":"Add Loader"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/tutorials/first-app/c05-loader.mdx","_relativePath":"en/tutorials/first-app/c05-loader.mdx"},{"id":280,"title":"Add Model","routePath":"/en/tutorials/first-app/c06-model","lang":"en","toc":[{"text":"Model implementation","id":"model-implementation","depth":2,"charIndex":689},{"text":"Use Model","id":"use-model","depth":2,"charIndex":3688}],"domain":"","content":"#\n\nIn the previous chapter, we changed the hardcoding mockData to load from Data\nLoader.\n\nIn this chapter, we will further implement the functions of the project, such as\nthe implementation of the function of the Archive button to put the point of\ncontact archive.\n\nTherefore, we will start to write some business logic that has nothing to do\nwith the UI at all. If we continue to write in the component code, more and more\nnoodle code will be generated. To this end, we introduced a code module called\nModel to decoupling these business logic and UI.\n\nnote\n\nTo use the Model API, you need to opt in runtime.state:\n\n\n\nexport default defineConfig({\n  runtime: {\n    state: true,\n  },\n});\n\n\n\nModel implementation#\n\nTo create a complete Model, you first need to define state, including the name\nand initial value of data in the state.\n\nWe use Model to manage the data of the point of contact list, so define the\nfollowing data state:\n\nconst state = {\n  items: [],\n};\n\n\nUsing TS syntax, you can define more complete type information, such as items in\neach object should have a name, email field. In order to implement archive\nfunction, also need to create the archived field to hold the point of contact\nhas been archived state.\n\nWe also need a field to access all archived points of contact. We can define a\nfield of type computed to convert the existing data:\n\nconst computed = {\n  archived: ({ items }) => {\n    return items.filter(item => item.archived);\n  },\n};\n\n\nFields of type computed are defined as function, but can be accessed through\nstate just like normal fields.\n\nINFO\n\nModern.js integrates Immer and can write such state transfer logic just like\nnormal mutable data in JS.\n\nWhen implementing the Archive button, we need an archive function, which is\nresponsible for modifying the archived field of the specified contact. We call\nthis function action:\n\nconst actions = {\n  archive(draft, payload) {\n    const target = draft.items.find(item => item.email === payload);\n    if (target) {\n      target.archived = true;\n    }\n  },\n};\n\n\nAn action function is a pure function, where a defined input gets a defined\noutput (a shifted state) and should not have any side effects.\n\nThe first parameter of the function is the Draft State provided by Immer, and\nthe second parameter is the parameter passed in when the action is called (more\non how to call it later).\n\nWe try to implement them completely:\n\nconst state = {\n  items: [],\n  pending: false,\n  error: null,\n};\n\nconst computed = {\n  archived: ({ items }) => {\n    return items.filter(item => item.archived);\n  },\n};\n\nconst actions = {\n  archive(draft, payload) {\n    const target = draft.items.find(item => item.email === payload);\n    if (target) {\n      target.archived = true;\n    }\n  },\n};\n\n\nNext we connect the above code and put it in the same Model file. First execute\nthe following command to create a new file directory:\n\nmkdir -p src/models/\ntouch src/models/contacts.ts\n\n\nAdd src/models/contacts.ts:\n\n\n\ntype State = {\n  items: {\n    avatar: string;\n    name: string;\n    email: string;\n    archived?: boolean;\n  }[];\n  pending: boolean;\n  error: null | Error;\n};\n\nexport default model('contacts').define({\n  state: {\n    items: [],\n    pending: false,\n    error: null,\n  },\n  computed: {\n    archived: ({ items }: State) => items.filter(item => item.archived),\n  },\n  actions: {\n    archive(draft, payload) {\n      const target = draft.items.find(item => item.email === payload)!;\n      if (target) {\n        target.archived = true;\n      }\n    },\n  },\n});\n\n\nWe call a plain object containing elements such as state, action, etc. as Model\nSpec, Modern.js provides Model API, which can generate Model from Model Spec.\n\n\nUse Model#\n\nNow let's use this Model directly to complement the logic of the project.\n\nFirst modify src/components/Item/index.tsx and add the UI and interaction of the\nArchive button, the content is as follows:\n\n\n\ntype InfoProps = {\n  avatar: string;\n  name: string;\n  email: string;\n  archived?: boolean;\n};\n\nconst Item = ({\n  info,\n  onArchive,\n}: {\n  info: InfoProps;\n  onArchive?: () => void;\n}) => {\n  const { avatar, name, email, archived } = info;\n  return (\n    \n\n      \n      \n\n        \n\n          \n\n{name}\n          \n\n{email}\n        \n        \n          {archived ? 'Archived' : 'Archive'}\n        \n      \n    \n  );\n};\n\nexport default Item;\n\n\nNext, we add src/routes.page.loader and modify src/routes/page.tsx to pass more\nparameters to the component:\n\nexport type LoaderData = {\n  code: number;\n  data: {\n    name: string;\n    avatar: string;\n    email: string;\n  }[];\n};\n\nexport default async (): Promise => {\n  const data = new Array(20).fill(0).map(() => {\n    const firstName = name.firstName();\n    return {\n      name: firstName,\n      avatar: `https://avatars.dicebear.com/api/identicon/${firstName}.svg`,\n      email: internet.email(),\n      archived: false,\n    };\n  });\n\n  return {\n    code: 200,\n    data,\n  };\n};\n\n\n\n\n\n\n\n\n\n\n\nfunction Index() {\n  const { data } = useLoaderData() as LoaderData;\n  const [{ items }, { archive, setItems }] = useModel(contacts);\n  if (items.length === 0) {\n    setItems(data);\n  }\n\n  return (\n    \n\n      \n        All\n      \n       (\n           {\n              archive(info.email);\n            }}\n          />\n        )}\n      />\n    \n  );\n}\n\nexport default Index;\n\n\nuseModel is the hooks API provided by the Modern.js. You can provide the state\ndefined in the Model in the component, or call the side effects and actions\ndefined in the Model through actions to change the state of the Model.\n\nModel is business logic, a computational process that does not create or hold\nstate itself. Only after being used by the component with the hooks API, the\nstate is created in the specified place.\n\nExecute pnpm run dev and click the Archive button to see that the page UI has\nchanged.\n\nNOTE\n\nIn the above example, useLoaderData is actually executed every time the route is\nswitched. Because we used fake data in the Data Loader, the data returned each\ntime is different. But we use the data in the Model first, so the data does not\nchange when switching routes.","frontmatter":{"title":"Add Model"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/tutorials/first-app/c06-model.mdx","_relativePath":"en/tutorials/first-app/c06-model.mdx"},{"id":281,"title":"Add Container","routePath":"/en/tutorials/first-app/c07-container","lang":"en","toc":[{"text":"Use the full Model","id":"use-the-full-model","depth":2,"charIndex":549},{"text":"Withdraw container components","id":"withdraw-container-components","depth":2,"charIndex":2891}],"domain":"","content":"#\n\nIn the previous chapter, we initially introduced the model to split this part of\nthe logic from the UI component. The page.tsx no longer contains UI-independent\nbusiness logic implementation details, and only needs to use the Model to\nimplement the same function.\n\nIn this chapter, we will further use the business logic of implementation in\nModel to let page.tsx and archived/page.tsx get the same data. And\nimplementation Archive button, click the button to display the point of contact\narchive only in the Archives list, not in the All list.\n\n\nUse the full Model#\n\nBecause the two pages need to share the same set of state (point of contact\ntabular data, point of contact is archived or not), both need to contain the\nlogic to load the initial data, so we need to complete the data acquisition at a\nhigher level.\n\nModern.js support obtaining data through Data Loader in layout.tsx, we first\nmove the data acquisition part of the code to src/routes/layout.tsx:\n\nexport type LoaderData = {\n  code: number;\n  data: {\n    name: string;\n    avatar: string;\n    email: string;\n  }[];\n};\n\nexport default async (): Promise => {\n  const data = new Array(20).fill(0).map(() => {\n    const firstName = name.firstName();\n    return {\n      name: firstName,\n      avatar: `https://avatars.dicebear.com/api/identicon/${firstName}.svg`,\n      email: internet.email(),\n    };\n  });\n\n  return {\n    code: 200,\n    data,\n  };\n};\n\n\n\nimport {\n  Outlet,\n  useLoaderData,\n  useLocation,\n  useNavigate,\n} from '@modern-js/runtime/router';\n\n\n\n\nimport 'tailwindcss/base.css';\nimport 'tailwindcss/components.css';\nimport 'tailwindcss/utilities.css';\nimport '../styles/utils.css';\n\n\nexport default function Layout() {\n  const { data } = useLoaderData() as LoaderData;\n  const [{ items }, { setItems }] = useModel(contacts);\n  if (items.length === 0) {\n    setItems(data);\n  }\n\n  const navigate = useNavigate();\n  ...\n}\n\n\nIn src/routes/page.tsx, use Model directly to get data:\n\n\n\n\n\n\n\nfunction Index() {\n  const [{ items }, { archive }] = useModel(contacts);\n\n  return (\n    \n\n      \n        All\n      \n       (\n           {\n              archive(info.email);\n            }}\n          />\n        )}\n      />\n    \n  );\n}\n\nexport default Index;\n\n\nAlso in archived/page.tsx, delete the original mockData logic and use the\narchived value computed in Model as the data source:\n\n\n\n\n\n\n\nfunction Index() {\n  const [{ archived }, { archive }] = useModel(contacts);\n\n  return (\n    \n\n      \n        Archives\n      \n       (\n           {\n              archive(info.email);\n            }}\n          />\n        )}\n      />\n    \n  );\n}\n\nexport default Index;\n\n\nExecute pnpm run dev, visit http://localhost:8080/, click the Archive button,\nyou can see the button grey out:\n\n\n\nNext, click the top navigation and switch to the Archives list. You can find\nthat the point of contact of Archive just now has appeared in the list:\n\n\n\n\nWithdraw container components#\n\nIn the previous chapters, we split the business logic in the project into two\nlayers, one is the view component, and the other is the module. The former is\nresponsible for UI display, interaction, etc., and the latter is responsible for\nthe implementation of UI-independent business logic, which specializes in\nmanaging state.\n\nLike src/routes/page.tsx and src/routes/archives/page.tsx use the component of\nthe useModel API, which is responsible for linking the two layers of View and\nModel, similar to the role of the Controller in the traditional MVC\narchitecture. In the Modern.js, we follow the habit and call them Container.\n\nThe container component is recommended to be placed in a special containers/\ndirectory. We execute the following command to create a new file:\n\nWe extracted the common part of the original two page.tsx, and the code of\nsrc/containers/Contacts.tsx is as follows:\n\n\n\n\n\n\n\n\n\n\n\nfunction Contacts({\n  title,\n  source,\n}: {\n  title: string;\n  source: 'items' | 'archived';\n}) {\n  const [state, { archive }] = useModel(contacts);\n\n  return (\n    \n\n      \n        {title}\n      \n       (\n           {\n              archive(info.email);\n            }}\n          />\n        )}\n      />\n    \n  );\n}\n\nexport default Contacts;\n\n\nModify the code for src/routes/page.tsx and src/routes/archives/page.tsx:\n\n\n\nfunction Index() {\n  return ;\n}\n\nexport default Index;\n\n\n\n\nfunction Index() {\n  return ;\n}\n\nexport default Index;\n\n\nThe refactoring is complete, and the current project structure is:\n\n.\n├── README.md\n├── dist\n├── modern.config.ts\n├── node_modules\n├── package.json\n├── pnpm-lock.yaml\n├── src\n│   ├── components\n│   │   ├── Avatar\n│   │   │   └── index.tsx\n│   │   └── Item\n│   │       └── index.tsx\n│   ├── containers\n│   │   └── Contacts.tsx\n│   ├── models\n│   │   └── contacts.ts\n│   ├── modern-app-env.d.ts\n│   ├── routes\n│   │   ├── archives\n│   │   │   └── page.tsx\n│   │   ├── layout.tsx\n│   │   └── page.tsx\n│   └── styles\n│       └── utils.css\n└── tsconfig.json\n\n\nThe view components in components/ dir are in the form of directories, such as\nAvatar/index.tsx. And the container components in containers/ dir are in the\nform of single files, such as contacts.tsx. This is a best practice we\nrecommend.\n\nAs mentioned in the chapter Add UI component, the view component is in the form\nof a directory, because the view component is responsible for the implementation\nof UI display and interaction details, and can evolve in complexity. In the form\nof a directory, it is convenient to add sub-files, including dedicated resources\n(pictures, etc.), dedicated sub-components, CSS files, etc. You can reconstruct\nat will within this directory, considering only the smallest parts.\n\nThe container component is only responsible for linkage and is a glue layer. The\nsophisticated business logic and implementation details are handed over to the\nView layer and the Model layer for implementation. The container component\nitself should be kept simple and clear, and should not contain complex\nimplementation details, so there should be no internal structure. The\nsingle-file form is not only more concise, but also acts as a constraint,\nreminding developers not to write complicated container components.","frontmatter":{"title":"Add Container"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/tutorials/first-app/c07-container.mdx","_relativePath":"en/tutorials/first-app/c07-container.mdx"},{"id":282,"title":"Add Application Entry","routePath":"/en/tutorials/first-app/c08-entries","lang":"en","toc":[{"text":"New entry","id":"new-entry","depth":2,"charIndex":273},{"text":"Modify the configuration by entry","id":"modify-the-configuration-by-entry","depth":2,"charIndex":3056},{"text":"Next step","id":"next-step","depth":2,"charIndex":4238}],"domain":"","content":"#\n\nIn the last chapter, we basically completed the development of the point of\ncontact list application, introduced the usage of some functions in the\nModern.js, and recommended best practices.\n\nIn this chapter, we will describe how to add a new entry to the application.\n\n\nNew entry#\n\nA complete project may require multiple entries, Modern.js supports the\nautomatic creation of new entries, as mentioned in the previous section, pnpm\nrun new can enable optional features.\n\nWe can also use it to create new project elements and execute pnpm run new in\nthe project root directory:\n\n? Please select the operation you want: Create Element\n? Please select the type of element to create: New \"entry\"\n? Please fill in the entry name: landing-page\n\n\nWhen created, the project will look like this:\n\n.\n├── README.md\n├── modern.config.ts\n├── node_modules\n├── package.json\n├── pnpm-lock.yaml\n├── src\n│   ├── modern-app-env.d.ts\n│   ├── landing-page\n│   │   └── routes\n│   │       ├── index.css\n│   │       ├── layout.tsx\n│   │       └── page.tsx\n│   └── myapp\n│       ├── components\n│       │   ├── Avatar\n│       │   │   └── index.tsx\n│       │   └── Item\n│       │       └── index.tsx\n│       ├── containers\n│       │   └── Contacts.tsx\n│       ├── models\n│       │   └── contacts.ts\n│       ├── routes\n│       │   ├── archives\n│       │   │   └── page.tsx\n│       │   ├── layout.tsx\n│       │   └── page.tsx\n│       └── styles\n│           └── utils.css\n└── tsconfig.json\n\n\nYou can see that the files of the contact list application are automatically\nrefactored into src/myapp/.\n\nAt the same time, a new src/landing-page/ is created, which also has routes/*\n(the pnpm run new command only does these things, so you can also easily create\nnew entries or modify entries manually).\n\nExecute pnpm run dev to display:\n\n\n\nAccess http://localhost:8080/ to see the application as before.\n\nVisit http://localhost:8080/landing-page to see the landing-page for the new\nentry you just created (Modern.js automatically generated default page).\n\nOne of the design principles of the Modern.js framework is [Convention over\nConfiguration ]. In most cases, you can write code directly by convention\nwithout any configuration. The directory structure in src/ is a convention:\n\nsrc/myapp/ and src/landing-page/ are automatically identified as two application\nportals: myapp and landing-page.\n\nThe directory name of src/myapp/ is the same as the project name (name in\npackage.json), which will be considered as the main entry of the project, and\nthe root path of the project URL (the default in the development environment is\nhttp://localhost:8080/) will automatically point to the main entry.\n\nThe URL of other entries is to append the entry name after the root path, such\nas http://localhost:8080/landing-page.\n\nNext, we rename src/myapp/ to src/contacts/:\n\nmv src/myapp src/contacts\n\n\nExecute pnpm run dev again, the result becomes:\n\n\n\nThere is no longer a main entry, the point of contact list is now a normal entry\nthat needs to be accessed with http://localhost:8080/contacts.\n\n\nModify the configuration by entry#\n\nIn the Modern.js configuration file, we can write our own code to control the\nconfiguration of the project.\n\nNow, modify the modern.config.ts to add something:\n\n\n\n\nexport default defineConfig({\n  runtime: {\n    router: true,\n    state: true,\n  },\n  server: {\n    ssr: true,\n    ssrByEntries: {\n      'landing-page': false,\n    },\n  },\n  plugins: [appTools(), tailwindcssPlugin()],\n});\n\n\nExecute pnpm run dev, and then open view-source:\nhttp://localhost:8080/landing-page with the browser, you can see that the\ncontent of the landing-page web page is dynamically loaded through js, and the\nSSR function of this page is turned off.\n\nIf ssrByEntries and its value are annotated, the SSR function of landing-page is\nrestored.\n\nOther times, you need some more sophisticated logic to do the setup, such as JS\nvariables, expressions, import modules, etc., for example, only in the\ndevelopment environment to enable SSR:\n\nexport default defineConfig({\n  server: {\n    ssrByEntries: {\n      'landing-page': process.env.NODE_ENV !== 'production',\n    },\n  },\n};\n\n\nSo far, the prototype of our point of contact list application is almost\ncomplete 👏👏👏.\n\n\nNext step#\n\nThen you can further refine your application by following more tutorials like\nGuides, configuration, and more.","frontmatter":{"title":"Add Application Entry"},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/tutorials/first-app/c08-entries.mdx","_relativePath":"en/tutorials/first-app/c08-entries.mdx"},{"id":283,"title":"Introduction","routePath":"/en/tutorials/foundations/introduction","lang":"en","toc":[{"text":"What is Modern.js?","id":"what-is-modernjs?","depth":2,"charIndex":169},{"text":"Tutorial","id":"tutorial","depth":2,"charIndex":271}],"domain":"","content":"#\n\nWelcome to Modern.js tutorials!\n\nAfter reading this section, you will have an initial understanding of Modern.js\nand use Modern.js to create your first application.\n\n\nWhat is Modern.js?#\n\nIf you don't know Modern.js yet, please can read Modern.js Introduction first.\n\n\nTutorial#\n\nWe have prepared a tutorial on creating a \"contact list app\" that you can follow\nstep by step to create an app and learn about the following practices in\nModern.js:\n\n * Creating a project\n * Using the antd component library\n * Integrating Tailwind CSS\n * Client-side routing\n * Data fetching\n * State Management\n * Container components\n * New portal\n * ...","frontmatter":{"title":"Introduction","sidebar_position":1},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/main-doc/docs/en/tutorials/foundations/introduction.mdx","_relativePath":"en/tutorials/foundations/introduction.mdx"}]