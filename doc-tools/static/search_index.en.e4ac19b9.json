[{"id":0,"title":"Internal Components","routePath":"/doc-tools/api/client-api/api-components","lang":"en","toc":[{"text":"NoSSR","id":"nossr","depth":2,"charIndex":3},{"text":"Tab/Tabs","id":"tab/tabs","depth":2,"charIndex":190}],"domain":"","content":"#\n\n\nNoSSR#\n\nUsed to skip the ssr for some components.For example\n\n\n\nconst Component = () => {\n  return (\n    \n      \nThe content here will only be rendered on the client side\n    \n  );\n};\n\n\n\nTab/Tabs#\n\nYou can directly use the Tab/Tabs component in the document to achieve the\neffect of tab switching. for example:\n\n\n\nfunction App() {\n  return (\n    \n      Tab 1 content\n      Tab 2 content\n    \n  );\n}\n\n\nNote\n\nIn order to make it easier for you to use these components, the\n@modern-js/doc-tools/theme package has been aliased inside the framework, so you\ncan directly use @theme to import these components.\n\nThe props type of the Tabs component is as follows:\n\ninterface TabsProps {\n  children: React.ReactNode;\n  defaultValue?: string;\n  groupId?: string;\n}\n\n\ndefaultValue is used to set the tab item selected by default. This value will be\ncompared with the value field of the Tab component props, and if they are equal,\nthe tab will be selected.\n\ngroupId is used to sync the selected tab item between multiple Tabs\ncomponents.The groups with the same groupId will be synchronized.\n\nThe props types of the Tab component are as follows:\n\ninterface TabProps {\n  label: string;\n  // Used to identify the current tab, if not passed, the default label will be used\n  value?: string;\n  children: React.ReactNode;\n}\n\n\nThe value field is used to identify the current tab, if not passed, the default\nlabel will be used.","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/api/client-api/api-components.mdx","_relativePath":"en/api/client-api/api-components.mdx"},{"id":1,"title":"Runtime API","routePath":"/doc-tools/api/client-api/api-runtime","lang":"en","toc":[{"text":"usePageData","id":"usepagedata","depth":2,"charIndex":98},{"text":"useLang","id":"uselang","depth":2,"charIndex":330},{"text":"useDark","id":"usedark","depth":2,"charIndex":526},{"text":"useI18n","id":"usei18n","depth":2,"charIndex":685},{"text":"Router Hook","id":"router-hook","depth":2,"charIndex":1257}],"domain":"","content":"#\n\nModern.js Doc exposes some runtime APIs, which is convenient for you to do some\ncustom logic.\n\n\nusePageData#\n\nGet the data of the current page, and the return value is an object, which\ncontains all the data of the current page.\n\n\n\nfunction MyComponent() {\n  const pageData = usePageData();\n  return \n{pageData.page.title};\n}\n\n\n\nuseLang#\n\nGet the current language, the return value is a string, which is the current\nlanguage.\n\n\n\nfunction MyComponent() {\n  const lang = useLang();\n  // lang === 'zh-CN'\n  return \n{lang};\n}\n\n\n\nuseDark#\n\nWhether it is dark mode currently, the return value is a boolean value.\n\n\n\nfunction MyComponent() {\n  const dark = useDark();\n  return \n{dark};\n}\n\n\n\nuseI18n#\n\nThe framework provides useI18n this hook to get the internationalized text, the\nusage is as follows:\n\n\n\nconst MyComponent = () => {\n  const { t } = useI18n();\n\n  return \n{t('getting-started')};\n};\n\n\nFor better type hinting, you can configure paths in tsconfig.json:\n\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"i18n\": [\"./i18n.json\"]\n    }\n  }\n}\n\n\nThen use it like this in the component:\n\n\n\nconst MyComponent = () => {\n  const { t } = useI18n();\n\n  return \n{t('getting-started')};\n};\n\n\nThis way you get type hints for all literal keys defined in i18n.json.\n\n\nRouter Hook#\n\nThe framework internally uses and re-exports all APIs of react-router-dom, you\ncan use it like this:\n\n\n\nfunction MyComponent() {\n  const location = useLocation();\n  return \n{location.pathname};\n}\n","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/api/client-api/api-runtime.mdx","_relativePath":"en/api/client-api/api-runtime.mdx"},{"id":2,"title":"Commands","routePath":"/doc-tools/api/commands","lang":"en","toc":[{"text":"modern dev","id":"modern-dev","depth":2,"charIndex":106},{"text":"modern build","id":"modern-build","depth":2,"charIndex":424},{"text":"modern serve","id":"modern-serve","depth":2,"charIndex":683}],"domain":"","content":"#\n\nThrough this chapter, you can learn about the built-in commands of Modern.js Doc\nand how to use them.\n\n\nmodern dev#\n\nThe modern dev command is used to start a local development server, providing a\ndevelopment environment for document preview and debugging.\n\nUsage: modern dev [options]\n\nOptions:\n   -c --config  specify config file path, which can be a relative path or an absolute path\n   -h, --help show command help\n\n\n\nmodern build#\n\nThe modern build command is used to build documentation site for production.\n\nUsage: modern build [options]\n\nOptions:\n   -c --config  specify config file path, which can be a relative path or an absolute path\n   -h, --help show command help\n\n\n\nmodern serve#\n\nThe modern serve command is used to preview the output files of the modern build\ncommand locally.\n\nUsage: modern serve [options]\n\nOptions:\n   -c --config  specify config file path, which can be a relative path or an absolute path\n   --port  specify port number\n   --host  specify host\n   -h, --help show command help\n","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/api/commands.mdx","_relativePath":"en/api/commands.mdx"},{"id":3,"title":"Basic Config","routePath":"/doc-tools/api/config/config-basic","lang":"en","toc":[{"text":"base","id":"base","depth":2,"charIndex":3},{"text":"title","id":"title","depth":2,"charIndex":274},{"text":"description","id":"description","depth":2,"charIndex":505},{"text":"icon","id":"icon","depth":2,"charIndex":756},{"text":"logo","id":"logo","depth":2,"charIndex":1091},{"text":"outDir","id":"outdir","depth":2,"charIndex":1686},{"text":"locales","id":"locales","depth":2,"charIndex":1892},{"text":"mediumZoom","id":"mediumzoom","depth":2,"charIndex":2408}],"domain":"","content":"#\n\n\nbase#\n\n * Type: string\n * Default: /\n\nDeployment base path. For example, if you plan to deploy your site to\nhttps://foo.github.io/bar/, then you should set base to \"/bar/\":\n\n\n\nexport default defineConfig({\n  doc: {\n    base: '/bar/',\n  },\n  plugins: [docTools()],\n});\n\n\n\ntitle#\n\n * Type: string\n * Default: \"Island\"\n\nSite title. This parameter will be used as the title of the HTML page. For\nexample:\n\n\n\nexport default defineConfig({\n  doc: {\n    title: 'My Site',\n  },\n  plugins: [docTools()],\n});\n\n\n\ndescription#\n\n * Type: string\n * Default: \"\"\n\nSite description. This will be used as the description of the HTML page. For\nexample:\n\n\n\nexport default defineConfig({\n  doc: {\n    description: 'My Site Description',\n  },\n  plugins: [docTools()],\n});\n\n\n\nicon#\n\n * Type: string\n * Default: \"\"\n\nSite icon. This path will be used as the icon path for the HTML page. For\nexample:\n\n\n\nexport default defineConfig({\n  doc: {\n    icon: '/favicon.ico',\n  },\n  plugins: [docTools()],\n});\n\n\nThe framework will find your icon in the public directory, of course you can\nalso set it to a CDN address.\n\n\nlogo#\n\n * Type: string | { dark: string; light: string }\n * Default: \"\"\n\nSite logo. This path will be used as the logo path in the upper left corner of\nthe navbar. For example:\n\n\n\nexport default defineConfig({\n  doc: {\n    logo: '/logo.png',\n  },\n  plugins: [docTools()],\n});\n\n\nThe framework will find your icon in the public directory, you can also set it\nto a CDN address.\n\nOf course you can set different logos for dark/light mode:\n\n\n\nexport default defineConfig({\n  doc: {\n    logo: {\n      dark: '/logo-dark.png',\n      light: '/logo-light.png',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\noutDir#\n\n * Type: string\n * Default: doc_build\n\nCustom output directory for built sites. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    outDir: 'doc_build',\n  },\n  plugins: [docTools()],\n});\n\n\n\nlocales#\n\n * Type: Locale[]\n\nexport interface Locale {\n  lang: string;\n  label: string;\n  title?: string;\n  description?: string;\n}\n\n\nI18n config of the site. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    locales: [\n      {\n        lang: 'en-US',\n        label: 'English',\n        title: 'Doc Tools',\n        description: 'Doc Tools',\n      },\n      {\n        lang: 'zh-CN',\n        label: '简体中文',\n        title: '文档框架',\n        description: '文档框架',\n      },\n    ],\n  },\n  plugins: [docTools()],\n});\n\n\n\nmediumZoom#\n\n * Type: boolean | { selector?: string }\n * Default: true\n\nWhether to enable the image zoom function. It is enabled by default, you can\ndisable it by setting mediumZoom to false.\n\n> The bottom layer is implemented using the medium-zoom library.\n\nExample usage:\n\n\n\nexport default defineConfig({\n  doc: {\n    // Turn off image zoom\n    mediumZoom: false,\n    // Configure the CSS selector to customize the picture to be zoomed, the default is '.modern-doc img'\n    mediumZoom: {\n      selector: '.modern-doc img',\n    },\n  },\n  plugins: [docTools()],\n});\n","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/api/config/config-basic.mdx","_relativePath":"en/api/config/config-basic.mdx"},{"id":4,"title":"Build Config","routePath":"/doc-tools/api/config/config-build","lang":"en","toc":[{"text":"builderConfig","id":"builderconfig","depth":2,"charIndex":3},{"text":"Default Config","id":"default-config","depth":3,"charIndex":384},{"text":"markdown","id":"markdown","depth":2,"charIndex":798},{"text":"markdown.remarkPlugins","id":"markdownremarkplugins","depth":3,"charIndex":873},{"text":"markdown.rehypePlugins","id":"markdownrehypeplugins","depth":3,"charIndex":1229},{"text":"markdown.checkDeadLinks","id":"markdowncheckdeadlinks","depth":3,"charIndex":1569},{"text":"markdown.experimentalMdxRs","id":"markdownexperimentalmdxrs","depth":3,"charIndex":2202},{"text":"markdown.showLineNumbers","id":"markdownshowlinenumbers","depth":3,"charIndex":2829}],"domain":"","content":"#\n\n\nbuilderConfig#\n\n * Type: Object\n\nUsed to customize the configurations of Modern.js Builder. For complete\nconfigurations, please refer to Modern.js Builder - API.\n\nFor example, change the output directory to doc_dist:\n\nexport default defineConfig({\n  doc: {\n    builderConfig: {\n      output: {\n        distPath: {\n          root: 'doc_dist',\n        },\n      },\n    },\n  },\n});\n\n\n\nDefault Config#\n\nIf you need to see the default builderConfig, you can add the DEBUG=builder\nparameter when running the modern dev or modern build command:\n\nDEBUG=builder modern dev\n\n\nAfter execution, the builder.config.js file is created in the doc_build\ndirectory, which contains the complete builderConfig.\n\n> Please refer to Modern.js Builder - Debug Mode for more information on how to\n> debug the Builder.\n\n\nmarkdown#\n\n * Type: Object\n\nConfigure MDX-related compilation abilities.\n\n\nmarkdown.remarkPlugins#\n\n * Type: Array\n * Default: []\n\nConfigure the remark plugins. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      remarkPlugins: [\n        [\n          require('remark-autolink-headings'),\n          {\n            behavior: 'wrap',\n          },\n        ],\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nmarkdown.rehypePlugins#\n\n * Type: Array\n\nConfigure the rehype plugin. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      rehypePlugins: [\n        [\n          require('rehype-autolink-headings'),\n          {\n            behavior: 'wrap',\n          },\n        ],\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nmarkdown.checkDeadLinks#\n\n * Type: boolean\n * Default: false\n\nWhether to check for dead links. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      checkDeadLinks: true,\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nAfter enabling this config, the framework will check the links in the document\nbased on the conventional routing table. If there is an unreachable link, the\nbuild will throw an error and exit.\n\nWARNING\n\nHowever, we do not recommend using this feature during the development\nenvironment, because it will disable the physical cache of the build tool\nwebpack, resulting in slower project startup.\n\n\nmarkdown.experimentalMdxRs#\n\n * Type: boolean\n\nWhether to use the Rust version of the MDX compiler, an experimental feature.\nFor example:\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      experimentalMdxRs: true,\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nNOTICE\n\nThe bottom layer of this function is based on the @modern-js/mdx-rs-binding\nlibrary developed by Modern.js Doc. The performance is 5 ~ 10 times higher than\nthe JS version of the MDX compiler, but the JS version of the plugin is not yet\nsupported. If you need to add a custom remark or rehype plugin, it is not\nrecommended to enable this function.\n\n\nmarkdown.showLineNumbers#\n\n * Type: boolean\n\nWhether to display the line number of the code block. Defaults to false.","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/api/config/config-build.mdx","_relativePath":"en/api/config/config-build.mdx"},{"id":5,"title":"Front Matter Config","routePath":"/doc-tools/api/config/config-frontmatter","lang":"en","toc":[{"text":"title","id":"title","depth":2,"charIndex":3},{"text":"description","id":"description","depth":2,"charIndex":279},{"text":"pageType","id":"pagetype","depth":2,"charIndex":428},{"text":"hero","id":"hero","depth":2,"charIndex":704},{"text":"features","id":"features","depth":2,"charIndex":1412},{"text":"sidebar","id":"sidebar","depth":2,"charIndex":2174},{"text":"outline","id":"outline","depth":2,"charIndex":2407},{"text":"footer","id":"footer","depth":2,"charIndex":2622}],"domain":"","content":"#\n\n\ntitle#\n\n * Type: string\n\nThe title of the page. By default, the page's h1 heading will be used as the\ntitle of the HTML document. But if you want to use a different title, you can\nuse Front Matter to specify the title of the page. For example:\n\n---\ntitle: My Home Page\n---\n\n\n\ndescription#\n\n * Type: string\n\nA custom description for the page. For example:\n\n---\ndescription: This is my custom description for this page.\n---\n\n\n\npageType#\n\n * Type: 'home' | 'doc' | 'custom' | '404'\n * Default: 'doc'\n\nThe type of page. By default, the page type is doc. But if you want to use a\ndifferent page type, you can specify the page type with something preceding\npageType. For example:\n\n---\npageType: home\n---\n\n\n\nhero#\n\n * Type: Object\n\nThe hero config for the home page. It has the following types:\n\nexport interface Hero {\n  name: string;\n  text: string;\n  tagline: string;\n  image?: {\n    src: string;\n    alt: string;\n  };\n  actions: {\n    text: string;\n    link: string;\n    theme: 'brand' | 'alt';\n  }[];\n}\n\n\nFor example, you can use the following Front Matter to specify a page's hero\nconfig:\n\n---\npageType: home\n\nhero:\n  name: Modern.js Doc\n  text: A documentation solution\n  tagline: A modern documentation development technology stack\n  actions:\n    - theme: brand\n      text: Introduction\n      link: /en/guide/introduction\n    - theme: alt\n      text: Quick Start\n      link: /en/guide/getting-started\n---\n\n\n\nfeatures#\n\n * Type: Array\n * Default: []\n\nfeatures config of the home page. It has the following types:\n\nexport interface Feature {\n  title: string;\n  details: string;\n  icon: string;\n  // The link of the feature, not required.\n  link?: string;\n}\n\nexport type Features = Feature[];\n\n\nFor example, you could use the following to specify the features configuration\nfor the home page:\n\n---\npageType: home\n\nfeatures:\n  - title: 'MDX Support'\n    details: MDX is a powerful way to write content. You can use React components in Markdown.\n    icon: 📦\n  - title: 'Feature Rich'\n    details: Out of box support for i18n, full-text search etc.\n    icon: 🎨\n  - title: 'Customizable'\n    details: You can customize the theme ui and the build process.\n    icon: 🚀\n---\n\n\n\nsidebar#\n\nWhether to show the sidebar on the left. By default, the doc page will display\nthe sidebar on the left. If you want to hide the sidebar on the left, you can\nuse the following Front Matter config:\n\n---\nsidebar: false\n---\n\n\n\noutline#\n\nWhether to display the outline column on the right. By default, the doc page\ndisplays the outline column on the right. You can hide the outline column with\nthe following config:\n\n---\noutline: false\n---\n\n\n\nfooter#\n\nWhether to display the components at the bottom of the document (such as\nprevious/next page). By default, the doc page will display the footer at the\nbottom. You can hide the footer with the following config:\n\n---\nfooter: false\n---\n","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/api/config/config-frontmatter.mdx","_relativePath":"en/api/config/config-frontmatter.mdx"},{"id":6,"title":"Theme Config","routePath":"/doc-tools/api/config/config-theme","lang":"en","toc":[{"text":"nav","id":"nav","depth":2,"charIndex":193},{"text":"sidebar","id":"sidebar","depth":2,"charIndex":1918},{"text":"footer","id":"footer","depth":2,"charIndex":3515},{"text":"outlineTitle","id":"outlinetitle","depth":2,"charIndex":3912},{"text":"lastUpdated","id":"lastupdated","depth":2,"charIndex":4178},{"text":"lastUpdatedText","id":"lastupdatedtext","depth":2,"charIndex":4445},{"text":"prevPageText","id":"prevpagetext","depth":2,"charIndex":4697},{"text":"socialLinks","id":"sociallinks","depth":2,"charIndex":4941},{"text":"nextPageText","id":"nextpagetext","depth":2,"charIndex":6866},{"text":"locales","id":"locales","depth":2,"charIndex":7095},{"text":"darkMode","id":"darkmode","depth":2,"charIndex":8156}],"domain":"","content":"#\n\nTheme config is located under themeConfig in the doc param. For example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      // ...\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nnav#\n\n * Type: Array\n * Default: []\n\nThe nav configuration is an array of NavItem with the following types:\n\ninterface NavItem {\n  // Navbar text\n  text: string;\n  // Navbar link\n  link: '/';\n  // Activation rules for navbar links\n  activeMatch: '^/$|^/';\n}\n\n\nactiveMatch is used to match the current route, when the route matches the\nactiveMatch rule, the nav item will be highlighted. By default, activeMatch is\nthe link of the nav item.\n\nFor example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nav: [\n        {\n          text: 'Home',\n          link: '/',\n        },\n        {\n          text: 'Guide',\n          link: '/guide/',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n当然 nav 数组中也可以配置多级菜单，类型如下:\n\ninterface NavGroup {\n  // 导航栏文本\n  text: string;\n  // 子菜单\n  items: NavItem[];\n}\n\n\nFor example the following configuration:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nav: [\n        {\n          text: 'Home',\n          link: '/',\n        },\n        {\n          text: 'Guide',\n          items: [\n            {\n              text: 'Getting Started',\n              link: '/guide/getting-started',\n            },\n            {\n              text: 'Advanced',\n              link: '/guide/advanced',\n            },\n            // Also support sub group menu\n            {\n              text: 'Group',\n              items: [\n                {\n                  text: 'Personal',\n                  link: 'http://xxx.com/',\n                },\n                {\n                  text: 'Company',\n                  link: 'http://xxx.com/',\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nsidebar#\n\n * Type: Object\n\nThe sidebar of the website. The config is an object with the following types:\n\n// The key is the path of SidebarGroup\n// value is an array of SidebarGroup\ntype Sidebar = Record;\n\ninterface SidebarGroup {\n  text: string;\n  link?: string;\n  items: SidebarItem[];\n  // whether to be collapsible\n  collapsible?: boolean;\n  // Whether to be collapsed by default\n  collapsed?: boolean;\n}\n\n// An object can be filled in, or a string can be filled in\n// When filling in a string, it will be converted into an object internally, the string will be used as a link, and the text value will automatically take the title of the corresponding document\ntype SidebarItem =\n  | {\n      // sidebar text\n      text: string;\n      // sidebar link\n      link: string;\n    }\n  | string;\n\n\nFor example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      sidebar: {\n        '/guide/': [\n          {\n            text: 'Getting Started',\n            items: [\n              // Fill in an object\n              {\n                text: 'Introduction',\n                link: '/guide/getting-started/introduction',\n              },\n              {\n                text: 'Installation',\n                link: '/guide/getting-started/installation',\n              },\n            ],\n          },\n          {\n            text: 'Advanced',\n            items: [\n              // Fill in the link string directly\n              '/guide/advanced/customization',\n              '/guide/advanced/markdown',\n            ],\n          },\n        ],\n      },\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nfooter#\n\n * Type: Object\n * Default: {}\n\nThe footer of the home page.\n\nThe footer config is an object of Footer, which has the following types:\n\nexport interface Footer {\n  message?: string;\n  copyright?: string;\n}\n\n\nFor example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      footer: {\n        message: 'This is a footer',\n      },\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\noutlineTitle#\n\n * Type: string\n * Default: 'ON THIS PAGE'\n\nConfigure the title of the outline in the outline panel.\n\nFor example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      outlineTitle: 'Outline',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nlastUpdated#\n\n * Type: boolean\n * Default: false\n\nWhether to display the last update time, it is not displayed by default.\n\nFor example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      lastUpdated: true,\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nlastUpdatedText#\n\n * Type: string\n * Default: Last Updated\n\nThe text of the last update time.\n\nFor example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      lastUpdatedText: 'Last Updated',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nprevPageText#\n\n * Type: string\n * Default: Previous Page\n\nThe text of the previous page. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      prevPageText: 'Previous Page',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nsocialLinks#\n\n * Type: Array\n * Default: []\n\nYou can add related links through the following config, such as github links,\ntwitter links, etc. Related links support three modes: link mode text mode image\nmode, for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      socialLinks: [\n        {\n          icon: 'github',\n          mode: 'link',\n          content: 'https://github.com/sanyuan0704/island.js',\n        },\n        {\n          icon: 'wechat',\n          mode: 'text',\n          content: 'wechat: xxx',\n        },\n        {\n          icon: 'qq',\n          mode: 'img',\n          content: '/qrcode.png',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n * When in link mode, click the icon to jump to the link.\n * When in text mode, when the mouse moves over the icon, a pop-up box will be\n   displayed, and the content of the pop-up box is the entered text\n * When in the img mode, moving the mouse over the icon will display a bullet\n   box, and the content of the bullet box is the specified picture. It should be\n   noted that the picture needs to be placed in the public directory.\n\nRelated links support the following types of images, which can be selected\nthrough the icon attribute:\n\nexport type SocialLinkIcon =\n  | 'lark'\n  | 'discord'\n  | 'facebook'\n  | 'github'\n  | 'instagram'\n  | 'linkedin'\n  | 'slack'\n  | 'twitter'\n  | 'youtube'\n  | 'weixin'\n  | 'qq'\n  | 'juejin'\n  | 'zhihu'\n  | 'bilibili'\n  | 'weibo'\n  | 'gitlab'\n  | { svg: string };\n\n\nIf you need to customize the icon, you can pass in an object with svg attribute,\nand the value of svg is the content of the custom icon, for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      socialLinks: [\n        {\n          icon: {\n            svg: 'xxx',\n          },\n          mode: 'link',\n          content: 'https://github.com/',\n        },\n      ],\n    },\n  }\n  plugins: [docTools()],·\n});\n\n\n\nnextPageText#\n\n * Type: string\n * Default: Next Page\n\nText for the next page. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nextPageText: 'Next Page',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nlocales#\n\n * Type: Array\n * Default: undefined\n\nI18n config. This config is an array, and every item of it is LocaleConfig, and\nthe types are as follows:\n\nexport interface LocaleConfig {\n  /**\n   * General locale config for site, which will have a higher priority than `doc.locales`\n   */\n  // language name\n  lang?: string;\n  // HTML title, takes precedence over `themeConfig.title\n  title?: string;\n  // HTML description, takes precedence over `themeConfig.description`\n  description?: string;\n  // Display text for the corresponding language\n  label: string;\n  /**\n   * Locale config for theme.\n   */\n  // Right outline title\n  outlineTitle?: string;\n  // Whether to display the outline title\n  outline?: boolean;\n  // Whether to display the last update time\n  lastUpdated?: boolean;\n  // Last update time text\n  lastUpdatedText?: string;\n  // Previous text\n  prevPageText?: string;\n  // Next page text\n  nextPageText?: string;\n}\n\n\nLocaleConfig contains many of the same configuration items as the theme config,\nbut the former will have a higher priority.\n\n\ndarkMode#\n\n * Type: boolean\n * Default: true\n\nWhether a Dark/Light mode toggle button appears. for example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      darkMode: true,\n    },\n  },\n  plugins: [docTools()],\n});\n","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/api/config/config-theme.mdx","_relativePath":"en/api/config/config-theme.mdx"},{"id":7,"title":"","routePath":"/doc-tools/api/","lang":"en","toc":[],"domain":"","content":"","frontmatter":{"overview":true},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/api/index.mdx","_relativePath":"en/api/index.mdx"},{"id":8,"title":"Custom Theme","routePath":"/doc-tools/guide/advanced/custom-theme","lang":"en","toc":[{"text":"Extensions based on the default theme","id":"extensions-based-on-the-default-theme","depth":2,"charIndex":60},{"text":"1. Basic structure","id":"1-basic-structure","depth":3,"charIndex":389},{"text":"2. Use slot","id":"2-use-slot","depth":3,"charIndex":1069},{"text":"3. Custom Home page and 404 page","id":"3-custom-home-page-and-404-page","depth":3,"charIndex":2353},{"text":"Redevelop a custom theme","id":"redevelop-a-custom-theme","depth":2,"charIndex":2908},{"text":"1. Basic structure","id":"1-basic-structure-1","depth":3,"charIndex":3064},{"text":"2. Runtime API","id":"2-runtime-api","depth":3,"charIndex":4317},{"text":"usePageData","id":"usepagedata","depth":4,"charIndex":4334},{"text":"useLang","id":"uselang","depth":4,"charIndex":4495},{"text":"Content","id":"content","depth":4,"charIndex":4628},{"text":"Route Hook","id":"route-hook","depth":4,"charIndex":4735}],"domain":"","content":"#\n\nThis article will tell you how to develop custom theme.\n\n\nExtensions based on the default theme#\n\nIn most cases, you don't want to develop a theme from scratch, but want to\nextend it based on the default theme. At this time, you can refer to the\nfollowing methods for theme development.\n\nTIP\n\nIf you want to develop a custom theme from scratch, you can go to Redevelop a\ncustom theme.\n\n\n1. Basic structure#\n\nBy default, you need to create a theme directory under the project root\ndirectory, and then create an index.ts or index.tsx file under the theme\ndirectory, which is used to export the theme content.\n\n├── theme\n│   └── index.tsx\n\n\nYou can write the theme/index.tsx file as follows:\n\n\n\nconst Layout = () => some content} />;\n\nexport default {\n  ...Theme,\n  Layout,\n};\n\nexport * from '@modern-js/doc-tools/theme';\n\n\nOn the one hand, you need to export a theme configuration object through export\ndefault, on the other hand, you need to export all named exported content\nthrough export * from '@modern-js/doc-tools/theme' so as to ensure your theme\nworks fine.\n\n\n2. Use slot#\n\nIt is worth noting that the Layout component has designed a series of props to\nsupport slot elements. You can use these props to extend the layout of the\ndefault theme. For example, change the above Layout component to the following\nform:\n\n\n\n// Show all props below\nconst Layout = () => (\n  beforeHero}\n    /* After home hero */\n    afterHero={\nafterHero}\n    /* Before home features */\n    beforeFeatures={\nbeforeFeatures}\n    /* After home features */\n    afterFeatures={\nafterFeatures}\n    /* Before doc footer */\n    beforeDocFooter={\nbeforeDocFooter}\n    /* Doc page front */\n    beforeDoc={\nbeforeDoc}\n    /* Doc page end */\n    afterDoc={\nafterDoc}\n    /* Before the nav bar */\n    beforeNav={\nbeforeNav}\n    /* Before the title of the nav bar in the upper left corner */\n    beforeNavTitle={😄}\n    /* After the title of the nav bar in the upper left corner\n     */\n    afterNavTitle={\nafterNavTitle}\n    /* Above the right outline column */\n    beforeOutline={\nbeforeOutline}\n    /* Below the outline column on the right */\n    afterOutline={\nafterOutline}\n    /* Top of the entire page */\n    top={\ntop}\n    /* Bottom of the entire page */\n    bottom={\nbottom}\n  />\n);\n\nexport default {\n  ...Theme,\n  Layout,\n};\n\nexport * from '@modern-js/doc-tools/theme';\n\n\n\n3. Custom Home page and 404 page#\n\nTo extend the components of the default theme, in addition to slots, you can\nalso customize the Home page and 404 page, such as:\n\n\n\nconst Layout = () => some content} />;\n\n// Custom Home Page\nconst HomeLayout = () => \nHome;\n// Custom 404 page\nconst NotFoundLayout = () => \n404;\n\nexport default {\n  ...Theme,\n  Layout,\n  HomeLayout,\n  NotFoundLayout,\n};\n\nexport * from '@modern-js/doc-tools/theme';\n\n\nOf course, you may need to use page data during the development process, you can\nget it through the Hook usePageData.\n\n\nRedevelop a custom theme#\n\nIf you're developing a custom theme from scratch, you need to understand the\nbasic structure of the theme and the runtime API.\n\n\n1. Basic structure#\n\nBy default, you need to create a theme directory under the project root\ndirectory, and then create an index.ts or index.tsx file under the theme\ndirectory, which is used to export the theme content.\n\n├── theme\n│   └── index.tsx\n\n\nIn the theme/index.tsx file, you need to export a Layout component, which is the\nentry component of your theme:\n\n// theme/index.tsx\nfunction Layout() {\n  return \nCustom Theme Layout;\n}\n\n// The setup function will be called when the page is initialized. It is generally used to monitor global events, and it can be an empty function\nconst setup = () => {};\n\n// Export Layout component and setup function\n// Note: both must export\nexport { Layout, setup };\n\n\nLayout component will be used to render the layout of the entire document site,\nyou can introduce your custom components in this component, for example:\n\n// theme/index.tsx\n\n\nfunction Layout() {\n  return (\n    \n\n      \n      \nCustom Theme Layout\n    \n  );\n}\n\nconst setup = () => {};\n\nexport { Layoutm, setup };\n\n// theme/Navbar.tsx\nexport function Navbar() {\n  return \nCustom Navbar;\n}\n\n\nSo the question is, how does the theme component get the page data and the\ncontent of the body MDX component? Next, let's take a look at the related APIs.\n\n\n2. Runtime API#\n\nusePageData#\n\nGet information about all data on the site, such as:\n\n\n\nfunction MyComponent() {\n  const pageData = usePageData();\n  return \n{pageData.title};\n}\n\n\nuseLang#\n\nGet the current language information, such as:\n\n\n\nfunction MyComponent() {\n  const lang = useLang();\n  return \n{lang};\n}\n\n\nContent#\n\nGet MDX component content, such as:\n\n\n\nfunction Layout() {\n  return (\n    \n\n      \n    \n  );\n}\n\n\nRoute Hook#\n\nreact-router-dom is used inside the framework to implement routing, so you can\ndirectly use the Hook of react-router-dom, for example:\n\n\n\nfunction Layout() {\n  const location = useLocation();\n  return \nCurrent location: {location.pathname};\n}\n","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/advanced/custom-theme.mdx","_relativePath":"en/guide/advanced/custom-theme.mdx"},{"id":9,"title":"Build Extension","routePath":"/doc-tools/guide/advanced/extend-build","lang":"en","toc":[{"text":"Modern.js Builder","id":"modernjs-builder","depth":2,"charIndex":3},{"text":"MDX Compilation","id":"mdx-compilation","depth":2,"charIndex":856}],"domain":"","content":"#\n\n\nModern.js Builder#\n\nModern.js Doc builds documents based on the Rspack mode of Modern.js Builder.\n\nModern.js Builder provides flexible build configurations, you can use\ndoc.builderConfig to customize these configurations. For example, change the\noutput directory to doc_dist:\n\n\n\nexport default defineConfig({\n  doc: {\n    builderConfig: {\n      output: {\n        distPath: {\n          root: 'doc_dist',\n        },\n      },\n      tools: {\n        rspack(options) {\n          // 修改 rspack 的配置\n        },\n      },\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nTIP\n\nYou can learn more configurations through the Modern.js Builder - API\ndocumentation.\n\nNote that Modern.js Doc only supports Rspack bundler, so some configurations\nrelated to webpack will not work, such as tools.webpack. Of course, you can use\nthe tools.rspack to customize the Rspack config.\n\n\nMDX Compilation#\n\nThe compilation of MDX in the framework is based on unified, and you can add\nrelated compilation plugins through markdown configuration. for example :\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      remarkPlugins: [\n        [\n          require('remark-autolink-headings'),\n          {\n            behavior: 'wrap',\n          },\n        ],\n      ],\n      rehypePlugins: [require('rehype-slug')],\n    },\n  },\n  plugins: [docTools()],\n});\n","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/advanced/extend-build.mdx","_relativePath":"en/guide/advanced/extend-build.mdx"},{"id":10,"title":"Auto Nav/Sidebar","routePath":"/doc-tools/guide/basic/auto-nav-sidebar","lang":"en","toc":[{"text":"Basic Concept","id":"basic-concept","depth":2,"charIndex":427},{"text":"Navbar Level Config","id":"navbar-level-config","depth":2,"charIndex":1608},{"text":"Sidebar Level Config","id":"sidebar-level-config","depth":2,"charIndex":1942},{"text":"string","id":"string","depth":3,"charIndex":2319},{"text":"obejct","id":"obejct","depth":3,"charIndex":2560},{"text":"Complete Example","id":"complete-example","depth":3,"charIndex":4088}],"domain":"","content":"#\n\nIn Modern.js Doc, in addition to declaring nav and sidebar through themeConfig\nin the config file, you You can also automatically generate the nav bar and\nsidebar by declaring the _meta.json description file. We recommend the latter\nbecause it can make the config file more concise and clear.\n\nTIP\n\nAutomated navbar/sidebar will only work if there are no nav and sidebar\nconfigurations in the config file modern.config.ts.\n\n\nBasic Concept#\n\nFirst, _meta.json can be divided into two categories: navbar level and sidebar\nlevel. The difference between the two is that the navigation-level _meta.json\nlives in the document root, while the sidebar-level _meta.json lives in a\nsubdirectory of the document root. for example:\n\ndocs\n├── _meta.json // navigation bar level\n└── guides\n    ├── _meta.json // sidebar level\n    ├── introduction.mdx\n    └── advanced\n        ├── _meta.json // sidebar level\n        └── plugin-development.md\n\n\nIf your document supports i18n, then _meta.json at the navigation bar level will\nbe placed in the corresponding language directory, for example:\n\ndocs\n├── en\n│   ├── _meta.json // navigation bar level\n│   └── guides\n│       ├── _meta.json // sidebar level\n│       ├── introduction.mdx\n│       ├── install.mdx\n│       └── advanced\n│           ├── _meta.json // sidebar level\n│           └── plugin-development.md\n└── zh\n    ├── _meta.json // navigation bar level\n    └── guides\n        ├── _meta.json // sidebar level\n        ├── introduction.mdx\n        ├── install.mdx\n        └── advanced\n            ├── _meta.json // sidebar level\n            └── plugin-development.md\n\n\n\nNavbar Level Config#\n\nIn the case of the navigation bar level, you can fill in an array in _meta.json,\nand its type is exactly the same as the nav config of the default theme. For\ndetails, please refer to nav config. for example:\n\n[\n  {\n    \"text\": \"Guide\",\n    \"link\": \"/guides/introduction\",\n    \"activeMatch\": \"^/guides/\"\n  }\n]\n\n\n\nSidebar Level Config#\n\nIn the case of the sidebar level, you can fill in _meta.json an array with each\nitem of the following type:\n\nexport type SideMetaItem =\n  | string\n  | {\n      type: 'file';\n      name: string;\n      label?: string;\n    }\n  | {\n      type: 'dir';\n      name: string;\n      label?: string;\n      collapsible?: boolean;\n      collapsed?: boolean;\n    };\n\n\n\nstring#\n\nWhen the type is string, it means that the item is a file, and the file name is\nthe string, for example:\n\n[\"introduction\"]\n\n\nThe file name may or may not have a suffix, for example introduction will be\nparsed as introduction.mdx.\n\n\nobejct#\n\nWhen the type is an object, you can describe it as a file, a directory or a\ncustom link.\n\nIn the case of describing file, the types are as follows:\n\n{\n  type: 'file';\n  name: string;\n  label?: string;\n}\n\n\nAmong them, name means the file name, with/without suffix is supported, label\nmeans the display name of the file in the sidebar.label is an optional value, if\nit is not filled, it will automatically take the h1 title in the document. For\nexample:\n\n{\n  \"type\": \"file\",\n  \"name\": \"introduction\",\n  \"label\": \"Introduction\"\n}\n\n\nIn the case of describing directories, the types are as follows:\n\n{\n  type: 'dir';\n  name: string;\n  label?: string;\n  collapsible?: boolean;\n  collapsed?: boolean;\n}\n\n\nAmong them, name indicates the directory name, label indicates the display name\nof the directory in the sidebar, collapsible indicates whether the directory can\nbe collapsed, and collapsed indicates whether the directory is collapsed by\ndefault, for example:\n\n{\n  \"type\": \"dir\",\n  \"name\": \"advanced\",\n  \"label\": \"Advanced\",\n  \"collapsible\": true,\n  \"collapsed\": false\n}\n\n\nIn the case of describing custom link, the types are as follows:\n\n{\n  type: 'custom-link';\n  link: string;\n  label: string;\n}\n\n\nAmong them, link indicates the link address, label indicates the display name of\nthe link in the sidebar, for example:\n\n{\n  \"type\": \"custom-link\",\n  \"link\": \"/my-link\",\n  \"label\": \"My Link\"\n}\n\n\nlink support external links, for example:\n\n{\n  \"type\": \"custom-link\",\n  \"link\": \"https://github.com\",\n  \"label\": \"GitHub\"\n}\n\n\n\nComplete Example#\n\nHere is a complete example using the three types above:\n\n[\n  \"install\",\n  {\n    \"type\": \"file\",\n    \"name\": \"introduction\",\n    \"label\": \"Introduction\"\n  },\n  {\n    \"type\": \"dir\",\n    \"name\": \"advanced\",\n    \"label\": \"Advanced\",\n    \"collapsible\": true,\n    \"collapsed\": false\n  },\n  {\n    \"type\": \"custom-link\",\n    \"link\": \"/my-link\",\n    \"label\": \"My Link\"\n  }\n]\n","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/basic/auto-nav-sidebar.mdx","_relativePath":"en/guide/basic/auto-nav-sidebar.mdx"},{"id":11,"title":"Conventional Route","routePath":"/doc-tools/guide/basic/conventional-route","lang":"en","toc":[{"text":"What is it?","id":"what-is-it?","depth":2,"charIndex":3},{"text":"Mapping Rules","id":"mapping-rules","depth":2,"charIndex":303},{"text":"Custom Behavior","id":"custom-behavior","depth":2,"charIndex":763},{"text":"Best Practices","id":"best-practices","depth":2,"charIndex":1180}],"domain":"","content":"#\n\n\nWhat is it?#\n\nModern.js Doc uses file system routing, and the file path of the page is simply\nmapped to the routing path, which makes the routing of the entire project very\nintuitive.\n\nFor example, if there is a file named foo.md in the docs directory, the routing\npath for that file will be /foo.\n\n\nMapping Rules#\n\nModern.js Doc automatically scans the root directory and all subdirectories, and\nmaps file paths to route paths. For example, if you have the following file\nstructure:\n\ndocs\n├── foo\n│   └── bar.md\n└── foo.md\n\n\nThen bar.md will be routed to /foo/bar, and foo.md will be routed to /foo.\n\nThe specific mapping rules are as follows:\n\nFILE PATH       ROUTE PATH\nindex.md        /\n/foo.md         /foo\n/foo/bar.md     /foo/bar\n/zoo/index.md   /zoo\n\n\nCustom Behavior#\n\nIf you want to customize the routing behavior, you can use the route field in\nthe configuration file. For example:\n\n\n\nexport default defineConfig({\n  route: {\n    // These files will be excluded from the routing (support glob pattern)\n    exclude: ['custom.tsx', 'component/**/*']\n    // These files will be included in the routing (support glob pattern)\n    include: ['other-dir/**/*'],\n  }\n});\n\n\n\nBest Practices#\n\nWe recommend that you place documentation files in the docs directory to make\nyour project more clear. For non-documentation content, such as custom\ncomponents, util functions, etc., they can be maintained outside the docs\ndirectory. For example:\n\ndocs\n└── foo.mdx\nsrc\n├── components\n│   └── CustomComponent.tsx\n└── utils\n    └── utils.ts\n","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/basic/conventional-route.mdx","_relativePath":"en/guide/basic/conventional-route.mdx"},{"id":12,"title":"Custom Global Styles","routePath":"/doc-tools/guide/basic/global-styles","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":153}],"domain":"","content":"#\n\nIn some scenarios, you may need to add some global styles based on the theme UI.\nThe framework provides a config param globalStyles to implement it.\n\n\nUsage#\n\nAdd the following config to modern.config.ts:\n\n\n\n\nexport default defineConfig({\n  doc: {\n    globalStyles: [path.join(__dirname, 'styles/index.css')],\n  },\n  plugins: [docTools()],\n});\n\n\nThen you can add the following code:\n\n/* styles/index.css */\n:root {\n  --modern-c-brand: #f00;\n}\n\n\nIn this way, the framework will automatically collect all global styles and\nmerge them into the final style file.\n\nBelow are some commonly used global styles:\n\n/* styles/index.css */\n\n:root {\n  /* Modify the theme color */\n  --modern-c-brand: #f00;\n  --modern-c-brand-dark: #ffa500;\n  --modern-c-brand-darker: #c26c1d;\n  --modern-c-brand-light: #f2a65a;\n  --modern-c-brand-lighter: #f2a65a;\n\n  /* Modify the width of the left sidebar */\n  --modern-sidebar-width: 280px;\n\n  /* Modify the width of the right outline column */\n  --modern-aside-width: 256px;\n\n  /* Modify the code block title background */\n  --modern-code-title-bg: rgba(250, 192, 61, 0.15);\n\n  /* Modify the code block content background */\n  --modern-code-block-bg: rgba(214, 188, 70, 0.05);\n}\n\n\n> If you want to know more about internal global styles, you can check vars.css.","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/basic/global-styles.mdx","_relativePath":"en/guide/basic/global-styles.mdx"},{"id":13,"title":"Static Assets","routePath":"/doc-tools/guide/basic/static-assets","lang":"en","toc":[],"domain":"","content":"#\n\nYou can import static assets in markdown (or mdx) files. Both relative and\nabsolute paths are supported. For example, if you have an image in the same\ndirectory as markdown, you can reference it like this:\n\n![](./demo.png)\n\n\nOf course, you can also directly use the img tag in .mdx files:\n\n\n\n\nModern.js Doc will automatically find the image and respond to the browser\naccording to the .mdx file path and image path.\n\nOn the other hand, static resources can also be imported using absolute paths.\nIn this way, Modern.js Doc will look for resources in the public folder under\nthe root directory of the project, which is the directory specified by the\ndoc.root field in modern.config.ts.\n\n\n\nexport default defineConfig({\n  doc: {\n    root: path.join(__dirname, 'docs'),\n  },\n});\n\n\nFor example, if the root directory is docs and the directory structure is as\nfollows:\n\ndocs\n├── public\n│   └── demo.png\n├── index.mdx\n\n\nIn the index.mdx file above, you can reference demo.png like this:\n\n![](./public/demo.png)\n\n\nOr refer to it with an absolute path:\n\n![](/demo.png)\n","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/basic/static-assets.mdx","_relativePath":"en/guide/basic/static-assets.mdx"},{"id":14,"title":"Use MDX","routePath":"/doc-tools/guide/basic/use-mdx","lang":"en","toc":[{"text":"Markdown","id":"markdown","depth":2,"charIndex":67},{"text":"Use Component","id":"use-component","depth":2,"charIndex":191},{"text":"Front Matter","id":"front-matter","depth":2,"charIndex":365},{"text":"Custom Container","id":"custom-container","depth":2,"charIndex":892},{"text":"Code Block","id":"code-block","depth":2,"charIndex":1595},{"text":"Basic Usage","id":"basic-usage","depth":3,"charIndex":1609},{"text":"Show Line Numbers","id":"show-line-numbers","depth":3,"charIndex":1887},{"text":"Line Highlighting","id":"line-highlighting","depth":3,"charIndex":2105},{"text":"Rustify MDX compiler","id":"rustify-mdx-compiler","depth":2,"charIndex":2451}],"domain":"","content":"#\n\nModern.js Doc supports MDX, a powerful way to develop content.\n\n\nMarkdown#\n\nMDX is a superset of Markdown, which means you can write Markdown files as\nusual. For example:\n\n# Hello World\n\n\n\nUse Component#\n\nWhen you want to use React components in Markdown files, you should name your\nfiles with .mdx extension. For example:\n\n// docs/index.mdx\n\n\n# Hello World\n\n\n\n\n\nFront Matter#\n\nYou can add Front Matter at the beginning of your Markdown file, which is a\nYAML-formatted object that defines some metadata. For example:\n\n---\ntitle: Hello World\n---\n\n\n> Note: By default, Modern.js Doc uses h1 headings as html headings.\n\nYou can also access properties defined in Front Matter in the body, for example:\n\n---\ntitle: Hello World\n---\n\n# {frontmatter.title}\n\n\nThe previously defined properties will be passed to the component as frontmatter\nproperties. So the final output will be:\n\n\nHello World\n\n\n\nCustom Container#\n\nYou can use the ::: syntax to create custom containers and support custom\ntitles. For example:\n\nInput:\n\n:::tip\nThis is a `block` of type `tip`\n:::\n\n:::info\nThis is a `block` of type `info`\n:::\n\n:::warning\nThis is a `block` of type `warning`\n:::\n\n:::danger\nThis is a `block` of type `danger`\n:::\n\n:::tip Custom Title\nThis is a `block` of `Custom Title`\n:::\n\n:::tip{title=\"Custom Title\"}\nThis is a `block` of `Custom Title`\n:::\n\n\nOutput:\n\nTIP\n\nThis is a block of type tip\n\nINFO\n\nThis is a block of type info\n\nWARNING\n\nThis is a block of type warning\n\nDANGER\n\nThis is a block of type danger\n\nCustom Title\n\nThis is a block of Custom Title\n\nCustom Title\n\nThis is a block of Custom Title\n\n\nCode Block#\n\n\nBasic Usage#\n\nYou can use the ``` syntax to create code blocks and support custom titles. For\nexample:\n\nInput:\n\n```js\nconsole.log('Hello World');\n```\n\n```js title=\"hello.js\"\nconsole.log('Hello World');\n```\n\n\nOutput:\n\nconsole.log('Hello World');\n\n\nconsole.log('Hello World');\n\n\n\nShow Line Numbers#\n\nIf you want to display line numbers, you can enable the showLineNumbers option\nin the config file:\n\nexport default {\n  // ...\n  doc: {\n    markdown: {\n      showLineNumbers: true,\n    },\n  },\n};\n\n\n\nLine Highlighting#\n\nYou can also apply line highlighting and code block title at the same time, for\nexample:\n\nInput:\n\n```js title=\"hello.js\" {1,3-5}\nconsole.log('Hello World');\n\nconst a = 1;\n\nconsole.log(a);\n\nconst b = 2;\n\nconsole.log(b);\n```\n\n\nOuput:\n\nconsole.log('Hello World');\n\nconst a = 1;\n\nconsole.log(a);\n\nconst b = 2;\n\nconsole.log(b);\n\n\n\nRustify MDX compiler#\n\nYou can enable Rustify MDX compiler by following config:\n\n\n\nexport default defineConfig({\n  doc: {\n    markdown: {\n      experimentalMdxRs: true,\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nNOTICE\n\nThe bottom layer of this function is based on the @modern-js/mdx-rs-binding\nlibrary developed by Modern.js Doc. The performance is 5 ~ 10 times higher than\nthe JS version of the MDX compiler, but the JS version of the plugin is not yet\nsupported. If you need to add a custom remark or rehype plugin, it is not\nrecommended to enable this function.","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/basic/use-mdx.mdx","_relativePath":"en/guide/basic/use-mdx.mdx"},{"id":15,"title":"Internal Components","routePath":"/doc-tools/guide/default-theme/components","lang":"en","toc":[{"text":"NoSSR","id":"nossr","depth":2,"charIndex":3},{"text":"Tab/Tabs","id":"tab/tabs","depth":2,"charIndex":190}],"domain":"","content":"#\n\n\nNoSSR#\n\nUsed to skip the ssr for some components.For example\n\n\n\nconst Component = () => {\n  return (\n    \n      \nThe content here will only be rendered on the client side\n    \n  );\n};\n\n\n\nTab/Tabs#\n\nYou can directly use the Tab/Tabs component in the document to achieve the\neffect of tab switching. for example:\n\n\n\nfunction App() {\n  return (\n    \n      Tab 1 content\n      Tab 2 content\n    \n  );\n}\n\n\nNote\n\nIn order to make it easier for you to use these components, the\n@modern-js/doc-tools/theme package has been aliased inside the framework, so you\ncan directly use @theme to import these components.\n\nThe props type of the Tabs component is as follows:\n\ninterface TabsProps {\n  children: React.ReactNode;\n  defaultValue?: string;\n  groupId?: string;\n}\n\n\ndefaultValue is used to set the tab item selected by default. This value will be\ncompared with the value field of the Tab component props, and if they are equal,\nthe tab will be selected.\n\ngroupId is used to sync the selected tab item between multiple Tabs\ncomponents.The groups with the same groupId will be synchronized.\n\nThe props types of the Tab component are as follows:\n\ninterface TabProps {\n  label: string;\n  // Used to identify the current tab, if not passed, the default label will be used\n  value?: string;\n  children: React.ReactNode;\n}\n\n\nThe value field is used to identify the current tab, if not passed, the default\nlabel will be used.","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/default-theme/components.mdx","_relativePath":"en/guide/default-theme/components.mdx"},{"id":16,"title":"Doc Page","routePath":"/doc-tools/guide/default-theme/doc-page","lang":"en","toc":[{"text":"Page Type","id":"page-type","depth":2,"charIndex":3},{"text":"Sidebar","id":"sidebar","depth":2,"charIndex":325},{"text":"Outline Title","id":"outline-title","depth":2,"charIndex":449},{"text":"Previous/Next Page Text","id":"previous/next-page-text","depth":2,"charIndex":679}],"domain":"","content":"#\n\n\nPage Type#\n\nYou can specify the pageType in the frontmatter metadata to use different\nlayouts in the page. By default, the pageType of the document is doc, so the\nsidebar on the left and the outline on the right will appear by default. If you\ndon't need these, you can set pageType to custom:\n\n---\npageType: custom\n---\n\n\n\nSidebar#\n\nIn modern.config.ts, you can configure the content of the sidebar, for details,\nplease refer to Sidebar Config.\n\n\nOutline Title#\n\nWith the outlineTitle config, you can set the title of the outline bar.\n\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      outlineTitle: 'ON THIS PAGE',\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nPrevious/Next Page Text#\n\nWith the prevPageText and nextPageText config, you can set the previous/next\npage text.\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      prevPageText: 'Prev Page',\n      nextPageText: 'Next Page',\n    },\n  },\n  plugins: [docTools()],\n});\n","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/default-theme/doc-page.mdx","_relativePath":"en/guide/default-theme/doc-page.mdx"},{"id":17,"title":"Home Page","routePath":"/doc-tools/guide/default-theme/home-page","lang":"en","toc":[],"domain":"","content":"#\n\nYou can define the content of the Home page through frontmatter, see FrontMatter\nConfig for detailed types. Here is a simple example:\n\n---\npageType: home\n\nhero:\n  name: Modern.js Doc\n  text: A documentation solution\n  tagline: A modern documentation development technology stack\n  actions:\n    - theme: brand\n      text: Introduction\n      link: /en/guide/introduction\n    - theme: alt\n      text: Quick Start\n      link: /en/guide/getting-started\n\nfeatures:\n  - title: 'MDX Support'\n    details: MDX is a powerful way to write content. You can use React components in Markdown.\n    icon: 📦\n  - title: 'Feature Rich'\n    details: Out of box support for i18n, full-text search etc.\n    icon: 🎨\n  - title: 'Customizable'\n    details: You can customize the theme ui and the build process.\n    icon: 🚀\n---\n","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/default-theme/home-page.mdx","_relativePath":"en/guide/default-theme/home-page.mdx"},{"id":18,"title":"Internationalization","routePath":"/doc-tools/guide/default-theme/i18n","lang":"en","toc":[{"text":"Defines I18n text data","id":"defines-i18n-text-data","depth":2,"charIndex":349},{"text":"Configure the default language","id":"configure-the-default-language","depth":2,"charIndex":1091},{"text":"Configure locales","id":"configure-locales","depth":2,"charIndex":1533},{"text":"Create documents in different language","id":"create-documents-in-different-language","depth":2,"charIndex":2805},{"text":"Configure sidebar and navbar","id":"configure-sidebar-and-navbar","depth":2,"charIndex":3447},{"text":"Use useI18n in custom components","id":"use-usei18n-in-custom-components","depth":2,"charIndex":5413}],"domain":"","content":"#\n\nTo achieve document internationalization in Modern.js Doc, you need to do the\nfollowing:\n\n * 1. Defines I18n text data.\n * 2. Configure the default language.\n * 3. Configure doc.locales and doc.themeConfig.locales。\n * 4. Create documents in different language version.\n * 5. Configure sidebar and navbar.\n * 6. Use useI18n in custom components.\n\n\nDefines I18n text data#\n\nCreate a new i18n.json in the current workspace, the directory structure is as\nfollows:\n\n.\n├── docs\n├── i18n.json\n├── package.json\n├── tsconfig.json\n└── modern.config.ts\n\n\nIn this JSON file, you can define the text needed for internationalization, the\ntype definition is as follows:\n\nexport interface I18n {\n  // key: text id\n  [key: string]: {\n    // key: language\n    [key: string]: string;\n  };\n}\n\n\nFor example:\n\n{\n  \"getting-started\": {\n    \"zh\": \"开始\",\n    \"en\": \"Getting Started\"\n  },\n  \"features\": {\n    \"zh\": \"基础功能\",\n    \"en\": \"Features\"\n  },\n  \"guide\": {\n    \"zh\": \"指南\",\n    \"en\": \"Guide\"\n  }\n}\n\n\nThese text data are used in both config file and custom components, which will\nbe introduced in detail later.\n\n\nConfigure the default language#\n\nIn modern.config.ts, you can configure the default language of the document via\ndoc.lang, as shown in the following example:\n\n\n\nexport default defineConfig({\n  doc: {\n    lang: 'zh',\n  },\n  plugins: [docTools()],\n});\n\n\nThis is important because for routes in the default language, the framework will\nremove the language prefix, such as /zh/guide/getting-started will be converted\nto /guide/getting-started.\n\n\nConfigure locales#\n\nIn modern.config.ts, you can configure locales data in two places:\n\n * doc.locales, used to configure the lang, title, description and other\n   information of the site, mainly around the information of the site itself.\n * doc.themeConfig.locales, used to configure the theme's lang, outline title,\n   previous page/next page text and other information, mainly for theme-related\n   config.\n\n\n\nexport default defineConfig({\n  doc: {\n    locales: [\n      {\n        lang: 'en',\n        // The label in nav bar to switch language\n        label: 'English',\n        title: 'Modern.js',\n        description: 'Modern.js 文档框架',\n      },\n      {\n        lang: 'zh',\n        // The label in nav bar to switch language\n        label: '简体中文',\n        title: 'Modern.js',\n        description: 'Modern.js Doc',\n      },\n    ],\n    themeConfig: {\n      locales: [\n        {\n          lang: 'en',\n          outlineTitle: 'ON THIS Page',\n        },\n        {\n          lang: 'zh',\n          outlineTitle: '大纲',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nNote\n\nIn the default theme, doc.themeConfig.locales also contains all the fields in\ndoc.locales, the former takes precedence.\n\nFor other international theme parameters, please refer to API type.\n\n\nCreate documents in different language#\n\nAfter the above configuration, we can start to create documents in different\nlanguage versions. It is very simple. We only need to create the following\nstructure in the document root directory:\n\ndocs\n├── en\n│   ├── api\n│   │   └── index.md\n│   └── guide\n│       └── getting-started.md\n│       └── features.md\n└── zh\n    ├── api\n    │   └── index.md\n    └── guide\n        └── getting-started.md\n        └── features.md\n\n\nAs you can see, we put documents in different languages in the en and zh\ndirectories under the docs directory, so that we can easily distinguish\ndocuments in different languages.\n\n\nConfigure sidebar and navbar#\n\n> If you use the Auto Nav/Sidebar method, you can skip this part.\n\nAs we mentioned in Conventional Routing, we will automatically generate\ncorresponding routes for different file paths. Then, in the scenario of\ninternationalized documents, the routing of each document is different, so for\ndocuments in N languages, do we need to write N copies of sidebar and nav bar\nconfig?\n\nThe answer is no. In the Modern.js Doc framework, you only need to write a\nconfiguration. How to do it?\n\nLet's configure the sidebar and navbar like this:\n\n\n\n// Utility function for getting type hints\nconst getI18nKey = (key: keyof typeof import('./i18n.json')) => key;\n\nexport default defineConfig({\n  doc: {\n    // The previous config is omitted\n    themeConfig: {\n      nav: [\n        {\n          text: getI18nKey('guide'),\n          link: '/guide/',\n        },\n      ],\n      sidebar: {\n        '/guide/': [\n          {\n            text: getI18nKey('getting-started'),\n            link: '/guide/getting-started',\n          },\n          {\n            text: getI18nKey('features'),\n            link: '/guide/features',\n          },\n        ],\n      },\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nIt can be seen that in the config of nav and sidebar, we mainly involve the two\nelements:\n\n * text. In the internationalization scenario, you only need to pass in the key\n   in i18n.json, and the framework will automatically obtain the corresponding\n   text according to the current language.\n * link. You don't need to add a language prefix, the framework will\n   automatically add the corresponding language prefix according to the current\n   language. For example, if the default language is Chinese, /guide/features\n   will be converted to /en/guide/features in the English document.\n\nFinally, you only need to write a nav and sidebar config, and the framework will\nautomatically obtain the corresponding text and links according to the current\nlanguage.\n\n\nUse useI18n in custom components#\n\nIn the process of MDX development or custom theme development, you may write\nsome custom components, which also need to use international text, so how to get\nit?\n\nThe framework provides useI18n this hook to get the internationalized text, the\nusage is as follows:\n\n\n\nconst MyComponent = () => {\n  const { t } = useI18n();\n\n  return \n{t('getting-started')};\n};\n\n\nFor better type hinting, you can configure paths in tsconfig.json:\n\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"i18n\": [\"./i18n.json\"]\n    }\n  }\n}\n\n\nThen use it like this in the component:\n\n\n\nconst MyComponent = () => {\n  const { t } = useI18n();\n\n  return \n{t('getting-started')};\n};\n\n\nThis way you get type hints for all literal keys defined in i18n.json.","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/default-theme/i18n.mdx","_relativePath":"en/guide/default-theme/i18n.mdx"},{"id":19,"title":"Navbar","routePath":"/doc-tools/guide/default-theme/navbar","lang":"en","toc":[{"text":"Custom Navigation Menu","id":"custom-navigation-menu","depth":2,"charIndex":200},{"text":"NavItemWithLink","id":"navitemwithlink","depth":3,"charIndex":766},{"text":"NavItemWithChildren","id":"navitemwithchildren","depth":3,"charIndex":1684},{"text":"Example","id":"example","depth":3,"charIndex":1985},{"text":"Light/Dark Mode","id":"light/dark-mode","depth":2,"charIndex":2525},{"text":"Related Links","id":"related-links","depth":2,"charIndex":2787}],"domain":"","content":"#\n\nThe navbar is very important to a website. It allows users to quickly jump\nbetween different pages of the website, and also allows users to quickly find\nsome important information of the website.\n\n\nCustom Navigation Menu#\n\nYou can add a custom navigation menu in themeConfig.nav, configured as an array,\nas follows:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nav: [],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nThe nav bar is configured as an array, and each item in the array is a NavItem\nobject, which has the following types:\n\nexport type NavItem = NavItemWithLink | NavItemWithChildren;\n\n\nThat is, each navbar element ( NavItem ) can be a link ( NavItemWithLink ), or a\nnavbar group containing child elements ( NavItemWithChildren ).\n\n\nNavItemWithLink#\n\nexport interface NavItemWithLink {\n  text: string;\n  link: string;\n  activeMatch?: string;\n  position?: 'left' | 'right';\n}\n\n\nThe meanings of the attributes are as follows:\n\n * text - Navbar text\n * link - Navbar link\n * activeMatch - Activation rule for navbar links\n * position - Navbar menu item position\n\nAttribute details:\n\nactiveMatch is used to match the current route, when the route matches the\nactiveMatch rule, the nav item will be highlighted.\n\n> By default, activeMatch is the link attribute of NavItem.\n\nposition is used to configure independent positioning of top menu items, with\nthe following options available:\n\n * left placed in the left menu bar at the top of the menu item;\n * right pplaced in the right menu bar at the top of the menu item.\n\n> If the position is not configured, it will be placed on the right menu bar by\n> default, which is equivalent to configuring right .\n\n\nNavItemWithChildren#\n\nexport interface NavItemWithChildren {\n  text: string;\n  items: NavItem[];\n  position?: 'left' | 'right';\n}\n\n\nThe meanings of the attributes are as follows:\n\n * text - Navbar text\n * items - Subnavbar elements\n * position - Navbar menu item position with child navbar elements\n\n\nExample#\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      nav: [\n        {\n          text: 'Home',\n          link: '/',\n          position: 'left',\n        },\n        {\n          text: 'Links',\n          items: [\n            {\n              text: 'Github',\n              link: 'http://github.com/',\n            },\n            {\n              text: 'Twitter',\n              link: 'http://twitter.com/',\n            },\n          ],\n          position: 'left',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nLight/Dark Mode#\n\nBy default, the navbar will have a toggle button for Light/Dark mode, you can\ndisable it with the following config:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      darkMode: false,\n    },\n  },\n  plugins: [docTools()],\n});\n\n\n\nRelated Links#\n\nSocial Links to the Site. For example:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      socialLinks: [\n        {\n          icon: 'github',\n          link: 'github.com/web-infra-dev/modern.js',\n        },\n      ],\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nFor more configurations, please refer to links.","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/default-theme/navbar.mdx","_relativePath":"en/guide/default-theme/navbar.mdx"},{"id":20,"title":"Overview Page","routePath":"/doc-tools/guide/default-theme/overview-page","lang":"en","toc":[{"text":"Effect","id":"effect","depth":2,"charIndex":3},{"text":"How to use","id":"how-to-use","depth":2,"charIndex":83},{"text":"1. Create a new directory and configure frontmatter","id":"1-create-a-new-directory-and-configure-frontmatter","depth":3,"charIndex":160},{"text":"2. Configure sidebar","id":"2-configure-sidebar","depth":3,"charIndex":452}],"domain":"","content":"#\n\n\nEffect#\n\nModern.js Doc has a built-in preview page, the effect is as follows:\n\n\nHow to use#\n\nGenerating the preview page requires the following two steps:\n\n\n1. Create a new directory and configure frontmatter#\n\nFor example, create the following directories and files\n\n├── docs\n│   ├── index.md\n│   ├── api\n│   │   ├── index.md\n│   │   ├── preview1.md\n│   │   └── preview2.md\n// ...\n\n\nWe add the following to api/index.md:\n\n---\noverview: true\n---\n\n\n\n2. Configure sidebar#\n\nThe structure of the overview page will be generated based on the config of the\nsidebar. For example, we add the following sidebar config:\n\n\n\nexport default defineConfig({\n  doc: {\n    themeConfig: {\n      sidebar: {\n        '/api/': [\n          {\n            text: 'Group1',\n            items: [\n              // Note: Documents need to be created in advance\n              '/api/foo',\n              '/api/bar',\n            ],\n          },\n          {\n            text: 'Group2',\n            items: ['/api/xxx', '/api/yyy'],\n          },\n        ],\n      },\n    },\n  },\n  plugins: [docTools()],\n});\n\n\nThe framework will extract all the files under the api directory and the h1 and\nh2 titles in them, and generate a overview page according to the group info in\nthe sidebar config.","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/default-theme/overview-page.mdx","_relativePath":"en/guide/default-theme/overview-page.mdx"},{"id":21,"title":"Quick Start","routePath":"/doc-tools/guide/start/getting-started","lang":"en","toc":[{"text":"1. Initialize the project","id":"1-initialize-the-project","depth":2,"charIndex":3},{"text":"Method 1: Create via CLI","id":"method-1:-create-via-cli","depth":3,"charIndex":32},{"text":"Method 2: Manual Creation","id":"method-2:-manual-creation","depth":3,"charIndex":315},{"text":"2. Start Dev Server","id":"2-start-dev-server","depth":2,"charIndex":1129},{"text":"3. Build in Production","id":"3-build-in-production","depth":2,"charIndex":1231},{"text":"4. Preview in local environment","id":"4-preview-in-local-environment","depth":2,"charIndex":1402}],"domain":"","content":"#\n\n\n1. Initialize the project#\n\n\nMethod 1: Create via CLI#\n\nYou can create a Modern.js Doc project using the Modern.js scaffold command:\n\n# `modern-doc-app` is the project name\nnpx @modern-js/create@latest modern-doc-app\n\n\nSelect Doc Site type and then select the package manager to complete the project\ncreation.\n\n\nMethod 2: Manual Creation#\n\nFirst, you can create a new directory with the following command:\n\nmkdir modern-doc-app && cd modern-doc-app\n\n\nExecute npm init -y to initialize a project. You can install Modern.js Doc using\nnpm, yarn or pnpm:\n\nThen create the file with the following command\n\nmkdir docs && echo '# Hello World' > docs/index.md\n\n\nAdd the following script to package.json:\n\n{\n  \"scripts\": {\n    \"dev\": \"modern dev\",\n    \"build\": \"modern build\",\n    \"preview\": \"modern preview\"\n  }\n}\n\n\nThen initialize a configuration file modern.config.ts:\n\n\n\n\nexport default defineConfig({\n  doc: {\n    root: path.join(__dirname, 'docs'),\n  },\n  plugins: [docTools()],\n});\n\n\nAnd then create tsconfig.json, add the following config:\n\n{\n  \"compilerOptions\": {\n    \"esModuleInterop\": true,\n    \"jsx\": \"react-jsx\"\n  }\n}\n\n\n\n2. Start Dev Server#\n\nStart the local development service with the following command:\n\nnpm run dev\n\n\n\n3. Build in Production#\n\nBuild the production bundle with the following command :\n\nnpm run build\n\n\nBy default, Modern.js Doc will set doc_build as the output directory.\n\n\n4. Preview in local environment#\n\nStart the local preview service with the following command:\n\nnpm run preview\n","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/start/getting-started.mdx","_relativePath":"en/guide/start/getting-started.mdx"},{"id":22,"title":"Introduction","routePath":"/doc-tools/guide/start/introduction","lang":"en","toc":[{"text":"Position","id":"position","depth":2,"charIndex":3},{"text":"Features","id":"features","depth":2,"charIndex":742},{"text":"Support MDX","id":"support-mdx","depth":3,"charIndex":754},{"text":"Support Full-Text Search","id":"support-full-text-search","depth":3,"charIndex":1012},{"text":"Support I18n","id":"support-i18n","depth":3,"charIndex":1137},{"text":"Code Block Syntax Highlighting","id":"code-block-syntax-highlighting","depth":3,"charIndex":1290},{"text":"Support Custom Theme","id":"support-custom-theme","depth":3,"charIndex":1552},{"text":"Support Plugin System","id":"support-plugin-system","depth":3,"charIndex":1703}],"domain":"","content":"#\n\n\nPosition#\n\nModern.js Doc is a front-end framework for document site scenarios, and its goal\nis to provide developers with a simple, efficient, and scalable document site\nsolution.\n\nThe original intention of this document framework is to provide a ducument\nsolution for the company's internal technical products, and to meet some special\ninternal needs, such as cross-site search service. However, for common document\nsite building needs, we have also provided relatively complete support, such as\nsupport for i18n, full-text search, custom themes, and so on.\n\nAt the same time, the framework is based on Rspack which is a Rust-based build\ntool.So it has a very fast build speed, and take you only a few seconds to build\na document site.\n\n\nFeatures#\n\n\nSupport MDX#\n\nModern.js Doc is based on MDX to extend the Markdown syntax.It supports the use\nof React components in Markdown, and supports the use of JSX syntax in Markdown,\nwhich is more flexible in syntax.\n\nPlease refer to the syntax details in Use MDX\n\n\nSupport Full-Text Search#\n\nBased on the FlexSearch search engine, it provides out-of-the-box document\nsearch capabilities.\n\n\nSupport I18n#\n\nBuilt-in i18n support, supports multi-language switching, and supports\nmulti-language content search.You can refer to I18n for details.\n\n\nCode Block Syntax Highlighting#\n\nBased on Shiki for compile-time code coloring, it supports multiple code\nlanguage highlighting. For example:\n\n\n\n\nexport default defineConfig({\n  doc: {\n    root: path.join(__dirname, 'docs'),\n  },\n  plugins: [docTools()],\n});\n\n\n\nSupport Custom Theme#\n\nSupports custom themes, which can be customized through configuration files,\nplease refer to Theme Customization for details.\n\n\nSupport Plugin System#\n\nYou can extend the abilities of Modern.js Doc through custom plugins. For\ndetails, please refer to Plugin System.","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/guide/start/introduction.mdx","_relativePath":"en/guide/start/introduction.mdx"},{"id":24,"title":"总览","routePath":"/doc-tools/plugin/official-plugins/","lang":"en","toc":[],"domain":"","content":"#","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/plugin/official-plugins/index.mdx","_relativePath":"en/plugin/official-plugins/index.mdx"},{"id":25,"title":"medium-zoom","routePath":"/doc-tools/plugin/official-plugins/medium-zoom","lang":"en","toc":[],"domain":"","content":"#\n\n🚧 建设中","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/plugin/official-plugins/medium-zoom.mdx","_relativePath":"en/plugin/official-plugins/medium-zoom.mdx"},{"id":26,"title":"Introduction","routePath":"/doc-tools/plugin/system/introduction","lang":"en","toc":[],"domain":"","content":"#\n\nThe plugin system is a crucial part of Modern.js Doc, which allows you to easily\nextend the abilities of the framework during the process of building a site. So,\nwhat ability can you extend with plugins? Let's take a look at the overall\narchitecture of Modern.js first.\n\nThe overall architecture of Modern.js Doc is shown in the figure below:\n\n\n\nThe overall framework is divided into two parts: Node Side and Browser Runtime.\nThrough the plugin system, you can easily extend the abilities of these two\nparts. Specifically, you can extend the ability to:\n\n * Markdown/MDX compilation。You can add remark/rehype plugins to extend the\n   compliation ability of Markdown/MDX.\n * Add custom page. On the basis of the framework's conventional routing, you\n   can also add new routes through plugins, such as adding a /blog route to\n   display a list of blogs, and the content is defined by yourself.\n * Custom build tool behavior.In the framework plugin, you can customize the\n   config of the underlying build tool Rspack, such as define, alias, and you\n   can also add custom Rspack plugins.\n * Extend page metadata. For each page, some metadata will be calculated inside\n   the framework, such as title, description, etc. You can extend the\n   calculation logic of these metadata through plugins, and pass usePageData\n   hook access.\n * Insert some custom logic before and after the build process. Such as closing\n   some event listeners after the build process ends.\n * Add global components. Modern.js Doc internally uses React for rendering. You\n   can flexibly extend the runtime page by defining global React components,\n   such as adding a global BackToTop (return to top) component, adding a global\n   side effect logic.","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/plugin/system/introduction.mdx","_relativePath":"en/plugin/system/introduction.mdx"},{"id":27,"title":"Plugin API","routePath":"/doc-tools/plugin/system/plugin-api","lang":"en","toc":[{"text":"globalStyles","id":"globalstyles","depth":3,"charIndex":202},{"text":"globalUIComponents","id":"globaluicomponents","depth":3,"charIndex":867},{"text":"Add global UI components","id":"add-global-ui-components","depth":4,"charIndex":1545},{"text":"Register global side effects","id":"register-global-side-effects","depth":4,"charIndex":1775},{"text":"builderConfig","id":"builderconfig","depth":3,"charIndex":2452},{"text":"config","id":"config","depth":3,"charIndex":3213},{"text":"beforeBuild/afterBuild","id":"beforebuild/afterbuild","depth":3,"charIndex":3679},{"text":"markdown","id":"markdown","depth":3,"charIndex":4484},{"text":"extendPageData","id":"extendpagedata","depth":3,"charIndex":5156},{"text":"addPages","id":"addpages","depth":3,"charIndex":5681}],"domain":"","content":"#\n\nIn the previous section, we introduced the basic structure of the plugin. In\nthis section, we will introduce the API of the plugin to help you understand the\nabilities of the plugin in more detail.\n\n\nglobalStyles#\n\n * Type：string\n\nIt is used to add a global style, and the absolute path of a style file is\npassed in, and the usage is as follows:\n\n\n\n\nexport function pluginForDoc(): DocPlugin {\n  // style path\n  const stylePath = path.join(__dirname, 'some-style.css');\n  return {\n    // plugin name\n    name: 'plugin-name',\n    globalStyles: path.join(__dirname, 'global.css'),\n  };\n}\n\n\nFor example, if you want to modify the theme color, you can do so by adding a\nglobal style:\n\n:root {\n  --modern-c-brand: #ffa500;\n  --modern-c-brand-dark: #ffa500;\n  --modern-c-brand-darker: #c26c1d;\n  --modern-c-brand-light: #f2a65a;\n  --modern-c-brand-lighter: #f2a65a;\n}\n\n\n\nglobalUIComponents#\n\n * Type：string[]\n\nIt is used to add global components, passing in an array, each item in the array\nis the absolute path of a component, the usage is as follows:\n\n\n\nexport function pluginForDoc(): DocPlugin {\n  // component path\n  const componentPath = path.join(__dirname, 'xxx.tsx');\n  return {\n    // plugin name\n    name: 'plugin-comp',\n    // Path to global components\n    globalUIComponents: [componentPath],\n  };\n}\n\n\nWhen you register global components, the framework will automatically render\nthese React components in the theme without manually importing and using them.\n\nThrough global components, you can complete many custom functions, such as:\n\nAdd global UI components#\n\n\n\n// Need a default export\nexport default function PluginUI() {\n  return \n这是一个全局的布局组件;\n}\n\n\nIn this way, the content of the component will be rendered in the theme page,\nsuch as adding BackToTop button.\n\nRegister global side effects#\n\n\n\n\n// Need a default export\nexport default function PluginSideEffect() {\n  const { pathname } = useLocation();\n  useEffect(() => {\n    // Executed when the component renders for the first time\n  }, []);\n\n  useEffect(() => {\n    // Executed when the route changes\n  }, [pathname]);\n  return null;\n}\n\n\nThis way, side effects of components are executed in the theme page. For\nexample, some of the following scenarios require side effects:\n\n * Redirect for certain page routes.\n * Bind click event on the img tag of the page to implement the image zoom\n   function.\n * When the route changes, the PV data of different pages are reported.\n * ......\n\n\nbuilderConfig#\n\n * Type：BuilderConfig\n\nThe bottom layer of Modern.js Doc is based on the Rspack mode of Modern.js\nBuilder for document build process. The Builder can be configured through\nbuilderConfig. For specific configuration items, please refer to Modern.js\nBuilder.\n\n> Of course, if you want to configure Rspack directly, you can also configure it\n> through buildConfig.tools.rspack.\n\n\n\nexport function pluginForDoc(slug: string): DocPlugin {\n  return {\n    name: 'plugin-name',\n    // Global variable definitions for build phase\n    builderConfig: {\n      source: {\n        define: {\n          SLUG: JSON.stringify(slug),\n        },\n      },\n      tools: {\n        rspack(options) {\n          // Modify rspack config\n        },\n      },\n    },\n  };\n}\n\n\n\nconfig#\n\n * Type：(config: DocConfig) => DocConfig | Promise\n\nIt is used to modify/extend the configuration of Modern.js Doc itself. For\nexample, if you want to modify the title of the document, you can do it through\nconfig:\n\n\n\nexport function pluginForDoc(): DocPlugin {\n  return {\n    name: 'plugin-name',\n    // Extend the config of the Modern.js Doc itself\n    config(config) {\n      return {\n        ...config,\n        title: '新的文档标题',\n      };\n    },\n  };\n}\n\n\n\nbeforeBuild/afterBuild#\n\n * Type：(config: DocConfig, isProd: boolean) => void | Promise\n\nIt is used to perform some operations before/after the document is built. The\nfirst parameter is the config of the document, and the second parameter is\nwhether it is currently a production environment. The usage is as follows:\n\n\n\nexport function pluginForDoc(): DocPlugin {\n  return {\n    name: 'plugin-name',\n    // Hook to execute before build\n    async beforeBuild(config, isProd) {\n      // Do something here\n    },\n    // Hook to execute after build\n    async afterBuild(config, isProd) {\n      // Do something here\n    },\n  };\n}\n\n\nTIP\n\nWhen the beforeBuild hook is executed, the config plugins of all plugins have\nbeen processed, so the config parameter already represents the final document\nconfiguration.\n\n\nmarkdown#\n\n * Type：{ remarkPlugins?: Plugin[]; rehypePlugins?: Plugin[] }\n\nIt is used to extend the compilation ability of Markdown/MDX. If you want to add\ncustom remark/rehype plug-ins, you can use\nmarkdown.remarkPlugins/markdown.rehypePlugins to achieve:\n\n\n\nexport function pluginForDoc(): DocPlugin {\n  return {\n    name: 'plugin-name',\n    markdown: {\n      remarkPlugins: [\n        // Add custom remark plugin\n      ],\n      rehypePlugins: [\n        // Add custom rehype plugin\n      ],\n    },\n  };\n}\n\n\nWARNING\n\nWhen mdx-rs compilation is enabled (that is, doc.markdown.experimentalMdxRs is\ntrue in the config file), the added remark/rehype plugin will be ignored.\n\n\nextendPageData#\n\n * Type: (pageData: PageData) => void | Promise\n\n\n\nexport function pluginForDoc(): DocPlugin {\n  return {\n    name: 'plugin-name',\n    // Extend the page data\n    extendPageData(pageData) {\n      // You can add or modify properties on the pageData object\n      pageData.a = 1;\n    },\n  };\n}\n\n\nAfter extending the page data, you can access the page data through the\nusePageData hook in the theme.\n\n\n\nexport function MyComponent() {\n  const { page } = usePageData();\n  // page.a === 1\n  return \n{page.a};\n}\n\n\n\naddPages#\n\n * Type: (config: UserConfig) => AddtionalPage[] | Promise\n\nThe config parameter is the doc config of modern.config.ts, and the\nAddtionalPage type is defined as follows:\n\ninterface AddtionalPage {\n  routePath: string;\n  filepath?: string;\n  content?: string;\n}\n\n\nUsed to add additional pages, you can return an array in the addPages function,\neach item in the array is a page config, you can specify the route of the page\nthrough routePath, through filepath or content to specify the content of the\npage. For example:\n\n\n\n\nexport function docPluginDemo(): DocPlugin {\n  return {\n    name: 'add-pages',\n    addPages() {\n      return [\n        //  Support the absolute path of the real file (filepath), which will read the content of md(x) in the disk\n        {\n          routePath: '/filepath-route',\n          filepath: path.join(__dirname, 'blog', 'index.md'),\n        },\n        //  Support to directly pass in the content of md(x) through the content parameter\n        {\n          routePath: '/content-route',\n          content: '# Demo2',\n        },\n      ];\n    },\n  };\n}\n\n\naddPages accepts three parameters, config is the config of the current document\nsite, isProd indicates whether it is a production environment, routes is an\narray of conventional routes, and the structure of each routing information is\nas follows:\n\nexport interface RouteMeta {\n  routePath: string;\n  // file absolute path\n  absolutePath: string;\n  // The page name, as part of the chunk filename\n  pageName: string;\n  // language of current route\n  lang: string;\n}\n\n\nHint\n\nThe addPages hook is executed before the Rspack build tool is started. In\naddition to returning the custom page, you can also get the routing information\nin this hook and complete some operations.","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/plugin/system/plugin-api.mdx","_relativePath":"en/plugin/system/plugin-api.mdx"},{"id":28,"title":"Write a plugin","routePath":"/doc-tools/plugin/system/write-a-plugin","lang":"en","toc":[{"text":"1. Define a plugin","id":"1-define-a-plugin","depth":3,"charIndex":88},{"text":"2. Use a plugin","id":"2-use-a-plugin","depth":3,"charIndex":1081}],"domain":"","content":"#\n\nLet's inject a global component as an example to see how to define and use\nplugins.\n\n\n1. Define a plugin#\n\n\n\nexport function pluginMonitor(slug: string): DocPlugin {\n  // Component path, you need to implement the content of the component yourself\n  const componentPath = path.join(__dirname, 'Example.tsx');\n  return {\n    name: 'plugin-monitor',\n    // Path to global components\n    globalUIComponents: [componentPath],\n    // Global variable definitions for build phase\n    builderConfig: {\n      source: {\n        define: {\n          'process.env.SLUG': JSON.stringify(slug),\n        },\n      },\n    },\n  };\n}\n\n\n\n\nconst Example = () => {\n  console.log(process.env.SLUG);\n  return \nExample;\n};\n\nexport default Example;\n\n\nA plugin is generally a function that receives some plugin params (optional) and\nreturns an object that contains the name of the plugin and other config.\n\nIn the above example, we define a plugin named plugin-example, which will define\na global environment variable slug during the build phase, and inject a global\ncomponent Example.tsx in the document.\n\n\n2. Use a plugin#\n\nRegister plugins via doc.plugins in modern.config.ts:\n\n\n\nexport default {\n  doc: {\n    plugins: [pluginMonitor('test')],\n  },\n};\n\n\nThen the Example component will be injected into the page and we can access the\nslug variable in the component.","frontmatter":{},"_filepath":"/home/runner/work/modern.js/modern.js/packages/document/doc-tools-doc/docs/en/plugin/system/write-a-plugin.mdx","_relativePath":"en/plugin/system/write-a-plugin.mdx"}]