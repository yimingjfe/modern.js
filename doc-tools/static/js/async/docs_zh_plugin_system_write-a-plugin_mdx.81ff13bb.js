(self.webpackChunk_modern_js_doc_tools_doc=self.webpackChunk_modern_js_doc_tools_doc||[]).push([["docs_zh_plugin_system_write-a-plugin_mdx"],{95731:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e,n){for(var r in n)Object.defineProperty(e,r,{enumerable:!0,get:n[r]})}(n,{frontmatter:function(){return o},title:function(){return c},toc:function(){return i},default:function(){return a}});var s=r("9880"),t=r("23169"),o={},c="编写一个插件",i=[{text:"1. 定义插件",depth:3,id:"1-定义插件"},{text:"2. 使用插件",depth:3,id:"2-使用插件"}];function l(e){var n=Object.assign({h1:"h1",a:"a",p:"p",h3:"h3",pre:"pre",code:"code"},(0,t.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"编写一个插件",children:["编写一个插件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编写一个插件",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"我们以注入一个全局组件为例，来看看如何定义和使用插件。"}),"\n",(0,s.jsxs)(n.h3,{id:"1-定义插件",children:["1. 定义插件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-定义插件",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",meta:'title="plugin.ts"',children:"import { DocPlugin } from '@modern-js/doc-tools';\n\nexport function pluginExample(slug: string): DocPlugin {\n  // 组件路径，组件的内容你需要自己实现\n  const componentPath = path.join(__dirname, 'Example.tsx');\n  return {\n    // 插件名称\n    name: 'plugin-example',\n    // 全局组件的路径\n    globalUIComponents: [componentPath],\n    // 构建阶段的全局变量定义\n    builderConfig: {\n      source: {\n        define: {\n          'process.env.slug': JSON.stringify(slug),\n        },\n      },\n    },\n  };\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",meta:'title="Example.tsx"',children:"import React from 'react';\n\nconst Example = () => {\n  console.log(process.env.SLUG);\n  return <div>Example</div>;\n};\n\nexport default Example;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["插件一般为一个函数，接收一些插件参数(可选)，返回一个对象，对象中包含插件的名称以及其它配置。在上面的例子中，我们定义了一个插件，它的名称为",(0,s.jsx)(n.code,{children:"plugin-example"}),"，它会在构建阶段定义一个全局变量",(0,s.jsx)(n.code,{children:"slug"}),"，并且在文档中注入一个全局组件",(0,s.jsx)(n.code,{children:"Example.tsx"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-使用插件",children:["2. 使用插件",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-使用插件",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"modern.config.ts"})," 中通过 ",(0,s.jsx)(n.code,{children:"doc.plugins"})," 注册插件:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",meta:'title="modern.config.ts"',children:"import { pluginExample } from './plugin';\n\nexport default {\n  doc: {\n    plugins: [pluginExample('test')],\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这样，Example 组件会自动在页面中渲染，并且我们可以在 Example 组件中访问到",(0,s.jsx)(n.code,{children:"process.env.slug"}),"。"]})]})}var a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,t.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(l,e)})):l(e)}}}]);