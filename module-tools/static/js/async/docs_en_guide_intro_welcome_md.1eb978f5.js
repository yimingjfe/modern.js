(self.webpackChunk_modern_js_module_tools_docs=self.webpackChunk_modern_js_module_tools_docs||[]).push([["docs_en_guide_intro_welcome_md"],{67077:function(e,o,n){"use strict";Object.defineProperty(o,"__esModule",{value:!0});!function(e,o){for(var n in o)Object.defineProperty(e,n,{enumerable:!0,get:o[n]})}(o,{frontmatter:function(){return s},toc:function(){return i},title:function(){return l},default:function(){return d}});var r=n("9880"),t=n("23169"),s={sidebar_position:1},i=[],l="Welcome to Module Tools";function a(e){var o=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",strong:"strong",code:"code"},(0,t.useMDXComponents)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(o.h1,{id:"welcome-to-module-tools",children:[(0,r.jsx)(o.a,{className:"header-anchor","aria-hidden":"true",href:"#welcome-to-module-tools",children:"#"}),"Welcome to Module Tools"]}),"\n",(0,r.jsx)(o.p,{children:"Module Tools is a modules engineering solution for Modern.js, as well as a core dependency. It allows developers to build, debug, and publish module type project more easily. A module type project can mostly be thought of as an npm package type project, which may be a component, component library or tool library project."}),"\n",(0,r.jsx)(o.p,{children:"If you are planning to develop a project of the npm package type, then you came to the right place! Modern.js provides a professional module engineering solution. It gives you:"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"Simple project initialization"}),": simply execute the ",(0,r.jsx)(o.code,{children:"npx @modern-js/create project-dir"})," command, followed by a few interactive questions, to create a complete module type project. The created project also supports the choice of two package managers, ",(0,r.jsx)(o.a,{href:"https://pnpm.io/",target:"_blank",rel:"noopener noreferrer",children:(0,r.jsx)(o.strong,{children:"pnpm"})})," and ",(0,r.jsx)(o.a,{href:"https://classic.yarnpkg.com/",target:"_blank",rel:"noopener noreferrer",children:(0,r.jsx)(o.strong,{children:"Yarn"})}),"."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"Code formatting"}),": In a module project, you can execute ",(0,r.jsx)(o.code,{children:"modern lint"})," to format the code. The initialized module project includes the ",(0,r.jsx)(o.a,{href:"https://eslint.org/docs/latest/user-guide/core-concepts#what-is-eslint",target:"_blank",rel:"noopener noreferrer",children:"ESLint"})," ruleset for Modern.js for most scenarios."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"Comprehensive build capabilities and faster builds"}),": Module Tools provides high-performance build capabilities based on ",(0,r.jsx)(o.a,{href:"https://esbuild.github.io/getting-started/",target:"_blank",rel:"noopener noreferrer",children:"esbuild"})," and ",(0,r.jsx)(o.a,{href:"https://swc.rs/",target:"_blank",rel:"noopener noreferrer",children:"SWC"}),", and provides rich configurations for different build scenarios."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"Storybook debugging tools"}),": Module Tools provides ",(0,r.jsx)(o.a,{href:"https://storybook.js.org/",target:"_blank",rel:"noopener noreferrer",children:"Storybook"})," debugging tools for debugging module projects. After installing the Storybook plugin for Module Tools, you can start it with the ",(0,r.jsx)(o.code,{children:"modern dev storybook"})," command. You can use Storybook not only for debugging components, but also for other types of modules."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"Testing capabilities with Jest"}),": When you need to test a module, you can use the ",(0,r.jsx)(o.code,{children:"modern test"})," command of Module Tools, which not only integrates with ",(0,r.jsx)(o.a,{href:"https://jestjs.io/",target:"_blank",rel:"noopener noreferrer",children:"Jest"}),", but also provides an API for configuring ",(0,r.jsx)(o.a,{href:"https://jestjs.io/docs/configuration",target:"_blank",rel:"noopener noreferrer",children:"Jest"}),"."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"Versioning based on Changesets"}),": When you need to record changes to a project, you can use the ",(0,r.jsx)(o.code,{children:"modern change"})," command to generate a Markdown file containing the changes; when you need to upgrade a project, you can use the ",(0,r.jsx)(o.code,{children:"modern bump"})," command to analyze and upgrade the version through the Markdown file; when you need to release a project, you can use the ",(0,r.jsx)(o.code,{children:"modern release"})," command to release the project; Module Tools implements these commands based on ",(0,r.jsx)(o.a,{href:"https://github.com/changesets/changesets",target:"_blank",rel:"noopener noreferrer",children:"Changesets"}),"."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"Extensible plug-in mechanism"}),": Want to integrate additional debugging tools for your project? Or maybe you want to do some extra processing during the build process, Module Tools provides a plugin mechanism and plugin hooks that cover both the ",(0,r.jsx)(o.code,{children:"dev"})," command and the ",(0,r.jsx)(o.code,{children:"build"})," command process. You can use them to extend the capabilities of your project."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"Lots more!"})," Module Tools will continue to optimize its build and debug features in the future. If there are important issues to be solved in module project building, or if a mainstream module project debugging tool or pattern emerges, then they will probably be supported by Module Tools."]}),"\n"]})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=Object.assign({},(0,t.useMDXComponents)(),e.components).wrapper;return o?(0,r.jsx)(o,Object.assign({},e,{children:(0,r.jsx)(a,e)})):a(e)}}}]);