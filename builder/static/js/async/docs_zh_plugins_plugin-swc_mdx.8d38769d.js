(self.webpackChunk_modern_js_builder_doc=self.webpackChunk_modern_js_builder_doc||[]).push([["docs_zh_plugins_plugin-swc_mdx"],{88882:function(e,n,s){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e,n){for(var s in n)Object.defineProperty(e,s,{enumerable:!0,get:n[s]})}(n,{frontmatter:function(){return c},title:function(){return t},toc:function(){return a},default:function(){return h}});var r=s("9880"),i=s("23169"),l=s.ir(s("82117")),d=s.ir(s("53164")),c={},t="SWC 插件",a=[{text:"适用场景",depth:2,id:"适用场景"},{text:"Rspack 场景",depth:3,id:"rspack-场景"},{text:"Babel 插件",depth:3,id:"babel-插件"},{text:"产物体积",depth:3,id:"产物体积"},{text:"快速开始",depth:2,id:"快速开始"},{text:"在 Modern.js 框架中使用",depth:3,id:"在-modernjs-框架中使用"},{text:"通过 Node API 使用",depth:3,id:"通过-node-api-使用"},{text:"安装插件",depth:4,id:"安装插件"},{text:"注册插件",depth:4,id:"注册插件"},{text:"配置",depth:2,id:"配置"},{text:"presetReact",depth:3,id:"presetreact"},{text:"presetEnv",depth:3,id:"presetenv"},{text:"jsMinify",depth:3,id:"jsminify"},{text:"cssMinify",depth:3,id:"cssminify"},{text:"extensions",depth:3,id:"extensions"},{text:"extensions.reactUtils",depth:4,id:"extensionsreactutils"},{text:"extensions.lodash",depth:4,id:"extensionslodash"},{text:"extensions.styledComponents",depth:4,id:"extensionsstyledcomponents"},{text:"extensions.emotion",depth:4,id:"extensionsemotion"},{text:"extensions.pluginImport",depth:4,id:"extensionspluginimport"},{text:"限制",depth:2,id:"限制"}];function o(e){var n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",ul:"ul",li:"li",code:"code",h4:"h4",pre:"pre",strong:"strong",div:"div"},(0,i.useMDXComponents)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"swc-插件",children:["SWC 插件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#swc-插件",children:"#"})]}),"\n","\n",(0,r.jsx)(l.default,{}),"\n",(0,r.jsxs)(n.h2,{id:"适用场景",children:["适用场景",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#适用场景",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在使用 SWC 插件之前，请先了解一下 SWC 插件的适用场景和局限性，以明确你的项目是否需要使用 SWC 插件。"}),"\n",(0,r.jsxs)(n.h3,{id:"rspack-场景",children:["Rspack 场景",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rspack-场景",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"如果你的项目中已经使用了 Rspack 作为打包工具，那么你不需要接入 SWC 插件，因为 Rspack 默认会使用 SWC 进行转译和压缩，各个 SWC 编译能力可以开箱即用。"}),"\n",(0,r.jsxs)(n.h3,{id:"babel-插件",children:["Babel 插件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#babel-插件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"如果你的项目需要注册一些自定义的 Babel 插件，由于 SWC 替代了 Babel 作为转译工具，因此使用 SWC 后，你将无法注册和使用 Babel 插件。"}),"\n",(0,r.jsx)(n.p,{children:"对于大部分常见的 Babel 插件，你可以在 SWC 中找到对应的替代品，比如："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@babel/preset-env"}),": 使用 ",(0,r.jsx)(n.a,{href:"#presetenv",children:"presetEnv"})," 代替。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@babel/preset-react"}),": 使用 ",(0,r.jsx)(n.a,{href:"#presetreact",children:"presetReact"})," 代替。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"babel-plugin-import"}),"：使用 ",(0,r.jsx)(n.a,{href:"/api/config-source#sourcetransformimport",children:"source.transformImport"})," 代替。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"babel-plugin-lodash"}),"：使用 ",(0,r.jsx)(n.a,{href:"#extensionslodash",children:"extensions.lodash"})," 代替。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@emotion/babel-plugin"}),"：使用 ",(0,r.jsx)(n.a,{href:"#extensionsemotion",children:"extensions.emotion"})," 代替。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"babel-plugin-styled-components"}),"：使用 ",(0,r.jsx)(n.a,{href:"#extensionsstyledcomponents",children:"extensions.styledComponents"})," 代替。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@babel/plugin-react-transform-remove-prop-types"}),": 使用 ",(0,r.jsx)(n.a,{href:"#extensionsreactutils",children:"reactUtils.removePropTypes"})," 代替。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["如果你使用了 SWC 尚未支持的 Babel 插件能力，在切换到 SWC 编译后，将无法再使用它们。你可以到 ",(0,r.jsx)(n.a,{href:"https://github.com/web-infra-dev/swc-plugins",target:"_blank",rel:"noopener noreferrer",children:"swc-plugins"})," 仓库下通过 issues 进行反馈，我们会评估是否需要内置支持。"]}),"\n",(0,r.jsxs)(n.h3,{id:"产物体积",children:["产物体积",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#产物体积",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在使用 SWC 来代替 ",(0,r.jsx)(n.a,{href:"https://github.com/terser/terser",target:"_blank",rel:"noopener noreferrer",children:"terser"})," 和 ",(0,r.jsx)(n.a,{href:"https://github.com/cssnano/cssnano",target:"_blank",rel:"noopener noreferrer",children:"cssnano"})," 进行代码压缩时，构建产物的体积可能会出现少量变化。在 JavaScript 代码压缩方面，SWC 的压缩率是优于 terser 的；在 CSS 代码压缩方面，SWC 的压缩率稍逊于 cssnano。"]}),"\n",(0,r.jsxs)(n.p,{children:["对于压缩工具之间的详细对比，可以参考 ",(0,r.jsx)(n.a,{href:"https://github.com/privatenumber/minification-benchmarks",target:"_blank",rel:"noopener noreferrer",children:"minification-benchmarks"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"快速开始",children:["快速开始",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#快速开始",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"在-modernjs-框架中使用",children:["在 Modern.js 框架中使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#在-modernjs-框架中使用",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Modern.js 框架对 Builder 的 SWC 插件进行了封装，你可以通过以下方式来使用："}),"\n","\n",(0,r.jsx)(d.default,{}),"\n",(0,r.jsxs)(n.h3,{id:"通过-node-api-使用",children:["通过 Node API 使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#通过-node-api-使用",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"如果你直接使用了 Builder 的 Node API，那么需要手动安装和注册 Builder 的 SWC 插件。"}),"\n",(0,r.jsxs)(n.h4,{id:"安装插件",children:["安装插件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装插件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"你可以通过如下的命令安装插件:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# npm\nnpm install @modern-js/builder-plugin-swc -D\n\n# yarn\nyarn add @modern-js/builder-plugin-swc -D\n\n# pnpm\npnpm add @modern-js/builder-plugin-swc -D\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"注册插件",children:["注册插件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注册插件",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["通过 ",(0,r.jsx)(n.code,{children:"addPlugins"})," 方法来注册 SWC 插件："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { builderPluginSwc } from '@modern-js/builder-plugin-swc';\n\n// 往 builder 实例上添加插件\nbuilder.addPlugins([builderPluginSwc()]);\n"})}),"\n",(0,r.jsx)(n.p,{children:"That's it! 现在你可以在项目中无缝使用 SWC 的转译和压缩能力了。"}),"\n",(0,r.jsxs)(n.h2,{id:"配置",children:["配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type PluginConfig = {\n  presetReact?: ReactConfig;\n  presetEnv?: EnvConfig;\n  jsMinify?: boolean | JsMinifyOptions;\n  cssMinify?: boolean | CssMinifyOptions;\n  extensions?: Extensions;\n};\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"presetreact",children:["presetReact",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#presetreact",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型："})," SWC 中的 ",(0,r.jsx)(n.a,{href:"https://swc.rs/docs/configuration/compilation#jsctransformreact",target:"_blank",rel:"noopener noreferrer",children:"presetReact"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["对标 ",(0,r.jsx)(n.code,{children:"@babel/preset-react"}),"。传入的值会与默认配置进行合并。"]}),"\n",(0,r.jsxs)(n.p,{children:["插件默认会自动根据你的 ",(0,r.jsx)(n.code,{children:"react"})," 版本确定 ",(0,r.jsx)(n.code,{children:"runtime"})," 字段，如果 ",(0,r.jsx)(n.code,{children:"react"})," 版本大于 17.0.0，会设置成 ",(0,r.jsx)(n.code,{children:"automatic"}),"，否则设置成 ",(0,r.jsx)(n.code,{children:"classic"}),"。"]}),"\n",(0,r.jsxs)(n.h3,{id:"presetenv",children:["presetEnv",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#presetenv",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型："})," SWC 中的 ",(0,r.jsx)(n.a,{href:"https://swc.rs/docs/configuration/supported-browsers#options",target:"_blank",rel:"noopener noreferrer",children:"presetEnv"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["对标 ",(0,r.jsx)(n.code,{children:"@babel/preset-env"}),"。传入的值会与默认配置进行合并。\n默认配置为:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"{\n  targets: '', // 自动从项目中获取 browserslist\n  mode: 'usage',\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"jsminify",children:["jsMinify",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jsminify",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型："})," ",(0,r.jsx)(n.code,{children:"boolean"})," 或者 ",(0,r.jsx)(n.a,{href:"https://terser.org/docs/api-reference.html#compress-options",target:"_blank",rel:"noopener noreferrer",children:"terser 中的 compress 配置"}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"默认值："})," ",(0,r.jsx)(n.code,{children:"{ compress: {}, mangle: true }"}),"。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["如果配置 ",(0,r.jsx)(n.code,{children:"false"})," 将不会使用 SWC 的压缩能力，配置 ",(0,r.jsx)(n.code,{children:"true"})," 会启用默认压缩配置，如果配置是对象，则会与默认配置进行合并。"]}),"\n",(0,r.jsxs)(n.h3,{id:"cssminify",children:["cssMinify",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cssminify",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型："})," ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"默认值："})," ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"是否启用 SWC 对 CSS 文件进行压缩，若启用会使得 CSS 压缩性能提高，但压缩率会略微降低。"}),"\n",(0,r.jsxs)(n.h3,{id:"extensions",children:["extensions",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#extensions",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型："})," ",(0,r.jsx)(n.code,{children:"Object"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"extensions"})," 包含了从 Babel 移植过来的一些插件能力。"]}),"\n",(0,r.jsxs)(n.h4,{id:"extensionsreactutils",children:["extensions.reactUtils",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#extensionsreactutils",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type ReactUtilsOptions = {\n  autoImportReact?: boolean;\n  removeEffect?: boolean;\n  removePropTypes?: {\n    mode?: 'remove' | 'unwrap' | 'unsafe-wrap';\n    removeImport?: boolean;\n    ignoreFilenames?: string[];\n    additionalLibraries?: string[];\n    classNameMatchers?: string[];\n  };\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["一些用于 ",(0,r.jsx)(n.code,{children:"React"})," 的工具，包括以下配置项:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"reactUtils.autoImportReact"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型："})," ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["自动引入 ",(0,r.jsx)(n.code,{children:"React"}),", ",(0,r.jsx)(n.code,{children:"import React from 'react'"}),"，用于 ",(0,r.jsx)(n.code,{children:"jsx"})," 转换使用 ",(0,r.jsx)(n.code,{children:"React.createElement"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"reactUtils.removeEffect"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"类型："})," ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["移除 ",(0,r.jsx)(n.code,{children:"useEffect"})," 调用。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"reactUtils.removePropTypes"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type RemovePropTypesOptions = {\n  mode?: 'remove' | 'unwrap' | 'unsafe-wrap';\n  removeImport?: boolean;\n  ignoreFilenames?: string[];\n  additionalLibraries?: string[];\n  classNameMatchers?: string[];\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["移除 ",(0,r.jsx)(n.code,{children:"React"})," 组件在运行时的类型判断。移植自 ",(0,r.jsx)(n.a,{href:"https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types",target:"_blank",rel:"noopener noreferrer",children:"@babel/plugin-react-transform-remove-prop-types"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["相应配置和 ",(0,r.jsx)(n.code,{children:"@babel/plugin-react-transform-remove-prop-types"})," 插件保持一致。"]}),"\n",(0,r.jsxs)(n.h4,{id:"extensionslodash",children:["extensions.lodash",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#extensionslodash",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type LodashOptions = {\n  cwd?: string;\n  ids?: string[];\n};\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"默认值："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const defaultOptions = {\n  cwd: process.cwd(),\n  ids: ['lodash', 'lodash-es'],\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["移植自 ",(0,r.jsx)(n.a,{href:"https://github.com/lodash/babel-plugin-lodash",target:"_blank",rel:"noopener noreferrer",children:"babel-plugin-lodash"}),"，用于自动将 Lodash 的引用转换为按需引入，从而减少打包后的 Lodash 代码大小。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Input\nimport { get, throttle } from 'lodash';\n\n// Output\nimport get from 'lodash/get';\nimport throttle from 'lodash/throttle';\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"extensionsstyledcomponents",children:["extensions.styledComponents",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#extensionsstyledcomponents",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'boolean | {\n  displayName?: boolean; // 默认开发模式开启, 生产模式关闭,\n  ssr?: boolean; // 默认开启\n  fileName?: boolean; // 默认开启\n  topLevelImportPaths?: string[]; // 默认空\n  meaninglessFileNames?: string[]; // 默认为 ["index"].\n  cssProp?: boolean; // 默认开启\n  namespace?: string; // 默认空\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["由 Next.js 团队移植自 ",(0,r.jsx)(n.a,{href:"https://github.com/styled-components/babel-plugin-styled-components",target:"_blank",rel:"noopener noreferrer",children:"babel-plugin-styled-components"}),"。"]}),"\n",(0,r.jsxs)(n.h4,{id:"extensionsemotion",children:["extensions.emotion",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#extensionsemotion",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"boolean | {\n  sourceMap?: boolean, // 默认开启\n  autoLabel?: 'never' | 'dev-only' | 'always', // 默认 'dev-only'\n  // 默认 '[local]'.\n  // 允许的值为: `[local]` `[filename]` 以及 `[dirname]`\n  // 只有当 autoLabel 设置成 'dev-only' 或者 'always' 才会生效.\n  // 该配置允许你定义结果标签的格式，该格式的组成是字符串以及可以由方括号包裹字符串作为变量\n  // 例如对于 \"my-classname--[local]\"，其中的 [local] 会被替换成相应的变量\n  labelFormat?: string,\n  // 默认值 undefined.\n  // 该配置允许让编译器知道哪一个引入需要进行转换，所以如果你重导出了 emotion\n  // 的导出，你仍然可以使用该插件进行转换\n  importMap?: {\n    [packageName: string]: {\n      [exportName: string]: {\n        canonicalImport?: [string, string],\n        styledBaseImport?: [string, string],\n      }\n    }\n  },\n},\n"})}),"\n",(0,r.jsxs)(n.p,{children:["由 Next.js 团队移植自 ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/@emotion/babel-plugin",target:"_blank",rel:"noopener noreferrer",children:"@emotion/babel-plugin"}),"。"]}),"\n",(0,r.jsxs)(n.h4,{id:"extensionspluginimport",children:["extensions.pluginImport",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#extensionspluginimport",children:"#"})]}),"\n",(0,r.jsxs)(n.div,{className:"modern-directive tip",children:[(0,r.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,r.jsx)(n.div,{className:"modern-directive-content",children:(0,r.jsxs)(n.p,{children:["Builder 提供了 ",(0,r.jsx)(n.a,{href:"/api/config-source#sourcetransformimport",children:"source.transformImport"})," 配置项，因此你不需要手动配置 ",(0,r.jsx)(n.code,{children:"extensions.pluginImport"}),"。\n"]})})]}),"\n",(0,r.jsxs)(n.p,{children:["移植自 ",(0,r.jsx)(n.a,{href:"https://github.com/umijs/babel-plugin-import",target:"_blank",rel:"noopener noreferrer",children:"babel-plugin-import"}),"，配置选项保持一致。"]}),"\n",(0,r.jsxs)(n.p,{children:["一些配置可以传入函数，例如 ",(0,r.jsx)(n.code,{children:"customName"}),"，",(0,r.jsx)(n.code,{children:"customStyleName"})," 等，这些 JavaScript 函数会由 Rust 通过 Node-API 调用，这种调用会造成一些性能劣化。"]}),"\n",(0,r.jsxs)(n.p,{children:["简单的函数逻辑其实可以通过模版语言来代替，因此",(0,r.jsx)(n.code,{children:"customName"}),"，",(0,r.jsx)(n.code,{children:"customStyleName"})," 等这些配置除了可以传入函数，也可以传入字符串作为模版来代替函数，提高性能。"]}),"\n",(0,r.jsx)(n.p,{children:"我们以下面代码为例说明:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { MyButton as Btn } from 'foo';\n"})}),"\n",(0,r.jsx)(n.p,{children:"添加以下配置："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"PluginSWC({\n  extensions: {\n    pluginImport: [\n      {\n        libraryName: 'foo',\n        customName: 'foo/es/{{ member }}',\n      },\n    ],\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["其中的 ",(0,r.jsx)(n.code,{children:"{{ member }}"})," 会被替换为相应的引入成员，转换后:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import Btn from 'foo/es/MyButton';\n"})}),"\n",(0,r.jsxs)(n.p,{children:["可以看出配置 ",(0,r.jsx)(n.code,{children:'customName: "foo/es/{{ member }}"'})," 的效果等同于配置 ",(0,r.jsx)(n.code,{children:" customName: (member) => `foo/es/${member}`  "}),"，但是不会有 Node-API 的调用开销。"]}),"\n",(0,r.jsxs)(n.p,{children:["这里使用到的模版是 ",(0,r.jsx)(n.a,{href:"https://handlebarsjs.com",target:"_blank",rel:"noopener noreferrer",children:"handlebars"}),"，模版配置中还内置了一些有用的辅助工具，还是以上面的导入语句为例，配置成："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"PluginSWC({\n  extensions: {\n    pluginImport: [\n      {\n        libraryName: 'foo',\n        customName: 'foo/es/{{ kebabCase member }}',\n      },\n    ],\n  },\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"会转换成下面的结果:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import Btn from 'foo/es/my-button';\n"})}),"\n",(0,r.jsxs)(n.p,{children:["除了 ",(0,r.jsx)(n.code,{children:"kebabCase"})," 以外还有 ",(0,r.jsx)(n.code,{children:"camelCase"}),"，",(0,r.jsx)(n.code,{children:"snakeCase"}),"，",(0,r.jsx)(n.code,{children:"upperCase"}),"，",(0,r.jsx)(n.code,{children:"lowerCase"})," 可以使用。"]}),"\n",(0,r.jsxs)(n.h2,{id:"限制",children:["限制",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#限制",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["不支持 ",(0,r.jsx)(n.code,{children:"@babel/plugin-transform-runtime"})," 以及其他自定义的 Babel 插件。"]})]})}var h=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,i.useMDXComponents)(),e.components).wrapper;return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(o,e)})):o(e)}},53164:function(e,n,s){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return d}});var r=s("9880"),i=s("23169");function l(e){var n=Object.assign({p:"p",code:"code",pre:"pre"},(0,i.useMDXComponents)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["首先，你需要执行 ",(0,r.jsx)(n.code,{children:"pnpm run new"})," 启用 SWC 编译："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"? 请选择你想要的操作 启用可选功能\n? 请选择功能名称 启用「SWC 编译」\n"})}),"\n",(0,r.jsxs)(n.p,{children:["执行完成后，你只需在 ",(0,r.jsx)(n.code,{children:"modern.config.ts"})," 文件中注册 Modern.js 的 SWC 插件，即可启用 SWC 编译和压缩能力。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"import appTools, { defineConfig } from '@modern-js/app-tools';\nimport swcPlugin from '@modern-js/plugin-swc';\n\nexport default defineConfig({\n  plugins: [appTools(), swcPlugin()],\n});\n"})})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,i.useMDXComponents)(),e.components).wrapper;return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(l,e)})):l(e)}},82117:function(e,n,s){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return d}});var r=s("9880"),i=s("23169");function l(e){var n=Object.assign({p:"p",a:"a",code:"code"},(0,i.useMDXComponents)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://swc.rs/",target:"_blank",rel:"noopener noreferrer",children:"SWC"})," (Speedy Web Compiler) 是基于 ",(0,r.jsx)(n.code,{children:"Rust"})," 语言编写的高性能 JavaScript 和 TypeScript 转译和压缩工具。在 Polyfill 和语法降级方面可以和 Babel 提供一致的能力，并且性能比 Babel 高出一个数量级。"]}),"\n",(0,r.jsx)(n.p,{children:"Modern.js Builder 提供了开箱即用的 SWC 插件，可以为你的 Web 应用提供语法降级、Polyfill 以及压缩，并且移植了一些额外常见的 Babel 插件。"})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,i.useMDXComponents)(),e.components).wrapper;return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(l,e)})):l(e)}}}]);