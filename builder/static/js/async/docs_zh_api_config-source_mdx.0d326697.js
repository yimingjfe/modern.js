(self.webpackChunk_modern_js_builder_doc=self.webpackChunk_modern_js_builder_doc||[]).push([["docs_zh_api_config-source_mdx"],{3239:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e,n){for(var r in n)Object.defineProperty(e,r,{enumerable:!0,get:n[r]})}(n,{frontmatter:function(){return m},title:function(){return g},toc:function(){return f},default:function(){return v}});var s=r("9880"),c=r("23169"),i=r.ir(r("26698")),d=r.ir(r("17879")),l=r.ir(r("74299")),o=r.ir(r("86548")),a=r.ir(r("9336")),t=r.ir(r("8845")),h=r.ir(r("20090")),j=r.ir(r("50403")),x=r.ir(r("68246")),u=r.ir(r("31868")),p=r.ir(r("92300")),m={extractApiHeaders:[2]},g="Source Config",f=[{text:"source.alias",depth:2,id:"sourcealias"},{text:"source.include",depth:2,id:"sourceinclude"},{text:"source.exclude",depth:2,id:"sourceexclude"},{text:"source.compileJsDataURI",depth:2,id:"sourcecompilejsdatauri"},{text:"source.define",depth:2,id:"sourcedefine"},{text:"source.globalVars",depth:2,id:"sourceglobalvars"},{text:"source.moduleScopes",depth:2,id:"sourcemodulescopes"},{text:"source.transformImport",depth:2,id:"sourcetransformimport"},{text:"source.preEntry",depth:2,id:"sourcepreentry"},{text:"source.resolveExtensionPrefix",depth:2,id:"sourceresolveextensionprefix"},{text:"source.resolveMainFields",depth:2,id:"sourceresolvemainfields"}];function b(e){var n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"source-config",children:["Source Config",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#source-config",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"本章节描述了 Builder 中与源代码解析、编译方式相关的配置。"}),"\n",(0,s.jsxs)(n.h2,{id:"sourcealias",children:["source.alias",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourcealias",children:"#"})]}),"\n","\n",(0,s.jsx)(i.default,{}),"\n",(0,s.jsxs)(n.h2,{id:"sourceinclude",children:["source.include",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourceinclude",children:"#"})]}),"\n","\n",(0,s.jsx)(d.default,{}),"\n",(0,s.jsxs)(n.h2,{id:"sourceexclude",children:["source.exclude",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourceexclude",children:"#"})]}),"\n","\n",(0,s.jsx)(l.default,{}),"\n",(0,s.jsxs)(n.h2,{id:"sourcecompilejsdatauri",children:["source.compileJsDataURI",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourcecompilejsdatauri",children:"#"})]}),"\n","\n",(0,s.jsx)(o.default,{}),"\n",(0,s.jsxs)(n.h2,{id:"sourcedefine",children:["source.define",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourcedefine",children:"#"})]}),"\n","\n",(0,s.jsx)(a.default,{}),"\n",(0,s.jsxs)(n.h2,{id:"sourceglobalvars",children:["source.globalVars",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourceglobalvars",children:"#"})]}),"\n","\n",(0,s.jsx)(t.default,{}),"\n",(0,s.jsxs)(n.h2,{id:"sourcemodulescopes",children:["source.moduleScopes",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourcemodulescopes",children:"#"})]}),"\n","\n",(0,s.jsx)(h.default,{}),"\n",(0,s.jsxs)(n.h2,{id:"sourcetransformimport",children:["source.transformImport",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourcetransformimport",children:"#"})]}),"\n","\n",(0,s.jsx)(j.default,{}),"\n",(0,s.jsxs)(n.h2,{id:"sourcepreentry",children:["source.preEntry",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourcepreentry",children:"#"})]}),"\n","\n",(0,s.jsx)(x.default,{}),"\n",(0,s.jsxs)(n.h2,{id:"sourceresolveextensionprefix",children:["source.resolveExtensionPrefix",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourceresolveextensionprefix",children:"#"})]}),"\n","\n",(0,s.jsx)(u.default,{}),"\n",(0,s.jsxs)(n.h2,{id:"sourceresolvemainfields",children:["source.resolveMainFields",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourceresolvemainfields",children:"#"})]}),"\n","\n",(0,s.jsx)(p.default,{})]})}var v=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(b,e)})):b(e)}},26698:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return d}});var s=r("9880"),c=r("23169");function i(e){var n=Object.assign({ul:"ul",li:"li",strong:"strong",code:"code",p:"p",a:"a",div:"div",h4:"h4",pre:"pre"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"Record<string, string | string[]> | Function"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["设置文件引用的别名，对应 webpack 的 ",(0,s.jsx)(n.a,{href:"https://webpack.js.org/configuration/resolve/#resolvealias",target:"_blank",rel:"noopener noreferrer",children:"resolve.alias"})," 配置。"]}),"\n",(0,s.jsxs)(n.div,{className:"modern-directive tip",children:[(0,s.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,s.jsx)(n.div,{className:"modern-directive-content",children:(0,s.jsxs)(n.p,{children:["对于 TypeScript 项目，只需要在 ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," 中配置 ",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/tsconfig#paths",target:"_blank",rel:"noopener noreferrer",children:"compilerOptions.paths"})," 即可，Builder 会自动识别 ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," 里的别名，因此不需要额外配置 ",(0,s.jsx)(n.code,{children:"alias"})," 字段。\n"]})})]}),"\n",(0,s.jsxs)(n.h4,{id:"object-类型",children:["Object 类型",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#object-类型",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"alias"})," 的值可以定义为 Object 类型，其中的相对路径会自动被 Builder 转换为绝对路径。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    alias: {\n      '@common': './src/common',\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["以上配置完成后，如果在代码中引用 ",(0,s.jsx)(n.code,{children:"@common/Foo.tsx"}),", 则会映射到 ",(0,s.jsx)(n.code,{children:"<root>/src/common/Foo.tsx"})," 路径上。"]}),"\n",(0,s.jsxs)(n.h4,{id:"function-类型",children:["Function 类型",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#function-类型",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"alias"})," 的值定义为函数时，可以接受预设的 alias 对象，并对其进行修改。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    alias: alias => {\n      alias['@common'] = './src/common';\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"也可以在函数中返回一个新对象作为最终结果，新对象会覆盖预设的 alias 对象。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    alias: alias => {\n      return {\n        '@common': './src/common',\n      };\n    },\n  },\n};\n"})})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},86548:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return d}});var s=r("9880"),c=r("23169");function i(e){var n=Object.assign({ul:"ul",li:"li",strong:"strong",code:"code",p:"p",pre:"pre",h3:"h3",a:"a"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"该选项用于控制是否编译 data URI 中的 JavaScript 代码。"}),"\n",(0,s.jsx)(n.p,{children:"默认情况下，Builder 会使用 Babel 或 SWC 对 data URI 中的代码进行编译。比如以下代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import x from 'data:text/javascript,export default 1;';\n\nimport 'data:text/javascript;charset=utf-8;base64,Y29uc29sZS5sb2coJ2lubGluZSAxJyk7';\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"示例",children:["示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"添加以下配置来关闭："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    compileJsDataURI: false,\n  },\n};\n"})})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},9336:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return d}});var s=r("9880"),c=r("23169");function i(e){var n=Object.assign({ul:"ul",li:"li",strong:"strong",code:"code",p:"p",a:"a",div:"div",h3:"h3",pre:"pre"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"Record<string, unknown>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"{}"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"构建时将代码中的变量替换成其它值或者表达式，可以用于在代码逻辑中区分开发环境与生产环境等场景。"}),"\n",(0,s.jsxs)(n.p,{children:["传入的配置对象的键名是需要替换变量的名称，或者是用 ",(0,s.jsx)(n.code,{children:"."})," 连接的多个标识符，配置项的值则根据类型进行不同的处理："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"字符串会被当作代码片段。"}),"\n",(0,s.jsx)(n.li,{children:"包括函数在内的其他类型会被转换成字符串。"}),"\n",(0,s.jsxs)(n.li,{children:["嵌套对象的父子键名之间会用 ",(0,s.jsx)(n.code,{children:"."})," 连接作为需要替换的变量名。"]}),"\n",(0,s.jsx)(n.li,{children:"以 typeof 开头的键名会用来替换 typeof 调用。"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["更多细节参考 ",(0,s.jsx)(n.a,{href:"https://webpack.js.org/plugins/define-plugin/",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)(n.a,{href:"https://webpack.js.org/plugins/define-plugin/",target:"_blank",rel:"noopener noreferrer",children:"https://webpack.js.org/plugins/define-plugin/"})}),"。"]}),"\n",(0,s.jsxs)(n.div,{className:"modern-directive tip",children:[(0,s.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,s.jsx)(n.div,{className:"modern-directive-content",children:(0,s.jsxs)(n.p,{children:["在使用 Rspack 作为打包工具时，支持的类型可参考 ",(0,s.jsx)(n.a,{href:"https://www.rspack.dev/zh/config/builtins.html#builtinsdefine",target:"_blank",rel:"noopener noreferrer",children:"Rspack.builtins.define"}),"\n"]})})]}),"\n",(0,s.jsxs)(n.h3,{id:"示例",children:["示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    define: {\n      PRODUCTION: JSON.stringify(true),\n      VERSION: JSON.stringify('5fa3b9'),\n      BROWSER_SUPPORTS_HTML5: true,\n      TWO: '1 + 1',\n      'typeof window': JSON.stringify('object'),\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n      'import.meta': { test: undefined },\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"表达式会被替换为对应的代码段："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const foo = TWO;\n\n// ⬇️ Turn into being...\nconst foo = 1 + 1;\n"})})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},74299:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return d}});var s=r("9880"),c=r("23169");function i(e){var n=Object.assign({ul:"ul",li:"li",strong:"strong",code:"code",p:"p",a:"a",div:"div",pre:"pre"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"Array<string | RegExp>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"[]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"打包工具："})," ",(0,s.jsx)(n.code,{children:"仅支持 webpack"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["指定不需要编译的 JavaScript/TypeScript 文件。用法与 webpack 中的 ",(0,s.jsx)(n.a,{href:"https://webpack.js.org/configuration/module/#ruleexclude",target:"_blank",rel:"noopener noreferrer",children:"Rule.exclude"})," 一致，支持传入字符串或正则表达式来匹配模块的路径。"]}),"\n",(0,s.jsxs)(n.div,{className:"modern-directive tip",children:[(0,s.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,s.jsx)(n.div,{className:"modern-directive-content",children:(0,s.jsxs)(n.p,{children:["在使用 Rspack 作为打包工具时，默认",(0,s.jsx)(n.strong,{children:"所有文件"}),"都会经过编译，同时，不支持通过 ",(0,s.jsx)(n.code,{children:"source.exclude"})," 排除。\n"]})})]}),"\n",(0,s.jsx)(n.p,{children:"比如:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import path from 'path';\n\nexport default {\n  source: {\n    exclude: [path.resolve(__dirname, 'src/module-a'), /src\\/module-b/],\n  },\n};\n"})})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},8845:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return d}});var s=r("9880"),c=r("23169");function i(e){var n=Object.assign({ul:"ul",li:"li",strong:"strong",code:"code",pre:"pre",p:"p",h3:"h3",a:"a"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"Record<string, JSONValue> | Function"})]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"默认值："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Builder 默认会添加环境变量 `process.env.NODE_ENV`，因此你不需要手动添加它。\nconst defaultGlobalVars = {\n  'process.env.NODE_ENV': process.env.NODE_ENV,\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["用于在构建时将类似 ",(0,s.jsx)(n.code,{children:"process.env.FOO"})," 的全局变量表达式替换为指定的值，比如："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"console.log(process.env.NODE_ENV);\n\n// ⬇️ Turn into being...\nconsole.log('development');\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"示例",children:["示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在下方示例中，会在代码中注入 ",(0,s.jsx)(n.code,{children:"ENABLE_VCONSOLE"})," 和 ",(0,s.jsx)(n.code,{children:"APP_CONTEXT"})," 两个环境变量："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    globalVars: {\n      ENABLE_VCONSOLE: true,\n      APP_CONTEXT: { answer: 42 },\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"你可以在代码中直接使用它们："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"if (ENABLE_VCONSOLE) {\n  // do something\n}\n\nconsole.log(APP_CONTEXT);\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"函数用法",children:["函数用法",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数用法",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type GlobalVarsFn = (\n  obj: Record<string, JSONValue>,\n  utils: { env: NodeEnv; target: BuilderTarget },\n) => Record<string, JSONValue> | void;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["你可以将 ",(0,s.jsx)(n.code,{children:"source.globalVars"})," 设置为一个函数，从而动态设置一些环境变量的值。"]}),"\n",(0,s.jsx)(n.p,{children:"比如，根据当前的构建产物类型进行动态设置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    globalVars(obj, { target }) {\n      obj['MY_TARGET'] = target === 'node' ? 'server' : 'client';\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"与-define-的区别",children:["与 define 的区别",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#与-define-的区别",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"source.globalVars"})," 是 ",(0,s.jsx)(n.code,{children:"source.define"})," 的一个语法糖，它们之间唯一的区别是，",(0,s.jsx)(n.code,{children:"source.globalVars"})," 会自动将传入的值进行 JSON 序列化处理，这使得设置全局变量的值更加方便。注意 ",(0,s.jsx)(n.code,{children:"globalVars"})," 的每个值都需要是可以被 JSON 序列化的值。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    globalVars: {\n      'process.env.BUILD_VERSION': '0.0.1',\n      'import.meta.foo': { bar: 42 },\n      'import.meta.baz': false,\n    },\n    define: {\n      'process.env.BUILD_VERSION': JSON.stringify('0.0.1'),\n      'import.meta': {\n        foo: JSON.stringify({ bar: 42 }),\n        baz: JSON.stringify(false),\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"注意事项",children:["注意事项",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注意事项",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"source.globalVars"})," 是通过字符串替换的形式来注入环境变量的，因此它无法对「解构赋值」等动态写法生效。"]}),"\n",(0,s.jsxs)(n.p,{children:["在使用解构赋值时，Builder 将无法判断变量 ",(0,s.jsx)(n.code,{children:"NODE_ENV"})," 是否与要替换的表达式 ",(0,s.jsx)(n.code,{children:"process.env.NODE_ENV"})," 存在关联，因此以下使用方式是无效的："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const { NODE_ENV } = process.env;\nconsole.log(NODE_ENV);\n// ❌ Won't get a string.\n"})})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},17879:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return d}});var s=r("9880"),c=r("23169");function i(e){var n=Object.assign({ul:"ul",li:"li",strong:"strong",code:"code",p:"p",a:"a",pre:"pre",div:"div",h3:"h3"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"Array<string | RegExp>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"[]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"打包工具："})," ",(0,s.jsx)(n.code,{children:"仅支持 webpack"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"出于编译性能的考虑，默认情况下，Builder 不会编译 node_modules 下的 JavaScript/TypeScript 文件，也不会编译当前工程目录外部的 JavaScript/TypeScript 文件。"}),"\n",(0,s.jsxs)(n.p,{children:["通过 ",(0,s.jsx)(n.code,{children:"source.include"})," 配置项，可以指定需要 Builder 额外进行编译的目录或模块。",(0,s.jsx)(n.code,{children:"source.include"})," 的用法与 webpack 中的 ",(0,s.jsx)(n.a,{href:"https://webpack.js.org/configuration/module/#ruleinclude",target:"_blank",rel:"noopener noreferrer",children:"Rule.include"})," 一致，支持传入字符串或正则表达式来匹配模块的路径。"]}),"\n",(0,s.jsx)(n.p,{children:"比如:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import path from 'path';\n\nexport default {\n  source: {\n    include: [path.resolve(__dirname, '../other-dir')],\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.div,{className:"modern-directive tip",children:[(0,s.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,s.jsx)(n.div,{className:"modern-directive-content",children:(0,s.jsxs)(n.p,{children:["在使用 Rspack 作为打包工具时，默认",(0,s.jsx)(n.strong,{children:"所有文件"}),"都会经过编译，同时，不支持通过 ",(0,s.jsx)(n.code,{children:"source.exclude"})," 排除。\n"]})})]}),"\n",(0,s.jsxs)(n.h3,{id:"编译-npm-包",children:["编译 npm 包",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编译-npm-包",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"比较典型的使用场景是编译 node_modules 下的 npm 包，因为某些第三方依赖存在 ES6+ 的语法，这可能导致在低版本浏览器上无法运行，你可以通过该选项指定需要编译的依赖，从而解决此类问题。"}),"\n",(0,s.jsxs)(n.p,{children:["以 ",(0,s.jsx)(n.code,{children:"query-string"})," 为例，你可以做如下的配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import path from 'path';\n\nexport default {\n  source: {\n    include: [\n      // 方法一:\n      // 先通过 require.resolve 来获取模块的路径\n      // 再通过 path.dirname 来指向对应的目录\n      path.dirname(require.resolve('query-string')),\n      // 方法二:\n      // 通过正则表达式进行匹配\n      // 所有包含 `/query-string/` 的路径都会被匹配到\n      /\\/query-string\\//,\n    ],\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"编译-npm-包的子依赖",children:["编译 npm 包的子依赖",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编译-npm-包的子依赖",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当你通过 ",(0,s.jsx)(n.code,{children:"source.include"})," 编译一个 npm 包时，Builder 默认只会编译匹配到的模块，不会编译对应模块的",(0,s.jsx)(n.strong,{children:"子依赖"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["以 ",(0,s.jsx)(n.code,{children:"query-string"})," 为例，它依赖的 ",(0,s.jsx)(n.code,{children:"decode-uri-component"})," 包中同样存在 ES6+ 代码，因此需要将 ",(0,s.jsx)(n.code,{children:"decode-uri-component"})," 也加入到 ",(0,s.jsx)(n.code,{children:"source.include"})," 中："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export default {\n  source: {\n    include: [/\\/query-string\\//, /\\/decode-uri-component\\//],\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"编译-monorepo-中的其他库",children:["编译 Monorepo 中的其他库",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编译-monorepo-中的其他库",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["在 Monorepo 中进行开发时，如果需要引用 Monorepo 中其他库的源代码，也可以直接在 ",(0,s.jsx)(n.code,{children:"source.include"})," 进行配置:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import path from 'path';\n\nexport default {\n  source: {\n    include: [\n      // 方法一:\n      // 编译 Monorepo 的 package 目录下的所有文件\n      path.resolve(__dirname, '../../packages'),\n\n      // 方法二:\n      // 编译 Monorepo 的 package 目录里某个包的源代码\n      // 这种写法匹配的范围更加精准，对整体编译性能的影响更小\n      path.resolve(__dirname, '../../packages/xxx/src'),\n    ],\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"编译-commonjs-模块",children:["编译 CommonJS 模块",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编译-commonjs-模块",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["Babel 默认无法编译 CommonJS 模块，如果你编译了一个 CommonJS 模块，可能会出现 ",(0,s.jsx)(n.code,{children:"exports is not defined"})," 的运行时报错信息。"]}),"\n",(0,s.jsxs)(n.p,{children:["当你需要使用 ",(0,s.jsx)(n.code,{children:"source.include"})," 来编译 CommonJS 模块时，可以将 Babel 的 ",(0,s.jsx)(n.code,{children:"sourceType"})," 配置设置为 ",(0,s.jsx)(n.code,{children:"unambiguous"}),"："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export default {\n  tools: {\n    babel(config) {\n      config.sourceType = 'unambiguous';\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["将 ",(0,s.jsx)(n.code,{children:"sourceType"})," 设置为 ",(0,s.jsx)(n.code,{children:"unambiguous"})," 可能会产生一些其他影响，请参考 ",(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/en/options#sourcetype",target:"_blank",rel:"noopener noreferrer",children:"Babel 官方文档"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"匹配-symlink",children:["匹配 Symlink",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#匹配-symlink",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["如果你匹配的模块是通过 symlink 链接到当前项目中的，那么需要匹配这个模块的",(0,s.jsx)(n.strong,{children:"真实路径"}),"，而不是 symlink 后的路径。"]}),"\n",(0,s.jsxs)(n.p,{children:["比如，你将 Monorepo 中的 ",(0,s.jsx)(n.code,{children:"packages/foo"})," 路径 symlink 到当前项目的 ",(0,s.jsx)(n.code,{children:"node_modules/foo"})," 路径下，则需要去匹配 ",(0,s.jsx)(n.code,{children:"packages/foo"})," 路径，而不是 ",(0,s.jsx)(n.code,{children:"node_modules/foo"})," 路径。"]}),"\n",(0,s.jsxs)(n.p,{children:["该行为可以通过 webpack 的 ",(0,s.jsx)(n.a,{href:"https://webpack.js.org/configuration/resolve/#resolvesymlinks",target:"_blank",rel:"noopener noreferrer",children:"resolve.symlinks"})," 配置项来进行控制。"]}),"\n",(0,s.jsxs)(n.h3,{id:"注意事项",children:["注意事项",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注意事项",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["注意，",(0,s.jsx)(n.code,{children:"source.include"})," 不应该被用于编译整个 ",(0,s.jsx)(n.code,{children:"node_modules"})," 目录，比如下面的写法是错误的："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export default {\n  source: {\n    include: [/\\/node_modules\\//],\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["如果你对整个 ",(0,s.jsx)(n.code,{children:"node_modules"})," 进行编译，不仅会使编译时间大幅度增加，并且可能会产生不可预期的错误。因为 ",(0,s.jsx)(n.code,{children:"node_modules"})," 中的大部分 npm 包发布的已经是编译后的产物，通常没必要经过二次编译。此外，",(0,s.jsx)(n.code,{children:"core-js"})," 等 npm 包被编译后可能会出现异常。"]})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},20090:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return d}});var s=r("9880"),c=r("23169");function i(e){var n=Object.assign({ul:"ul",li:"li",strong:"strong",code:"code",p:"p",h3:"h3",a:"a",pre:"pre",img:"img",h4:"h4"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"Array<string | Regexp> | Function"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"打包工具："})," ",(0,s.jsx)(n.code,{children:"仅支持 webpack"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"限制源代码的引用路径。配置该选项后，所有源文件只能从约定的目录下引用代码，从其他目录引用代码会产生对应的报错提示。"}),"\n",(0,s.jsxs)(n.h3,{id:"示例",children:["示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["首先我们配置 ",(0,s.jsx)(n.code,{children:"moduleScopes"})," 仅包含 ",(0,s.jsx)(n.code,{children:"src"})," 目录："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    moduleScopes: ['./src'],\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后在 ",(0,s.jsx)(n.code,{children:"src/App.tsx"})," 中导入 ",(0,s.jsx)(n.code,{children:"src"})," 目录外部的 ",(0,s.jsx)(n.code,{children:"utils/a"})," 模块:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import a from '../utils/a';\n"})}),"\n",(0,s.jsx)(n.p,{children:"在编译时，会提示引用路径错误:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://lf3-static.bytednsdoc.com/obj/eden-cn/aphqeh7uhohpquloj/modern-js/docs/module-scopes-error.png",alt:"scopes-error"})}),"\n",(0,s.jsxs)(n.p,{children:["通过该选项配置 ",(0,s.jsx)(n.code,{children:"utils"})," 目录，再进行编译，则不会出现错误提示。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    moduleScopes: ['./src', './utils'],\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"array-类型",children:["Array 类型",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#array-类型",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当 ",(0,s.jsx)(n.code,{children:"moduleScopes"})," 的值为 ",(0,s.jsx)(n.code,{children:"Array"})," 类型时，可以直接设置若干个代码路径，比如添加以下配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    moduleScopes: ['./src', './shared', './utils'],\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"function-类型",children:["Function 类型",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#function-类型",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"moduleScopes"})," 也支持通过函数的形式来进行修改，避免覆盖默认值："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    moduleScopes: scopes => {\n      scopes.push('./shared');\n    },\n  },\n};\n"})})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},68246:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return d}});var s=r("9880"),c=r("23169");function i(e){var n=Object.assign({ul:"ul",li:"li",strong:"strong",code:"code",p:"p",h4:"h4",a:"a",pre:"pre"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"string | string[]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"在每个页面的入口文件前添加一段代码，这段代码会早于页面的代码执行，因此可以用于执行一些全局的代码逻辑，比如注入 polyfill、设置全局样式等。"}),"\n",(0,s.jsxs)(n.h4,{id:"添加单个脚本",children:["添加单个脚本",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#添加单个脚本",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["首先创建一个 ",(0,s.jsx)(n.code,{children:"src/polyfill.ts"})," 文件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"console.log('I am a polyfill');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["然后将 ",(0,s.jsx)(n.code,{children:"src/polyfill.ts"})," 配置到 ",(0,s.jsx)(n.code,{children:"source.preEntry"})," 上："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    preEntry: './src/polyfill.ts',\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["重新运行编译并访问任意页面，可以看到 ",(0,s.jsx)(n.code,{children:"src/polyfill.ts"})," 中的代码已经执行，并在 console 中输出了对应的内容。"]}),"\n",(0,s.jsxs)(n.h4,{id:"添加全局样式",children:["添加全局样式",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#添加全局样式",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["你也可以通过 ",(0,s.jsx)(n.code,{children:"source.preEntry"})," 来配置全局样式，这段 CSS 代码会早于页面代码加载，比如引入一个 ",(0,s.jsx)(n.code,{children:"normalize.css"})," 文件："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    preEntry: './src/normalize.css',\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"添加多个脚本",children:["添加多个脚本",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#添加多个脚本",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["你可以将 ",(0,s.jsx)(n.code,{children:"preEntry"})," 设置为数组来添加多个脚本，它们会按数组顺序执行："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    preEntry: ['./src/polyfill-a.ts', './src/polyfill-b.ts'],\n  },\n};\n"})})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},31868:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return d}});var s=r("9880"),c=r("23169");function i(e){var n=Object.assign({ul:"ul",li:"li",strong:"strong",code:"code",p:"p",a:"a",h3:"h3",pre:"pre",h4:"h4"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"string | Record<BuilderTarget, string>"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["用于为 ",(0,s.jsx)(n.a,{href:"https://webpack.js.org/configuration/resolve/#resolveextensions",target:"_blank",rel:"noopener noreferrer",children:"resolve.extensions"})," 添加统一的前缀。"]}),"\n",(0,s.jsx)(n.p,{children:"如果多个文件拥有相同的名称，但具有不同的文件后缀，Builder 会根据 extensions 数组的顺序进行识别，解析数组中第一个被识别的文件，并跳过其余文件。"}),"\n",(0,s.jsxs)(n.h3,{id:"示例",children:["示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["下面是配置 ",(0,s.jsx)(n.code,{children:".web"})," 前缀的例子。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    resolveExtensionPrefix: '.web',\n  },\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"配置完成后，extensions 数组会发生以下变化："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// 配置前\nconst extensions = ['.js', '.ts', ...];\n\n// 配置后\nconst extensions = ['.web.js', '.js', '.web.ts' , '.ts', ...];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在代码中 ",(0,s.jsx)(n.code,{children:"import './foo'"})," 时，会优先识别 ",(0,s.jsx)(n.code,{children:"foo.web.js"})," 文件，再识别 ",(0,s.jsx)(n.code,{children:"foo.js"})," 文件。"]}),"\n",(0,s.jsxs)(n.h4,{id:"根据产物类型设置",children:["根据产物类型设置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#根据产物类型设置",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当你同时构建多种类型的产物时，你可以为不同的产物类型设置不同的 extension 前缀。此时，你需要把 ",(0,s.jsx)(n.code,{children:"resolveExtensionPrefix"})," 设置为一个对象，对象的 key 为对应的产物类型。"]}),"\n",(0,s.jsxs)(n.p,{children:["比如为 ",(0,s.jsx)(n.code,{children:"web"})," 和 ",(0,s.jsx)(n.code,{children:"node"})," 设置不同的 extension 前缀："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  output: {\n    source: {\n      resolveExtensionPrefix: {\n        web: '.web',\n        node: '.node',\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["在代码中 ",(0,s.jsx)(n.code,{children:"import './foo'"})," 时，对于 node 产物，会优先识别 ",(0,s.jsx)(n.code,{children:"foo.node.js"})," 文件，而对于 web 产物，则会优先识别 ",(0,s.jsx)(n.code,{children:"foo.web.js"})," 文件。"]})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},92300:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return d}});var s=r("9880"),c=r("23169");function i(e){var n=Object.assign({ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code",p:"p",a:"a",h3:"h3",h4:"h4"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type Fields = (string | string[])[];\n\ntype ResolveMainFields = Fields | Record<BuilderTarget, Fields>;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["该配置项将决定你使用 ",(0,s.jsx)(n.code,{children:"package.json"})," 哪个字段导入 ",(0,s.jsx)(n.code,{children:"npm"})," 模块。对应 webpack 的 ",(0,s.jsx)(n.a,{href:"https://webpack.js.org/configuration/resolve/#resolvemainfields",target:"_blank",rel:"noopener noreferrer",children:"resolve.mainFields"})," 配置。"]}),"\n",(0,s.jsxs)(n.h3,{id:"示例",children:["示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    resolveMainFields: ['main', 'browser', 'exports'],\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"根据产物类型设置",children:["根据产物类型设置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#根据产物类型设置",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["当你同时构建多种类型的产物时，你可以为不同的产物类型设置不同的 mainFields。此时，你需要把 ",(0,s.jsx)(n.code,{children:"resolveMainFields"})," 设置为一个对象，对象的 key 为对应的产物类型。"]}),"\n",(0,s.jsxs)(n.p,{children:["比如为 ",(0,s.jsx)(n.code,{children:"web"})," 和 ",(0,s.jsx)(n.code,{children:"node"})," 设置不同的 mainFields："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  output: {\n    source: {\n      resolveMainFields: {\n        web: ['main', 'browser', 'exports'],\n        node: ['main', 'node', 'exports'],\n      },\n    },\n  },\n};\n"})})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},50403:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return d}});var s=r("9880"),c=r("23169");function i(e){var n=Object.assign({p:"p",a:"a",code:"code",ul:"ul",li:"li",strong:"strong",pre:"pre",div:"div",h3:"h3",h4:"h4"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["用于按需引入组件库的代码和样式，能力等价于 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/babel-plugin-import",target:"_blank",rel:"noopener noreferrer",children:"babel-plugin-import"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["它与 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/babel-plugin-import",target:"_blank",rel:"noopener noreferrer",children:"babel-plugin-import"})," 的区别在于，",(0,s.jsx)(n.code,{children:"source.transformImport"})," 不与 Babel 耦合。Builder 会自动识别当前使用的编译工具是 Babel、SWC 还是 Rspack，并添加相应的按需引入配置。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"类型："})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type Config =\n  | false\n  | Array<{\n      libraryName: string;\n      libraryDirectory?: string;\n      style?: string | boolean;\n      styleLibraryDirectory?: string;\n      camelToDashComponentName?: boolean;\n      transformToDefaultImport?: boolean;\n      customName?: ((member: string) => string | undefined) | string;\n      customStyleName?: ((member: string) => string | undefined) | string;\n    }>;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"默认值："})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["当项目中安装了 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/antd",target:"_blank",rel:"noopener noreferrer",children:"Ant Design 组件库"})," <= 4.x 版本时，Builder 会自动添加以下默认配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const defaultAntdConfig = {\n  libraryName: 'antd',\n  libraryDirectory: isServer ? 'lib' : 'es',\n  style: true,\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["当项目中安装了 ",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@arco-design/web-react",target:"_blank",rel:"noopener noreferrer",children:"Arco Design 组件库"})," 时，Builder 会自动添加以下默认配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const defaultArcoConfig = [\n  {\n    libraryName: '@arco-design/web-react',\n    libraryDirectory: isServer ? 'lib' : 'es',\n    camelToDashComponentName: false,\n    style: true,\n  },\n  {\n    libraryName: '@arco-design/web-react/icon',\n    libraryDirectory: isServer ? 'react-icon-cjs' : 'react-icon',\n    camelToDashComponentName: false,\n  },\n];\n"})}),"\n",(0,s.jsxs)(n.div,{className:"modern-directive tip",children:[(0,s.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,s.jsx)(n.div,{className:"modern-directive-content",children:(0,s.jsxs)(n.p,{children:["当你添加了 ",(0,s.jsx)(n.code,{children:"antd"})," 或 ",(0,s.jsx)(n.code,{children:"@arco-design/web-react"})," 相关的配置时，优先级会高于上述默认配置。\n"]})})]}),"\n",(0,s.jsxs)(n.h3,{id:"示例",children:["示例",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"当使用上述 antd 默认配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    transformImport: [\n      {\n        libraryName: 'antd',\n        libraryDirectory: 'es',\n        style: true,\n      },\n    ],\n  },\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"源代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { Button } from 'antd';\n"})}),"\n",(0,s.jsx)(n.p,{children:"会被转换成："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import Button from 'antd/es/button';\nimport 'antd/es/button/style';\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"禁用默认配置",children:["禁用默认配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#禁用默认配置",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["你可以手动设置 ",(0,s.jsx)(n.code,{children:"transformImport: false"})," 来关掉 transformImport 的默认行为。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"export default {\n  source: {\n    transformImport: false,\n  },\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["比如，当你使用了 ",(0,s.jsx)(n.code,{children:"externals"})," 来避免打包 antd 时，由于 ",(0,s.jsx)(n.code,{children:"transformImport"})," 默认会转换 antd 的引用路径，导致匹配的路径发生了变化，因此 externals 无法正确生效，此时你可以设置关闭 ",(0,s.jsx)(n.code,{children:"transformImport"})," 来避免该问题。"]}),"\n",(0,s.jsxs)(n.h3,{id:"配置",children:["配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"libraryname",children:["libraryName",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#libraryname",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"用于指定需要按需加载的模块名称。当 Builder 遍历代码时，如果遇到了对应模块的 import 语句，则会对其进行转换。"}),"\n",(0,s.jsxs)(n.h4,{id:"librarydirectory",children:["libraryDirectory",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#librarydirectory",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"'lib'"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["用于拼接转换后的路径，拼接规则为 ",(0,s.jsx)(n.code,{children:"${libraryName}/${libraryDirectory}/${member}"}),"，其中 member 为引入成员。"]}),"\n",(0,s.jsx)(n.p,{children:"示例："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Button } from 'foo';\n"})}),"\n",(0,s.jsx)(n.p,{children:"转换结果:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import Button from 'foo/lib/button';\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"style",children:["style",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#style",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["确定是否需要引入相关样式，若为 ",(0,s.jsx)(n.code,{children:"true"}),"，则会引入路径 ",(0,s.jsx)(n.code,{children:"${libraryName}/${libraryDirectory}/${member}/style"}),"。\n若为 ",(0,s.jsx)(n.code,{children:"false"})," 或 ",(0,s.jsx)(n.code,{children:"undefined"})," 则不会引入样式。"]}),"\n",(0,s.jsxs)(n.p,{children:["当配置为 ",(0,s.jsx)(n.code,{children:"true"})," 时："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Button } from 'foo';\n"})}),"\n",(0,s.jsx)(n.p,{children:"转换结果:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import Button from 'foo/lib/button';\nimport 'foo/lib/button/style';\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"stylelibrarydirectory",children:["styleLibraryDirectory",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stylelibrarydirectory",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["该配置用于拼接引入样式时的引入路径，若该配置被指定，则 ",(0,s.jsx)(n.code,{children:"style"})," 配置项会被忽略。拼接引入路径为 ",(0,s.jsx)(n.code,{children:"${libraryName}/${styleLibraryDirectory}/${member}"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["当配置为 ",(0,s.jsx)(n.code,{children:"styles"})," 时："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Button } from 'foo';\n"})}),"\n",(0,s.jsx)(n.p,{children:"转换结果:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import Button from 'foo/lib/button';\nimport 'foo/styles/button';\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"cameltodashcomponentname",children:["camelToDashComponentName",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cameltodashcomponentname",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"是否需要将 camelCase 的引入转换成 kebab-case。"}),"\n",(0,s.jsx)(n.p,{children:"示例："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { ButtonGroup } from 'foo';\n"})}),"\n",(0,s.jsx)(n.p,{children:"转换结果："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 设置成 true：\nimport ButtonGroup from 'foo/button-group';\n// 设置成 false：\nimport ButtonGroup from 'foo/ButtonGroup';\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"transformtodefaultimport",children:["transformToDefaultImport",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#transformtodefaultimport",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"是否将导入语句转换成默认导入。"}),"\n",(0,s.jsx)(n.p,{children:"示例："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { Button } from 'foo';\n"})}),"\n",(0,s.jsx)(n.p,{children:"转换结果："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// 设置成 true：\nimport Button from 'foo/button';\n// 设置成 false：\nimport { Button } from 'foo/button';\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"customname",children:["customName",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#customname",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"((member: string) => string | undefined) | string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsxs)(n.div,{className:"modern-directive tip",children:[(0,s.jsx)(n.div,{className:"modern-directive-title",children:"注意"}),(0,s.jsxs)(n.div,{className:"modern-directive-content",children:["\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"函数类型的配置只能在 Webpack 构建中使用。"}),"\n",(0,s.jsx)(n.li,{children:"模版类型的配置只能在 Rspack 构建或者使用了 SWC 的 Webpack 构建中使用。"}),"\n"]}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["自定义转换后的导入路径，输入是引入的成员，例如配置成 ",(0,s.jsx)(n.code,{children:" (member) => `my-lib/${member}` "}),"，会将 ",(0,s.jsx)(n.code,{children:"import { foo } from 'bar'"})," 转换成 ",(0,s.jsx)(n.code,{children:"import foo from 'my-lib/foo'"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["在使用 Rspack 构建时，不能使用函数配置，但可以使用 ",(0,s.jsx)(n.a,{href:"https://handlebarsjs.com/",target:"_blank",rel:"noopener noreferrer",children:"handlebars"})," 模版字符串，对于上面的函数配置，在使用模版字符串时可以用以下模版代替 ",(0,s.jsx)(n.code,{children:"my-lib/{{ member }}"}),"，也可以使用一些内置帮助方法，例如 ",(0,s.jsx)(n.code,{children:"my-lib/{{ kebabCase member }}"})," 来转换成 kebab-case 格式，除了 kebabCase 以外还有 camelCase，snakeCase，upperCase，lowerCase 可以使用。"]}),"\n",(0,s.jsxs)(n.h4,{id:"customstylename",children:["customStyleName",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#customstylename",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类型："})," ",(0,s.jsx)(n.code,{children:"((member: string) => string | undefined) | string"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认值："})," ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsxs)(n.div,{className:"modern-directive tip",children:[(0,s.jsx)(n.div,{className:"modern-directive-title",children:"注意"}),(0,s.jsxs)(n.div,{className:"modern-directive-content",children:["\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"函数类型的配置只能在 Webpack 构建中使用。"}),"\n",(0,s.jsx)(n.li,{children:"模版类型的配置只能在 Rspack 构建或者使用了 SWC 的 Webpack 构建中使用。"}),"\n"]}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["自定义转换后的样式导入路径，输入是引入的成员，例如配置成 ",(0,s.jsx)(n.code,{children:" (member) => `my-lib/${member}` "}),"，会将 ",(0,s.jsx)(n.code,{children:"import { foo } from 'bar'"})," 转换成 ",(0,s.jsx)(n.code,{children:"import foo from 'my-lib/foo'"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["在使用 Rspack 构建时，不能使用函数配置，但可以使用 ",(0,s.jsx)(n.a,{href:"https://handlebarsjs.com/",target:"_blank",rel:"noopener noreferrer",children:"handlebars"})," 模版字符串，对于上面的函数配置，在使用模版字符串时可以用以下模版代替 ",(0,s.jsx)(n.code,{children:"my-lib/{{ member }}"}),"，也可以使用一些内置帮助方法，例如 ",(0,s.jsx)(n.code,{children:"my-lib/{{ kebabCase member }}"})," 来转换成 kebab-case 格式，除了 kebabCase 以外还有 camelCase，snakeCase，upperCase，lowerCase 可以使用。"]})]})}var d=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}}}]);