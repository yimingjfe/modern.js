(self.webpackChunk_modern_js_builder_doc=self.webpackChunk_modern_js_builder_doc||[]).push([["docs_zh_guide_basic_css-modules_md"],{14782:function(e,s,n){"use strict";Object.defineProperty(s,"__esModule",{value:!0});!function(e,s){for(var n in s)Object.defineProperty(e,n,{enumerable:!0,get:s[n]})}(s,{frontmatter:function(){return r},title:function(){return c},toc:function(){return t},default:function(){return a}});var d=n("9880"),l=n("23169"),r={},c="使用 CSS Modules",t=[{text:"示例",depth:2,id:"示例"},{text:"为所有样式文件启用 CSS Modules",depth:2,id:"为所有样式文件启用-css-modules"},{text:"为指定的样式文件启用 CSS Modules",depth:2,id:"为指定的样式文件启用-css-modules"},{text:"自定义类名",depth:2,id:"自定义类名"},{text:"添加类型声明",depth:2,id:"添加类型声明"},{text:"生成准确的类型定义",depth:2,id:"生成准确的类型定义"},{text:"示例",depth:3,id:"示例-1"},{text:"相关配置",depth:3,id:"相关配置"}];function o(e){var s=Object.assign({h1:"h1",a:"a",p:"p",code:"code",ul:"ul",li:"li",h2:"h2",pre:"pre",div:"div",h3:"h3"},(0,l.useMDXComponents)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(s.h1,{id:"使用-css-modules",children:["使用 CSS Modules",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-css-modules",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:[(0,d.jsx)(s.a,{href:"https://github.com/css-modules/css-modules",target:"_blank",rel:"noopener noreferrer",children:"CSS Modules"})," 让我们能以模块化的方式编写 CSS 代码，并且可以在 JavaScript 文件中导入和使用这些样式。使用 CSS Modules 可以自动生成唯一的类名，隔离不同模块之间的样式，避免类名冲突。"]}),"\n",(0,d.jsxs)(s.p,{children:["Builder 默认支持使用 CSS Modules，无需添加额外的配置。我们约定使用 ",(0,d.jsx)(s.code,{children:"[name].module.css"})," 文件名来启用 CSS Modules。"]}),"\n",(0,d.jsx)(s.p,{children:"以下样式文件会被视为 CSS Modules："}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"*.module.scss"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"*.module.less"})}),"\n",(0,d.jsx)(s.li,{children:(0,d.jsx)(s.code,{children:"*.module.css"})}),"\n"]}),"\n",(0,d.jsxs)(s.h2,{id:"示例",children:["示例",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"编写样式："}),"\n"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-css",children:"/* button.module.css */\n.error {\n  background: red;\n}\n"})}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"使用样式："}),"\n"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-tsx",children:"// Button.tsx\nimport React, { Component } from 'react';\n// 引入样式文件\nimport styles from './button.module.css';\n\nexport default () => {\n  return <button className={styles.error}>Error Button</button>;\n};\n"})}),"\n",(0,d.jsxs)(s.h2,{id:"为所有样式文件启用-css-modules",children:["为所有样式文件启用 CSS Modules",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#为所有样式文件启用-css-modules",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["在默认情况下，只有 ",(0,d.jsx)(s.code,{children:"*.module.css"})," 结尾的文件才被视为 CSS Modules 模块。"]}),"\n",(0,d.jsxs)(s.p,{children:["如果你想将源码目录下的所有 CSS 文件当做 CSS Modules 模块进行处理，可以通过开启 ",(0,d.jsx)(s.a,{href:"https://modernjs.dev/builder/api/config-output.html#outputdisablecssmoduleextension",target:"_blank",rel:"noopener noreferrer",children:"output.disableCssModuleExtension"})," 来实现，比如："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",children:"export default {\n  output: {\n    disableCssModuleExtension: true,\n  },\n};\n"})}),"\n",(0,d.jsx)(s.p,{children:"设置后，以下两个文件都会被视为 CSS Modules："}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",children:"import styles1 from './foo.module.css';\nimport styles2 from './bar.css';\n"})}),"\n",(0,d.jsxs)(s.div,{className:"modern-directive tip",children:[(0,d.jsx)(s.div,{className:"modern-directive-title",children:"TIP"}),(0,d.jsx)(s.div,{className:"modern-directive-content",children:(0,d.jsxs)(s.p,{children:["我们不推荐开启此配置项，因为开启 ",(0,d.jsx)(s.code,{children:"disableCssModuleExtension"})," 后，CSS Modules 文件和普通 CSS 文件无法得到明确的区分，不利于长期维护。\n"]})})]}),"\n",(0,d.jsxs)(s.h2,{id:"为指定的样式文件启用-css-modules",children:["为指定的样式文件启用 CSS Modules",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#为指定的样式文件启用-css-modules",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["在默认情况下，只有 ",(0,d.jsx)(s.code,{children:"*.module.css"})," 结尾的文件才被视为 CSS Modules 模块。"]}),"\n",(0,d.jsxs)(s.p,{children:["如果你想只为一些指定的样式文件启用 CSS Modules，可以通过配置 ",(0,d.jsx)(s.a,{href:"/api/config-output#outputcssmodule",children:"output.cssModules"})," 来实现，比如："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",children:"export default {\n  output: {\n    cssModules: {\n      auto: resource => {\n        return resource.includes('.module.') || resource.includes('shared/');\n      },\n    },\n  },\n};\n"})}),"\n",(0,d.jsxs)(s.h2,{id:"自定义类名",children:["自定义类名",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义类名",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["自定义 CSS Modules 生成的类名也是我们比较常用的功能，你可以使用 ",(0,d.jsx)(s.a,{href:"/api/config-output#outputcssmodulelocalidentname",children:"output.cssModuleLocalIdentName"})," 来进行配置。"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",children:"export default {\n  output: {\n    cssModuleLocalIdentName: '[hash:base64:4]',\n  },\n};\n"})}),"\n",(0,d.jsxs)(s.p,{children:["如果你需要自定义 CSS Modules 的其他配置，可以通过 ",(0,d.jsx)(s.a,{href:"/api/config-tools#css-loader",children:"tools.cssLoader"})," 进行设置。"]}),"\n",(0,d.jsxs)(s.h2,{id:"添加类型声明",children:["添加类型声明",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#添加类型声明",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"当你在 TypeScript 代码中引用 CSS Modules 时，TypeScript 可能会提示该模块缺少类型定义："}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{children:"TS2307: Cannot find module './index.module.css' or its corresponding type declarations.\n"})}),"\n",(0,d.jsxs)(s.p,{children:["此时你需要为 CSS Modules 添加类型声明文件，请在项目中创建 ",(0,d.jsx)(s.code,{children:"src/global.d.ts"})," 文件，并添加相应的类型声明："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",meta:'title="src/global.d.ts"',children:"declare module '*.module.css' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\n\ndeclare module '*.module.scss' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\n\ndeclare module '*.module.sass' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\n\ndeclare module '*.module.less' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\n\ndeclare module '*.module.styl' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\n"})}),"\n",(0,d.jsxs)(s.p,{children:["如果你开启了 ",(0,d.jsx)(s.code,{children:"disableCssModuleExtension"})," 配置值，还需要添加以下类型："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",meta:'title="src/global.d.ts"',children:"declare module '*.css' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\n\ndeclare module '*.scss' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\n\ndeclare module '*.sass' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\n\ndeclare module '*.less' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\n\ndeclare module '*.styl' {\n  const classes: { readonly [key: string]: string };\n  export default classes;\n}\n"})}),"\n",(0,d.jsxs)(s.p,{children:["添加类型声明后，如果依然存在上述错误提示，请尝试重启当前 IDE，或者调整 ",(0,d.jsx)(s.code,{children:"global.d.ts"})," 所在的目录，使 TypeScript 能够正确识别类型定义。"]}),"\n",(0,d.jsxs)(s.h2,{id:"生成准确的类型定义",children:["生成准确的类型定义",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#生成准确的类型定义",children:"#"})]}),"\n",(0,d.jsx)(s.p,{children:"上述方法虽然可以解决 CSS Modules 在 TypeScript 中的类型问题，但是无法准确地提示出某个 CSS 文件导出了哪些类名。"}),"\n",(0,d.jsxs)(s.p,{children:["Builder 支持为 CSS Modules 生成准确的类型声明，你只需要开启 ",(0,d.jsx)(s.a,{href:"/api/config-output#outputenablecssmoduletsdeclaration",children:"output.enableCssModuleTSDeclaration"})," 配置项，再执行构建命令，Builder 就会为项目中所有的 CSS Modules 文件生成相应的类型声明文件。"]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",children:"export default {\n  output: {\n    enableCssModuleTSDeclaration: true,\n  },\n};\n"})}),"\n",(0,d.jsxs)(s.h3,{id:"示例-1",children:["示例",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#示例-1",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["例如某个文件夹下面有 ",(0,d.jsx)(s.code,{children:"src/index.ts"})," 和 ",(0,d.jsx)(s.code,{children:"src/index.module.scss"})," 两个文件："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-tsx",meta:'title="src/index.ts"',children:"import styles from './index.module.scss';\n\nexport default () => {\n  <div>\n    <div className={styles.pageHeader}>Page Header</div>\n  </div>;\n};\n"})}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-scss",children:"// index.module.scss\n.page-header {\n  color: black;\n}\n"})}),"\n",(0,d.jsxs)(s.p,{children:["执行构建命令后，会自动生成 ",(0,d.jsx)(s.code,{children:"src/index.module.scss.d.ts"})," 类型声明文件："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ts",meta:'title="src/index.module.scss.d.ts"',children:"// This file is automatically generated.\n// Please do not change this file!\ninterface CssExports {\n  'page-header': string;\n  pageHeader: string;\n}\nexport const cssExports: CssExports;\nexport default cssExports;\n"})}),"\n",(0,d.jsxs)(s.p,{children:["此时再打开 ",(0,d.jsx)(s.code,{children:"src/index.ts"})," 文件，可以看到 ",(0,d.jsx)(s.code,{children:"styles"})," 对象已经具备了准确的类型。"]}),"\n",(0,d.jsxs)(s.h3,{id:"相关配置",children:["相关配置",(0,d.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#相关配置",children:"#"})]}),"\n",(0,d.jsxs)(s.p,{children:["在上述例子中，",(0,d.jsx)(s.code,{children:"src/index.module.scss.d.ts"})," 是编译生成的代码，你可以选择将它们提交到 Git 仓库里，也可以选择在 ",(0,d.jsx)(s.code,{children:".gitignore"})," 文件中忽略它们："]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-bash",children:"# Ignore auto generated CSS declarations\n*.module.css.d.ts\n*.module.sass.d.ts\n*.module.scss.d.ts\n*.module.less.d.ts\n*.module.styl.d.ts\n"})}),"\n",(0,d.jsxs)(s.p,{children:["此外，如果生成的代码导致了 ESLint 报错，你也可以将上述配置添加到 ",(0,d.jsx)(s.code,{children:".eslintignore"})," 文件里。"]})]})}var a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},s=Object.assign({},(0,l.useMDXComponents)(),e.components).wrapper;return s?(0,d.jsx)(s,Object.assign({},e,{children:(0,d.jsx)(o,e)})):o(e)}}}]);