(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{317:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器兼容性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器兼容性"}},[t._v("#")]),t._v(" 浏览器兼容性")]),t._v(" "),s("p",[t._v("本章节介绍如何使用 Builder 提供的能力来处理浏览器兼容性问题。")]),t._v(" "),s("h2",{attrs:{id:"设置浏览器范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置浏览器范围"}},[t._v("#")]),t._v(" 设置浏览器范围")]),t._v(" "),s("p",[t._v("在处理兼容性问题之前，首先需要明确你的项目需要支持的浏览器范围，并添加相应的 browserslist 配置。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果你还没有设置浏览器范围，请先阅读 "),s("RouterLink",{attrs:{to:"/guide/advanced/browserslist.html"}},[t._v("设置浏览器范围")]),t._v(" 章节。")],1)]),t._v(" "),s("li",[s("p",[t._v("如果你已经设置了浏览器范围，那么 Builder 会自动根据该范围进行编译，对 JavaScript 语法和 CSS 语法进行降级处理，并注入所需的 polyfill 代码。大部分情况下，你可以放心地使用现代 ECMAScript 特性，无须担心兼容性问题。")])])]),t._v(" "),s("p",[t._v("在设置浏览器范围之后，如果你依然在开发中遇到了一些兼容性问题，请继续阅读下面的内容来寻找解决方案。")]),t._v(" "),s("h2",{attrs:{id:"背景知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背景知识"}},[t._v("#")]),t._v(" 背景知识")]),t._v(" "),s("p",[t._v("在处理兼容性问题之前，建议你了解以下背景知识，以更好地处理相关问题。")]),t._v(" "),s("h3",{attrs:{id:"语法降级和-api-降级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法降级和-api-降级"}},[t._v("#")]),t._v(" 语法降级和 API 降级")]),t._v(" "),s("p",[t._v("当你在项目中使用高版本语法和 API 时，为了让编译后的代码能稳定运行在低版本浏览器中，需要完成两部分降级：语法降级和 API 降级。")]),t._v(" "),s("p",[s("strong",[t._v("Builder 通过语法转译来对语法进行降级，通过 polyfill 来对 API 进行进行降级。")])]),t._v(" "),s("blockquote",[s("p",[t._v("语法和 API 并不是强绑定的，浏览器厂商在实现引擎的时候，会根据规范或者自身需要提前支持一些语法或者提前实现一些 API。因此，同一时期的不同厂商的浏览器，对语法和 API 的兼容都不一定相同。所以在一般的实践中，语法和 API 是分成两个部分进行处理的。")])]),t._v(" "),s("h3",{attrs:{id:"语法转译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法转译"}},[t._v("#")]),t._v(" 语法转译")]),t._v(" "),s("p",[s("strong",[t._v("语法是编程语言如何组织代码的一系列规则")]),t._v("，不遵守这些规则的代码无法被编程语言的引擎正确识别，因此无法被运行。在 JavaScript 中，以下几个示例都是语法规则：")]),t._v(" "),s("ul",[s("li",[t._v("在 "),s("code",[t._v("const foo = 1")]),t._v(" 中，"),s("code",[t._v("const")]),t._v(" 表示声明一个不可变的常量。")]),t._v(" "),s("li",[t._v("在 "),s("code",[t._v("foo?.bar?.baz")]),t._v(" 中，"),s("code",[t._v("?.")]),t._v(" 表示可选链访问属性。")]),t._v(" "),s("li",[t._v("在 "),s("code",[t._v("async function () {}")]),t._v(" 中，"),s("code",[t._v("async")]),t._v(" 表示声明一个异步函数。")])]),t._v(" "),s("p",[t._v("由于不同浏览器的解析器所能支持的语法不同，尤其是旧版本浏览器引擎所能支持的语法较少，因此一些语法在低版本浏览器引擎中运行时，就会在解析 AST 的阶段报错。")]),t._v(" "),s("p",[t._v("比如下面这段代码在 IE 浏览器或低版本 Node.js 下会报错：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("我们在低版本 Node.js 中运行这段代码，会出现以下错误信息：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("SyntaxError: Unexpected token "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n  at Object.exports.runInThisContext "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm.js:73:16"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  at Object."),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("anonymous"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("eval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("-wrapper:6:22"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  at Module._compile "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("module.js:460:26"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  at evalScript "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node.js:431:25"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  at startup "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node.js:90:7"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  at node.js:814:3\n")])])]),s("p",[t._v("从错误信息里可以明显看到，这是一个语法错误（SyntaxError）。这说明这个语法在低版本的引擎中是不受支持的。")]),t._v(" "),s("p",[s("strong",[t._v("语法是不能通过 polyfill 或者 shim 进行支持的")]),t._v("。如果想在低版本浏览器中运行一些它原本不支持的语法，那么就需要对代码进行转译，转译成低版本引擎所能支持的语法。")]),t._v(" "),s("p",[t._v("将上述代码转译为以下代码即可在低版本引擎中运行：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("转译后，代码的语法变了，把一些低版本引擎无法理解的语法用其可理解的语法替代，"),s("strong",[t._v("但代码本身的意义没有变")]),t._v("。")]),t._v(" "),s("p",[t._v("如果引擎在转换为 AST 的时候遇到了无法识别的语法，就会报语法错误，并中止代码执行流程。在这种情况下，如果你的项目没有使用 SSR 或 SSG 等能力的话，页面将会直接白屏，导致页面不可用。")]),t._v(" "),s("p",[t._v("如果代码被转换为 AST 成功，引擎会将 AST 转为可执行代码，并在引擎内部正常执行。")]),t._v(" "),s("h3",{attrs:{id:"api-polyfill"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api-polyfill"}},[t._v("#")]),t._v(" API Polyfill")]),t._v(" "),s("p",[t._v("JavaScript 是解释型脚本语言，不同于 Rust 等编译型语言。Rust 会在编译阶段对代码中的调用进行检查，而 JavaScript 在真正运行到某一行代码之前，并不知道这一行代码所调用的函数是否存在，因此一些错误只有在运行时才会出现。")]),t._v(" "),s("p",[t._v("举个例子，下面这段代码：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello world!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("notExistedMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面这段代码有着正确的语法，在引擎运行时的第一个阶段也能正确转换为 AST，但是在真正运行的时候，由于 "),s("code",[t._v("String.prototype")]),t._v(" 上不存在 "),s("code",[t._v("notExistedMethod")]),t._v(" 这个方法，所以在实际运行的时候会报错：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("Uncaught TypeError: str.notExistedMethod is not a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v("\n  at "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("anonymous"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":2:17\n")])])]),s("p",[t._v("随着 ECMAScript 的迭代，一些内置对象也会迎来新的方法。比如 "),s("code",[t._v("String.prototype.replaceAll")]),t._v(" 是在 ES2021 中被引入的，那么在大部分 2021 年前的浏览器的引擎的内置对象 "),s("code",[t._v("String.prototype")]),t._v(" 中是不存在 "),s("code",[t._v("replaceAll")]),t._v(" 方法的，因此下面这段代码在最新的 Chrome 里可以运行，但是在较早的版本里无法运行：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xyz'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("为了解决在旧版浏览器中的 "),s("code",[t._v("String.prototype")]),t._v(" 缺少 "),s("code",[t._v("replaceAll")]),t._v(" 的问题，我们可以在老版本的浏览器里扩展 "),s("code",[t._v("String.prototype")]),t._v(" 对象，给它加上 "),s("code",[t._v("replaceAll")]),t._v(" 方法，例如：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该 polyfill 的实现并不一定符合标准，仅作为示例。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("replaceAll"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("replaceAll")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If a regex pattern")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[object regexp]'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If a string")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'g'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("这种为旧环境提供实现来对齐新 API 的技术被称作 polyfill。")])]),t._v(" "),s("h2",{attrs:{id:"降级方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#降级方式"}},[t._v("#")]),t._v(" 降级方式")]),t._v(" "),s("p",[t._v("在 Builder 中，我们将代码分为三类：")]),t._v(" "),s("ul",[s("li",[t._v("第一类是当前项目中的源代码。")]),t._v(" "),s("li",[t._v("第二类是通过 npm 安装的第三方依赖代码。")]),t._v(" "),s("li",[t._v("第三类是非当前项目的代码，比如 monorepo 中其他目录下的代码。")])]),t._v(" "),s("p",[t._v("默认情况下，Builder 只会对第一类代码进行编译和降级，而其他类型的代码默认是不进行降级处理的。")]),t._v(" "),s("p",[t._v("之所以这样处理，主要有几个考虑：")]),t._v(" "),s("ul",[s("li",[t._v("将所有第三方依赖代码都进行降级的话会"),s("strong",[t._v("导致构建性能显著下降")]),t._v("。")]),t._v(" "),s("li",[t._v("大部分第三方依赖在发布前已经进行了降级处理，二次降级可能会引入新问题。")]),t._v(" "),s("li",[t._v("非当前项目的代码可能已经经过了编译处理，或者编译所需的配置与当前项目并不相同。")])]),t._v(" "),s("h3",{attrs:{id:"降级当前项目代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#降级当前项目代码"}},[t._v("#")]),t._v(" 降级当前项目代码")]),t._v(" "),s("p",[t._v("当前项目的代码会被默认降级，因此你不需要添加额外的配置，只需要保证正确设置了浏览器范围即可。")]),t._v(" "),s("h3",{attrs:{id:"降级第三方依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#降级第三方依赖"}},[t._v("#")]),t._v(" 降级第三方依赖")]),t._v(" "),s("p",[t._v("当你发现某个第三方依赖的代码导致了兼容性问题时，你可以将这个依赖添加到 Builder 的 "),s("RouterLink",{attrs:{to:"/zh/api/config-source.html#source-include"}},[t._v("source.include")]),t._v(" 配置中，使 Builder 对该依赖进行额外的编译。")],1),t._v(" "),s("p",[t._v("以 "),s("code",[t._v("query-string")]),t._v(" 这个 npm 包为例，你可以做如下的配置：")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" path "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  source"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    include"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法一:")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先通过 require.resolve 来获取模块的路径")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再通过 path.dirname 来指向对应的目录")]),t._v("\n      path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dirname")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'query-string'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法二:")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过正则表达式进行匹配")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有包含 `/query-string/` 的路径都会被匹配到")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\"),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("query-string\\/")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("注意，该配置只会编译 "),s("code",[t._v("query-string")]),t._v(" 自身的代码，不会编译 "),s("code",[t._v("query-string")]),t._v(" 的子依赖。如果需要编译 "),s("code",[t._v("query-string")]),t._v(" 的子依赖，则需要将对应的 npm 包也加入到 "),s("code",[t._v("source.include")]),t._v(" 中。")]),t._v(" "),s("h3",{attrs:{id:"降级非当前项目的代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#降级非当前项目的代码"}},[t._v("#")]),t._v(" 降级非当前项目的代码")]),t._v(" "),s("p",[t._v("当你引用非当前项目的代码时，如果该代码未经过编译处理，那么你也需要配置 "),s("RouterLink",{attrs:{to:"/zh/api/config-source.html#source-include"}},[t._v("source.include")]),t._v(" 来对它进行编译。")],1),t._v(" "),s("p",[t._v("比如，你需要引用 monorepo 中 "),s("code",[t._v("packages")]),t._v(" 目录下的某个模块，可以添加如下的配置：")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" path "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  source"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    include"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法一:")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译 Monorepo 的 package 目录下的所有文件")]),t._v("\n      path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../../packages'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法二:")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译 Monorepo 的 package 目录里某个包的源代码")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这种写法匹配的范围更加精准，对整体编译性能的影响更小")]),t._v("\n      path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../../packages/xxx/src'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"polyfill-方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#polyfill-方案"}},[t._v("#")]),t._v(" Polyfill 方案")]),t._v(" "),s("p",[t._v("Builder 底层通过 babel 或 SWC 编译 JavaScript 代码，并注入 "),s("a",{attrs:{href:"https://github.com/zloirock/core-js",target:"_blank",rel:"noopener noreferrer"}},[t._v("core-js"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://www.npmjs.com/package/@babel/runtime",target:"_blank",rel:"noopener noreferrer"}},[t._v("@babel/runtime"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://www.npmjs.com/package/@swc/helpers",target:"_blank",rel:"noopener noreferrer"}},[t._v("@swc/helpers"),s("OutboundLink")],1),t._v(" 等 polyfill 库。")]),t._v(" "),s("p",[t._v("在不同的使用场景下，你可能会需要不同的 polyfill 方案。Builder 提供了 "),s("RouterLink",{attrs:{to:"/zh/api/config-output.html#output-polyfill"}},[t._v("output.polyfill")]),t._v(" 配置项来切换不同的 polyfill 方案。")],1),t._v(" "),s("h3",{attrs:{id:"entry-方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#entry-方案"}},[t._v("#")]),t._v(" entry 方案")]),t._v(" "),s("p",[t._v("entry 为默认方案，无须手动设置。")]),t._v(" "),s("p",[t._v("在使用 entry 方案时，Builder 会根据当前项目设置的浏览器范围来计算需要注入哪些 "),s("code",[t._v("core-js")]),t._v(" 方法，并在每个页面的入口文件中进行注入。这种方式注入的 polyfill 较为全面，不需要再担心项目源码和第三方依赖的 polyfill 问题，但是因为包含了一些没有用到的 polyfill 代码，所以最终的包大小可能会有所增加。")]),t._v(" "),s("p",[t._v("entry 方案对应的配置为：")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  output"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    polyfill"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'entry'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"usage-方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usage-方案"}},[t._v("#")]),t._v(" usage 方案")]),t._v(" "),s("p",[t._v("usage 方案可以更精确地控制需要注入哪些 core-js polyfill。")]),t._v(" "),s("p",[t._v("当你开启 usage 方案时，Builder 会分析项目中的源代码，并判断需要注入哪些 polyfill。")]),t._v(" "),s("p",[t._v("比如代码中使用了 "),s("code",[t._v("Map")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("编译后，只会在该文件中注入 "),s("code",[t._v("Map")]),t._v(" 所需的 polyfill：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'core-js/modules/es.map'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这种方式的优点是注入的 polyfill 体积更小，适合对包体积有较高要求的项目使用。缺点是 polyfill 可能注入不全，因为第三方依赖默认不会被编译和降级处理，因此第三方依赖所需的 polyfill 不会被分析到，如果需要分析某个第三方依赖，也需要将其加入到 "),s("RouterLink",{attrs:{to:"/zh/api/config-source.html#source-include"}},[t._v("source.include")]),t._v(" 配置中。")],1),t._v(" "),s("p",[t._v("usage 方案对应的配置为：")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  output"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    polyfill"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'usage'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"不注入-polyfill"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不注入-polyfill"}},[t._v("#")]),t._v(" 不注入 Polyfill")]),t._v(" "),s("p",[t._v("你可以将 "),s("code",[t._v("output.polyfill")]),t._v(" 设置为 "),s("code",[t._v("'off'")]),t._v(" 来禁用 polyfill 注入的行为。")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  output"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    polyfill"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'off'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("使用此选项时，你需要自行保证代码的兼容性，比如通过 "),s("RouterLink",{attrs:{to:"/zh/api/config-source.html#source-preentry"}},[t._v("source.preEntry")]),t._v(" 来手动引用所需的 polyfill 代码。")],1)])}),[],!1,null,null,null);s.default=e.exports}}]);